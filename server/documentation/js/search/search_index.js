var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AppGateway.html",[0,0.044,1,2.266]],["body/classes/AppGateway.html",[0,0.033,1,2.48,2,1.06,3,0.148,4,0.148,5,0.133,6,2.387,7,1.463,8,2.387,9,3.554,10,3.554,11,3.554,12,3.554,13,4.203,14,3.554,15,1.366,16,4.246,17,4.246,18,4.246,19,0.213,20,0.988,21,2.319,22,3.958,23,4.246,24,0.9,25,3.554,26,3.554,27,3.554,28,3.554,29,0.547,30,0.018,31,1.303,32,0.962,33,1.503,34,3.554,35,0.995,36,2.773,37,5.462,38,1.941,39,4.246,40,2.773,41,3.554,42,2.773,43,1.136,44,0.982,45,0.934,46,1.136,47,2.196,48,3.554,49,5.998,50,3.457,51,2.773,52,4.712,53,3.554,54,2.773,55,3.554,56,4.712,57,3.554,58,2.773,59,4.246,60,0.441,61,2.387,62,2.387,63,2.387,64,0.363,65,2.133,66,2.387,67,1.379,68,2.387,69,1.792,70,0.148,71,2.387,72,3.554,73,2.387,74,4.246,75,2.387,76,2.387,77,2.387,78,2.387,79,2.387,80,4.246,81,3.531,82,2.387,83,0.633,84,2.387,85,2.387,86,0.01,87,0.01]],["title/classes/AppGateway-1.html",[0,0.037,1,1.893,88,2.425]],["body/classes/AppGateway-1.html",[0,0.033,1,2.48,2,1.06,3,0.148,4,0.148,5,0.133,7,1.463,8,2.387,9,3.554,10,3.554,11,3.554,12,3.554,13,4.203,14,3.554,15,1.366,16,4.246,17,4.246,18,4.246,19,0.213,20,0.988,21,2.319,22,3.958,23,4.246,24,0.9,25,3.554,26,3.554,27,3.554,28,3.554,29,0.547,30,0.018,31,1.303,32,0.962,33,1.503,34,3.554,35,0.995,37,5.462,38,1.941,39,4.246,41,3.554,43,1.136,44,0.982,45,0.934,46,1.136,47,2.196,48,3.554,49,5.998,50,3.457,52,4.712,53,3.554,55,3.554,56,4.712,57,3.554,59,4.246,60,0.441,61,2.387,62,2.387,63,2.387,64,0.363,65,2.133,66,2.387,67,1.379,68,2.387,69,1.792,70,0.148,71,2.387,72,3.554,73,2.387,74,4.246,75,2.387,76,2.387,77,2.387,78,2.387,79,2.387,80,4.246,81,3.531,82,2.387,83,0.633,84,2.387,85,2.387,86,0.01,87,0.01,89,2.387,90,2.773,91,2.773,92,2.773,93,2.773,94,2.773,95,2.773]],["title/modules/AppModule.html",[96,1.037,97,2.643]],["body/modules/AppModule.html",[0,0.029,3,0.129,4,0.129,5,0.116,30,0.018,60,0.649,64,0.317,67,2.892,70,0.129,86,0.009,87,0.009,96,1.249,97,5.07,98,1.024,99,1.139,100,1.278,101,1.278,102,1.139,103,1.575,104,1.278,105,2.085,106,2.085,107,3.758,108,3.758,109,3.558,110,3.758,111,3.758,112,3.758,113,3.758,114,3.758,115,1.966,116,1.278,117,1.278,118,2.422,119,3.183,120,2.085,121,1.697,122,1.697,123,2.422,124,1.863,125,2.422,126,2.867,127,3.727,128,2.422,129,2.422,130,2.422,131,3.727,132,2.422,133,2.422,134,1.863,135,2.422,136,2.422,137,2.422,138,2.422,139,2.422,140,2.085,141,2.422,142,1.278,143,3.727,144,2.422,145,2.085,146,2.422,147,2.422,148,2.422,149,2.422,150,2.422,151,3.013,152,2.085,153,2.422,154,2.422,155,2.422,156,2.422,157,2.422,158,2.422,159,2.422,160,2.422,161,2.085,162,2.422,163,2.422,164,1.863,165,2.422,166,2.867,167,2.867,168,2.422,169,2.422,170,2.408,171,2.422,172,2.422,173,2.422,174,2.085,175,2.422,176,2.422,177,2.085,178,2.422,179,2.422,180,2.085,181,1.278,182,2.085,183,1.565,184,1.863,185,2.422,186,2.422,187,2.422,188,2.422,189,2.085,190,2.422,191,2.085,192,1.697,193,2.422,194,1.697]],["title/interfaces/Cat.html",[195,1.191,196,2.437]],["body/interfaces/Cat.html",[3,0.264,4,0.264,5,0.236,19,0.38,20,1.468,29,0.596,30,0.017,44,1.253,70,0.264,86,0.014,87,0.014,195,1.561,196,3.962,197,2.458,198,4.254,199,6.002,200,6.002,201,2.818,202,1.831,203,2.678]],["title/controllers/CatsController.html",[204,2.643,205,2.643]],["body/controllers/CatsController.html",[0,0.04,3,0.182,4,0.182,5,0.163,19,0.262,24,1.047,29,0.429,30,0.018,33,1.244,35,0.902,38,2.61,43,0.998,44,0.863,45,0.821,46,1.154,47,1.521,60,0.617,64,0.447,70,0.182,83,0.78,86,0.011,87,0.011,121,2.394,122,2.394,194,2.394,196,2.208,201,2.347,203,1.372,204,2.394,205,3.365,206,2.941,207,2.394,208,2.941,209,3.953,210,3.694,211,4.634,212,5.553,213,3.416,214,4.613,215,3.416,216,3.416,217,3.416,218,3.416,219,2.884,220,3.416,221,4.802,222,3.416,223,3.335,224,2.941,225,2.628,226,3.416,227,4.802,228,3.416,229,3.416,230,2.394,231,3.416,232,2.394,233,3.416,234,3.365,235,3.416,236,3.416,237,3.335,238,2.941,239,3.416,240,3.416,241,2.941,242,3.416,243,3.416,244,2.052,245,3.416,246,3.416,247,3.416,248,3.416,249,3.416,250,3.416,251,2.941]],["title/modules/CatsModule.html",[96,1.037,107,2.437]],["body/modules/CatsModule.html",[0,0.054,3,0.244,4,0.244,5,0.218,30,0.018,60,0.605,64,0.597,70,0.244,86,0.014,87,0.014,96,1.768,98,1.93,99,2.147,100,2.41,101,2.41,102,2.147,103,2.718,104,2.41,107,4.627,115,3.079,116,2.41,117,2.41,119,3.201,120,3.932,121,3.201,122,3.201,194,4.09,205,4.507,237,4.302,238,3.932,252,3.932,253,3.932,254,4.568,255,4.568,256,4.568]],["title/injectables/CatsService.html",[237,2.266,257,0.522]],["body/injectables/CatsService.html",[0,0.05,3,0.227,4,0.227,5,0.204,19,0.327,20,1.335,21,2.924,24,1.216,29,0.498,30,0.018,31,2.003,32,1.479,35,1.01,43,0.886,44,0.766,45,0.728,46,1.16,47,1.897,60,0.498,64,0.557,70,0.227,83,0.973,86,0.013,87,0.013,196,4.748,203,2.499,208,5.355,210,4.292,211,5.077,237,3.351,241,3.668,257,0.772,258,1.41,259,3.668,260,5.579,261,4.261,262,4.261,263,4.261,264,4.261,265,4.261]],["title/modules/CoreModule.html",[96,1.037,108,2.437]],["body/modules/CoreModule.html",[0,0.056,3,0.255,4,0.255,5,0.229,30,0.018,60,0.616,64,0.626,70,0.255,86,0.014,87,0.014,96,1.652,98,2.022,103,2.022,108,3.884,266,4.785,267,6.571,268,2.874,269,4.212,270,4.785,271,3.884,272,4.785,273,4.623,274,6.01]],["title/classes/CreateCatDto.html",[0,0.044,214,2.643]],["body/classes/CreateCatDto.html",[0,0.067,2,1.688,3,0.236,4,0.236,5,0.211,19,0.339,20,1.367,29,0.565,30,0.018,35,1.028,38,2.975,44,1.137,60,0.395,70,0.236,86,0.013,87,0.013,199,5.449,200,5.449,201,2.414,202,1.678,203,2.971,214,4.003,275,5.761,276,3.803,277,6.33,278,4.417,279,6.93,280,4.417,281,4.417,282,2.481]],["title/interfaces/DatabaseError.html",[195,1.191,283,2.643]],["body/interfaces/DatabaseError.html",[3,0.22,4,0.22,5,0.197,19,0.316,20,1.305,29,0.582,30,0.018,32,1.892,45,0.932,60,0.487,70,0.291,83,1.246,86,0.013,87,0.013,195,1.3,197,2.047,202,1.829,283,4.286,284,3.166,285,3.166,286,6.774,287,6.511,288,6.961,289,5.993,290,5.605,291,3.543,292,2.172,293,4.116,294,3.166,295,4.116,296,3.166,297,3.166,298,3.543,299,2.659,300,3.543,301,3.543,302,1.498,303,4.116]],["title/modules/DatabaseModule.html",[96,1.037,109,2.437]],["body/modules/DatabaseModule.html",[0,0.046,3,0.208,4,0.208,5,0.187,30,0.018,33,1.421,60,0.594,64,0.51,70,0.208,83,0.892,86,0.012,87,0.012,96,1.637,98,1.649,99,1.835,100,2.059,101,2.059,102,1.835,103,2.516,104,3.142,109,4.528,115,2.777,116,2.059,117,2.059,166,4.049,167,3.002,170,2.522,181,2.059,183,2.522,273,3.002,304,3.36,305,3.36,306,3.36,307,4.793,308,3.903,309,5.263,310,3.688,311,5.263,312,3.36,313,3.36,314,4.173,315,3.688,316,3.903,317,4.531,318,2.735,319,3.903,320,3.903,321,3.903,322,2.735,323,3.903,324,2.735,325,3.903,326,3.903,327,2.735]],["title/interfaces/DatabaseOptions.html",[195,1.191,314,2.643]],["body/interfaces/DatabaseOptions.html",[3,0.248,4,0.248,5,0.222,19,0.356,20,1.41,29,0.628,30,0.017,70,0.248,86,0.014,87,0.014,181,3.596,183,4.403,195,1.465,197,2.307,201,2.737,202,1.907,314,4.13,315,4.776,322,4.776,324,4.776,328,3.568,329,3.993]],["title/classes/DateScalar.html",[0,0.044,330,2.643]],["body/classes/DateScalar.html",[0,0.042,2,1.352,3,0.189,4,0.189,5,0.169,7,2.985,15,1.628,19,0.272,20,1.177,24,1.072,29,0.61,30,0.018,31,1.662,32,2.23,33,1.791,35,0.993,43,1.176,44,1.016,45,0.967,46,1.176,52,3.784,60,0.439,70,0.189,83,1.397,86,0.011,87,0.011,142,1.866,201,2.716,202,0.887,330,3.448,331,3.045,332,5.657,333,4.92,334,4.92,335,4.92,336,6.163,337,4.92,338,5.657,339,3.537,340,4.92,341,6.115,342,3.537,343,3.537,344,4.92,345,3.537,346,4.92,347,3.537,348,3.537,349,2.721,350,3.537,351,3.537,352,3.537,353,3.537,354,3.537,355,3.537,356,3.537,357,2.479]],["title/injectables/DrizzleService.html",[257,0.522,307,2.437]],["body/injectables/DrizzleService.html",[0,0.05,3,0.227,4,0.227,5,0.203,19,0.326,20,1.332,21,1.996,29,0.497,30,0.018,35,0.904,43,0.883,44,0.763,45,0.726,60,0.611,64,0.555,70,0.227,86,0.013,87,0.013,170,2.744,203,1.705,257,0.77,258,1.405,291,3.655,307,3.597,310,2.976,312,3.655,313,3.655,315,2.976,317,6.045,318,2.976,358,3.655,359,4.013,360,6.21,361,1.996,362,4.246,363,5.566,364,6.21,365,4.792,366,4.246,367,4.282,368,4.792,369,4.246,370,4.246,371,4.246]],["title/interfaces/EnvironmentVariables.html",[195,1.191,372,2.901]],["body/interfaces/EnvironmentVariables.html",[3,0.231,4,0.231,5,0.207,19,0.333,20,1.351,29,0.643,30,0.017,70,0.231,86,0.013,87,0.013,195,1.37,197,2.157,201,2.985,202,1.915,372,4.342,373,3.734,374,3.734,375,6.646,376,6.646,377,6.646,378,6.646,379,6.646,380,6.646,381,6.646]],["title/modules/EventsModule.html",[96,1.037,110,2.437]],["body/modules/EventsModule.html",[0,0.063,1,3.881,3,0.287,4,0.287,5,0.257,30,0.018,60,0.577,64,0.704,70,0.287,86,0.015,87,0.015,96,1.776,98,2.275,103,2.275,110,4.175,382,5.383,383,5.383]],["title/injectables/ExceptionInterceptor.html",[257,0.522,384,2.901]],["body/injectables/ExceptionInterceptor.html",[0,0.05,3,0.227,4,0.227,5,0.203,15,1.405,19,0.326,24,1.213,29,0.379,30,0.018,33,1.546,35,0.689,43,0.883,44,0.763,45,0.726,46,0.883,60,0.555,64,0.555,70,0.227,83,0.97,86,0.013,87,0.013,257,0.77,258,1.405,384,4.282,385,3.655,386,3.597,387,3.901,388,3.702,389,3.702,390,4.259,391,4.246,392,2.112,393,4.013,394,4.792,395,3.266,396,3.597,397,5.566,398,2.55,399,4.246,400,2.744,401,3.655,402,4.246,403,4.246,404,2.976,405,4.246,406,2.976,407,4.246]],["title/classes/ExceptionsFilter.html",[0,0.044,408,2.901]],["body/classes/ExceptionsFilter.html",[0,0.035,2,1.13,3,0.158,4,0.158,5,0.141,15,0.978,19,0.227,20,1.036,21,2.947,22,4.291,24,0.943,29,0.387,30,0.018,31,1.39,32,1.026,33,1.576,35,0.832,43,0.9,44,0.778,45,0.74,46,0.9,47,1.927,50,3.95,60,0.457,64,0.387,70,0.158,83,0.675,86,0.01,87,0.01,142,1.56,181,2.974,203,2.057,225,2.274,268,1.776,292,2.284,299,3.309,302,2.052,327,2.072,349,2.274,359,3.309,394,3.726,395,3.939,404,4.393,408,3.33,409,2.545,410,3.95,411,4.328,412,2.956,413,3.33,414,4.336,415,2.956,416,4.328,417,2.956,418,4.328,419,2.956,420,2.956,421,4.328,422,2.956,423,2.956,424,2.956,425,2.956,426,3.726,427,4.328,428,2.274,429,2.956,430,2.956,431,2.956,432,2.956,433,2.956,434,2.956,435,2.956,436,3.726,437,2.956,438,3.726,439,4.328,440,2.956,441,2.956,442,2.956,443,2.956,444,2.545]],["title/injectables/HttpCacheInterceptor.html",[257,0.522,445,2.901]],["body/injectables/HttpCacheInterceptor.html",[0,0.048,3,0.219,4,0.219,5,0.196,19,0.315,24,1.186,29,0.366,30,0.018,35,0.666,43,0.853,44,0.737,45,0.701,46,0.853,60,0.486,64,0.536,70,0.219,83,1.243,86,0.013,87,0.013,121,2.875,122,2.875,164,4.697,202,1.364,224,5.256,257,0.753,258,1.358,302,2.367,327,3.813,388,3.652,392,2.04,445,4.185,446,4.684,447,3.531,448,5.441,449,5.441,450,4.102,451,3.155,452,3.531,453,4.102,454,4.102,455,6.105,456,4.102,457,4.102,458,4.102,459,4.102,460,4.102,461,4.102]],["title/injectables/HttpConfigService.html",[257,0.522,462,2.901]],["body/injectables/HttpConfigService.html",[0,0.052,3,0.236,4,0.236,5,0.211,15,1.462,19,0.339,24,1.245,29,0.395,30,0.018,35,0.927,43,0.918,44,0.794,45,0.755,46,0.918,60,0.565,64,0.578,70,0.236,83,1.009,86,0.013,87,0.013,151,3.328,203,1.774,244,2.653,257,0.79,258,1.462,361,2.076,462,4.393,463,3.803,464,6.692,465,4.417,466,4.417,467,4.393,468,4.417,469,6.33,470,5.711,471,3.803,472,3.803,473,3.803,474,4.417,475,4.417,476,4.417,477,4.417,478,3.803]],["title/classes/HttpExceptionFilter.html",[0,0.044,479,2.901]],["body/classes/HttpExceptionFilter.html",[0,0.05,2,1.111,3,0.155,4,0.155,5,0.139,15,1.415,19,0.223,20,1.023,21,2.384,24,0.932,29,0.575,30,0.018,31,1.366,35,0.908,43,1.054,44,0.911,45,0.867,46,0.889,47,2.49,60,0.557,64,0.559,70,0.155,83,0.977,86,0.01,87,0.01,181,2.675,268,1.746,282,1.632,292,1.533,302,2.455,359,2.762,361,1.366,404,2.037,406,2.996,410,3.553,413,3.288,414,4.301,444,2.502,479,3.288,480,5.129,481,2.502,482,4.365,483,5.188,484,4.275,485,2.236,486,2.906,487,2.906,488,5.591,489,2.906,490,4.275,491,6.23,492,2.906,493,5.07,494,2.401,495,2.037,496,2.906,497,2.906,498,2.906,499,2.502,500,2.502,501,2.502,502,2.502,503,2.502,504,2.906,505,2.906,506,2.906,507,2.906,508,2.906,509,4.275,510,4.275,511,2.906,512,2.906,513,2.236,514,4.275,515,2.906,516,4.275,517,3.68,518,2.906,519,4.275,520,2.906,521,2.906,522,2.906,523,2.906,524,2.906,525,2.906,526,2.906]],["title/interfaces/IAwsConfig.html",[195,1.191,527,2.643]],["body/interfaces/IAwsConfig.html",[3,0.255,4,0.255,5,0.229,19,0.368,20,1.438,29,0.616,30,0.017,70,0.255,86,0.014,87,0.014,195,1.511,197,2.38,202,1.915,527,4.212,528,4.119,529,5.934,530,5.934,531,5.934,532,5.934,533,3.681,534,4.119]],["title/interfaces/ISwaggerConfigInterface.html",[195,1.191,535,2.437]],["body/interfaces/ISwaggerConfigInterface.html",[3,0.237,4,0.237,5,0.213,7,3.541,19,0.342,20,1.373,29,0.62,30,0.018,45,1.147,70,0.237,86,0.013,87,0.013,124,5.162,195,1.405,197,2.213,202,1.896,533,3.423,534,3.831,535,3.708,536,3.831,537,5.777,538,4.336,539,5.162,540,4.886,541,5.468]],["title/injectables/JwtUtilService.html",[257,0.522,542,2.901]],["body/injectables/JwtUtilService.html",[0,0.049,3,0.223,4,0.223,5,0.2,19,0.322,24,1.202,29,0.493,30,0.018,33,1.524,35,0.896,43,1.147,44,0.991,45,0.943,46,0.87,60,0.493,64,0.548,70,0.223,83,1.26,86,0.013,87,0.013,134,3.221,202,1.546,203,1.682,244,2.515,257,0.763,258,1.386,292,2.209,302,1.524,357,2.934,361,1.968,410,2.934,542,4.243,543,3.605,544,5.516,545,4.187,546,6.995,547,4.187,548,5.516,549,4.187,550,4.187,551,4.187,552,6.555,553,4.187,554,4.187,555,3.221,556,2.706,557,4.187,558,4.187]],["title/injectables/LoggerMiddleware.html",[257,0.522,559,2.901]],["body/injectables/LoggerMiddleware.html",[0,0.056,3,0.252,4,0.252,5,0.226,15,1.565,19,0.363,24,1.3,29,0.422,30,0.018,35,0.768,43,0.983,44,0.85,45,0.808,46,0.983,47,2.91,60,0.422,64,0.618,70,0.252,86,0.014,87,0.014,257,0.825,258,1.565,297,3.638,389,3.855,426,4.071,533,4.589,559,4.589,560,4.071,561,5.965,562,6.535,563,4.729,564,5.965,565,4.729]],["title/injectables/LoggerService.html",[257,0.522,566,2.901]],["body/injectables/LoggerService.html",[0,0.028,3,0.239,4,0.126,5,0.113,19,0.181,20,0.874,21,2.101,24,0.796,29,0.581,30,0.018,35,1.007,43,1.248,44,1.078,45,1.026,46,1.196,47,2.948,60,0.486,64,0.309,67,1.174,70,0.126,86,0.008,87,0.008,151,2.502,161,2.032,202,1.824,203,2.021,225,1.816,244,1.418,257,0.505,258,0.781,292,3.036,302,1.627,327,2.56,361,1.11,392,2.502,406,4.461,451,2.81,472,2.032,494,2.052,495,1.654,566,2.81,567,2.032,568,4.469,569,4.469,570,3.848,571,4.469,572,3.145,573,3.145,574,2.36,575,3.653,576,3.653,577,3.653,578,2.36,579,3.653,580,5.598,581,2.36,582,3.653,583,2.36,584,4.469,585,3.145,586,2.36,587,3.653,588,2.36,589,3.653,590,2.36,591,3.653,592,2.36,593,3.653,594,3.145,595,3.653,596,2.36,597,2.36,598,2.36,599,2.36,600,2.032,601,2.36,602,2.36,603,2.36,604,2.36,605,2.36,606,2.36,607,2.032,608,3.653,609,2.36,610,2.36,611,2.36,612,2.36,613,2.36,614,2.36,615,2.36,616,2.36,617,2.36,618,2.36,619,2.36,620,3.653,621,2.36,622,2.36,623,2.36,624,2.36,625,2.36,626,2.36,627,2.36]],["title/injectables/LoggingInterceptor.html",[257,0.522,269,2.643]],["body/injectables/LoggingInterceptor.html",[0,0.052,3,0.234,4,0.234,5,0.21,15,1.451,19,0.337,24,1.239,29,0.392,30,0.018,35,0.712,43,0.912,44,0.788,45,0.749,46,0.912,60,0.563,64,0.573,70,0.234,83,1.002,86,0.013,87,0.013,257,0.786,258,1.451,269,3.984,302,1.596,386,3.673,387,3.984,388,3.748,389,3.748,390,4.312,392,2.181,393,4.076,396,3.673,398,2.634,400,2.833,401,3.775,628,3.775,629,4.385,630,4.385,631,4.385,632,4.385,633,5.684,634,4.385,635,4.385,636,4.385]],["title/classes/NewRecipeInput.html",[0,0.044,637,2.437]],["body/classes/NewRecipeInput.html",[0,0.065,2,1.606,3,0.224,4,0.224,5,0.201,7,3.26,19,0.323,20,1.323,29,0.552,30,0.018,35,1.003,38,2.904,45,0.945,60,0.494,67,2.09,70,0.224,86,0.013,87,0.013,142,2.217,202,1.789,282,2.36,538,3.992,637,3.572,638,5.651,639,3.617,640,5.319,641,3.617,642,4.202,643,5.528,644,4.202,645,4.253,646,4.202,647,4.202,648,4.202,649,4.753,650,5.528,651,4.759,652,4.202,653,4.202,654,4.202,655,3.617,656,4.202]],["title/classes/PaginationParamsDto.html",[0,0.044,657,2.901]],["body/classes/PaginationParamsDto.html",[0,0.07,2,1.496,3,0.209,4,0.209,5,0.187,19,0.301,20,1.262,29,0.627,30,0.018,31,2.804,32,2.07,35,0.969,38,2.804,60,0.471,70,0.209,86,0.012,87,0.012,191,5.135,201,3.053,282,2.199,357,4.473,651,5.494,657,4.057,658,5.494,659,3.371,660,5.965,661,5.965,662,4.473,663,5.274,664,3.915,665,3.915,666,3.915,667,3.915,668,6.382,669,3.012,670,3.012,671,4.541,672,3.371]],["title/injectables/ParseIntPipe.html",[234,2.643,257,0.522]],["body/injectables/ParseIntPipe.html",[0,0.052,3,0.235,4,0.235,5,0.21,15,1.457,19,0.338,24,1.242,29,0.393,30,0.018,32,1.527,33,1.602,35,0.715,43,0.915,44,0.791,45,0.752,46,0.915,60,0.509,64,0.745,70,0.235,83,1.005,86,0.013,87,0.013,192,3.084,202,1.584,209,3.795,234,3.993,257,0.788,258,1.457,299,2.844,302,1.602,556,2.844,673,4.905,674,3.789,675,4.905,676,4.905,677,4.861,678,5.753,679,4.401,680,3.789,681,4.905,682,5.698,683,4.401,684,4.401,685,3.789,686,3.385]],["title/classes/QueryFailedFilter.html",[0,0.044,687,2.901]],["body/classes/QueryFailedFilter.html",[0,0.041,2,1.332,3,0.186,4,0.186,5,0.167,15,1.612,19,0.268,20,1.166,24,1.061,29,0.607,30,0.018,35,0.911,43,1.012,44,0.875,45,0.832,46,0.725,47,1.552,60,0.592,64,0.637,70,0.186,86,0.011,87,0.011,164,2.681,181,2.962,202,0.874,268,2.094,292,1.839,302,2.043,359,3.147,361,1.638,395,2.681,404,3.413,406,2.443,410,4.259,413,2.681,414,4.675,436,4.192,438,3.001,482,4.832,483,5.421,485,2.681,494,2.735,495,2.443,499,3.001,500,3.001,501,3.001,502,3.001,503,3.001,517,4.192,585,4.192,687,3.746,688,5.231,689,3.001,690,3.486,691,3.486,692,3.486,693,3.486,694,3.486,695,2.681,696,3.001,697,3.486,698,3.486,699,3.486,700,3.486,701,3.486,702,3.486]],["title/classes/Recipe.html",[0,0.044,703,2.437]],["body/classes/Recipe.html",[0,0.047,2,1.511,3,0.211,4,0.211,5,0.189,7,3.381,19,0.304,20,1.271,29,0.597,30,0.018,35,1.085,38,3.142,45,0.907,60,0.353,67,2.64,70,0.211,86,0.012,87,0.012,142,2.086,202,1.815,223,4.134,336,4.571,538,3.873,640,5.16,641,3.404,645,4.929,649,5.294,655,3.404,703,3.873,704,3.404,705,5.994,706,3.954,707,3.954,708,3.954,709,3.954,710,3.954,711,5.309]],["title/classes/RecipesArgs.html",[0,0.044,712,2.437]],["body/classes/RecipesArgs.html",[0,0.067,2,1.67,3,0.233,4,0.233,5,0.209,19,0.336,20,1.357,29,0.507,30,0.018,31,2.666,32,1.968,35,0.921,38,2.666,60,0.507,70,0.233,86,0.013,87,0.013,142,2.305,201,2.397,282,2.454,645,5.126,649,3.361,662,3.974,669,3.361,671,3.761,672,3.761,712,3.664,713,3.761,714,6.297,715,6.297,716,4.369,717,4.369,718,5.671,719,4.369,720,4.369,721,5.671,722,6.297,723,3.761,724,4.369]],["title/modules/RecipesModule.html",[96,1.037,111,2.437]],["body/modules/RecipesModule.html",[0,0.055,3,0.248,4,0.248,5,0.223,30,0.018,60,0.61,64,0.609,70,0.248,86,0.014,87,0.014,96,1.784,98,1.967,99,2.189,100,2.456,101,2.456,102,2.189,103,2.742,104,2.456,111,4.65,115,3.117,116,2.456,117,2.456,330,4.14,725,4.008,726,4.008,727,4.323,728,4.656,729,4.656,730,4.14,731,4.656,732,4.008]],["title/classes/RecipesResolver.html",[0,0.044,730,2.643]],["body/classes/RecipesResolver.html",[0,0.03,2,0.964,3,0.135,4,0.135,5,0.121,19,0.194,24,0.838,29,0.528,30,0.018,33,0.919,35,0.96,38,2.637,43,1.229,44,1.062,45,1.01,46,1.166,50,1.768,56,1.941,60,0.549,64,0.33,70,0.135,83,1.281,86,0.009,87,0.009,142,1.331,177,2.172,202,1.482,203,1.013,209,3.899,219,3.55,223,3.13,244,1.516,299,1.63,302,1.4,361,1.186,392,1.255,556,1.63,637,3.367,703,4.622,712,3.819,727,3.55,730,2.695,732,2.172,733,2.172,734,4.659,735,5.211,736,3.845,737,3.845,738,2.523,739,2.523,740,2.523,741,6.826,742,5.211,743,2.523,744,3.845,745,2.523,746,5.211,747,2.523,748,2.523,749,3.845,750,2.523,751,2.523,752,2.523,753,2.523,754,2.958,755,2.523,756,2.523,757,2.523,758,2.523,759,2.172,760,2.172,761,2.172,762,2.172,763,2.172,764,2.172,765,2.523,766,2.523,767,2.695,768,2.523,769,2.523,770,2.523,771,2.523,772,2.523,773,2.523,774,2.523,775,3.845,776,2.523,777,2.523,778,2.523,779,2.523,780,2.523,781,2.523,782,2.523]],["title/injectables/RecipesService.html",[257,0.522,727,2.266]],["body/injectables/RecipesService.html",[0,0.039,3,0.177,4,0.177,5,0.158,19,0.254,24,1.024,29,0.531,30,0.018,35,0.965,43,1.235,44,1.068,45,1.015,46,1.235,60,0.531,64,0.433,67,1.648,70,0.177,81,3.036,83,1.357,86,0.011,87,0.011,202,1.634,209,4.333,210,3.615,211,3.615,219,4.113,223,2.823,251,4.045,257,0.65,258,1.097,637,3.84,703,3.036,712,4.054,727,2.823,761,2.852,762,2.852,763,2.852,764,2.852,783,2.852,784,4.699,785,4.699,786,4.699,787,3.313,788,4.699,789,4.699,790,4.699,791,4.699,792,4.699,793,4.699,794,4.699,795,4.699,796,4.699,797,3.313,798,4.699,799,3.313,800,4.699,801,3.313]],["title/modules/RedisModule.html",[96,1.037,112,2.437]],["body/modules/RedisModule.html",[0,0.055,3,0.248,4,0.248,5,0.223,30,0.018,60,0.58,64,0.609,70,0.248,86,0.014,87,0.014,96,1.784,98,1.967,99,2.189,100,2.456,101,2.456,102,2.189,103,2.742,104,3.117,112,4.65,115,3.117,116,2.456,117,2.456,119,3.263,194,3.263,802,4.008,803,4.008,804,4.65,805,4.656,806,4.656,807,4.544,808,4.656]],["title/injectables/RedisRepository.html",[257,0.522,804,2.437]],["body/injectables/RedisRepository.html",[0,0.034,3,0.155,4,0.155,5,0.139,15,0.964,19,0.224,21,1.369,24,0.933,29,0.533,30,0.018,32,2.295,35,1.013,43,1.24,44,1.072,45,1.019,46,1.24,47,1.907,60,0.454,64,0.381,70,0.155,83,0.666,86,0.01,87,0.01,170,1.882,201,2.146,202,1.912,203,1.17,207,3.923,209,4.228,219,3.972,257,0.592,258,0.964,361,1.369,513,3.294,767,3.558,804,2.767,809,2.508,810,6.236,811,3.687,812,3.687,813,2.913,814,4.306,815,2.913,816,3.687,817,3.687,818,5.414,819,2.913,820,3.687,821,2.913,822,2.913,823,3.687,824,2.913,825,3.687,826,4.819,827,2.913,828,3.001,829,2.913,830,2.913,831,2.913,832,2.913,833,2.913,834,4.282,835,2.913,836,2.913]],["title/interfaces/RedisRepositoryInterface.html",[195,1.191,828,2.643]],["body/interfaces/RedisRepositoryInterface.html",[3,0.195,4,0.195,5,0.175,19,0.281,24,1.097,29,0.554,30,0.017,32,2.333,35,1.007,43,1.289,44,1.114,45,1.06,46,1.289,70,0.195,86,0.012,87,0.012,195,1.154,197,1.817,201,2.432,202,1.947,207,4.346,219,4.215,513,3.871,811,4.332,812,4.332,817,4.332,818,5.645,820,4.332,823,4.332,825,4.332,826,4.955,828,3.527,837,3.146,838,3.654,839,3.654,840,3.654,841,3.654]],["title/injectables/ResolvePromisesInterceptor.html",[257,0.522,842,2.901]],["body/injectables/ResolvePromisesInterceptor.html",[0,0.053,3,0.238,4,0.238,5,0.214,15,1.478,19,0.343,24,1.254,29,0.399,30,0.018,35,0.725,43,0.928,44,0.802,45,0.763,46,0.928,60,0.6,64,0.584,70,0.238,83,1.02,86,0.013,87,0.013,257,0.796,258,1.478,386,3.717,387,4.031,388,3.775,389,3.574,390,4.342,392,2.221,393,4.112,396,3.717,398,2.683,400,2.886,759,3.845,842,4.425,843,3.845,844,4.466,845,3.436,846,3.436,847,4.466,848,4.466,849,4.466]],["title/interfaces/Response.html",[195,1.191,494,2.119]],["body/interfaces/Response.html",[0,0.054,3,0.244,4,0.244,5,0.218,15,1.512,19,0.351,20,1.397,29,0.408,30,0.018,60,0.574,64,0.597,70,0.311,81,4.525,83,1.043,86,0.014,87,0.014,195,1.443,197,2.272,257,0.807,271,2.951,386,2.951,388,3.278,389,2.566,390,3.771,392,2.272,393,3.771,396,3.771,398,2.744,400,2.951,494,3.278,845,3.514,850,3.514,851,5.536,852,3.932]],["title/guards/RolesGuard.html",[232,2.643,853,2.901]],["body/guards/RolesGuard.html",[0,0.047,3,0.212,4,0.212,5,0.19,15,1.313,19,0.305,24,1.16,29,0.475,30,0.018,35,0.864,43,1.106,44,0.956,45,0.909,46,0.825,60,0.475,64,0.519,67,1.973,70,0.212,83,1.216,86,0.012,87,0.012,203,1.593,230,3.729,232,3.729,244,2.383,257,0.736,268,2.383,302,2.336,322,3.729,361,1.865,388,3.604,392,1.973,451,3.052,452,3.415,483,5.299,485,3.052,754,4.093,854,3.967,855,3.415,856,6.416,857,3.967,858,5.321,859,3.967,860,3.967,861,3.967,862,3.967,863,3.967,864,5.321,865,3.967,866,3.967,867,3.967,868,3.415,869,3.967]],["title/classes/SettingService.html",[0,0.044,151,1.876]],["body/classes/SettingService.html",[0,0.014,2,0.453,3,0.063,4,0.063,5,0.099,7,0.626,13,2.116,19,0.091,22,0.766,24,0.451,29,0.185,30,0.018,33,1.001,35,0.992,43,0.43,44,0.592,45,0.354,46,0.43,60,0.439,64,0.155,67,2.707,69,1.777,70,0.063,83,1.375,86,0.005,87,0.005,88,0.912,124,2.534,151,1.029,174,1.021,181,1.738,182,1.781,183,2.128,184,0.912,189,1.021,192,0.831,201,0.874,202,1.231,207,3.28,223,0.713,292,1.091,301,4.399,302,1.199,315,0.831,318,0.831,322,2.308,324,1.928,357,1.45,359,2.652,361,1.293,389,0.666,527,1.45,529,1.021,530,1.021,531,1.021,532,1.021,535,1.337,537,1.021,538,0.766,539,2.874,540,1.591,541,1.781,570,2.368,572,3.533,573,1.021,594,2.368,600,2.368,607,2.836,669,0.912,723,1.781,814,2.116,818,1.591,868,1.021,870,1.021,871,2.069,872,2.069,873,2.751,874,2.751,875,2.751,876,2.751,877,2.751,878,2.751,879,2.751,880,2.751,881,2.751,882,2.751,883,2.751,884,2.751,885,1.186,886,2.069,887,1.186,888,2.069,889,1.186,890,1.186,891,1.186,892,1.186,893,1.186,894,1.186,895,1.186,896,1.186,897,1.186,898,1.186,899,1.186,900,1.186,901,1.186,902,1.186,903,1.186,904,1.186,905,1.186,906,1.186,907,1.186,908,1.186,909,1.186,910,1.186,911,1.186,912,1.186,913,1.186,914,1.186,915,1.186,916,1.186,917,1.186,918,1.186,919,1.186,920,1.781,921,2.751,922,1.186,923,1.186,924,2.069,925,2.069,926,1.186,927,1.186,928,1.186,929,1.186,930,2.069,931,1.186,932,2.751,933,1.021,934,1.186,935,1.186,936,1.186,937,1.186,938,1.186,939,1.186,940,1.186,941,2.069,942,2.751,943,1.186,944,1.186,945,1.186,946,2.069,947,2.069,948,1.186,949,1.186,950,1.186,951,1.186,952,4.414,953,2.069,954,1.186,955,1.186,956,1.186,957,1.186,958,1.186,959,1.186,960,1.186,961,1.186,962,1.186,963,1.186,964,2.751,965,1.186,966,1.186,967,1.186,968,2.069,969,1.186,970,1.186,971,1.186,972,1.186,973,1.186,974,1.186,975,1.186,976,1.186,977,1.186,978,1.186,979,1.186,980,1.186,981,0.912,982,1.186,983,1.186,984,1.186,985,1.186,986,1.186,987,2.069,988,1.186,989,1.186,990,1.186,991,1.186,992,1.186,993,1.186,994,1.186,995,1.186,996,1.186,997,2.069,998,2.069,999,1.186,1000,2.069,1001,2.069,1002,2.751,1003,2.751,1004,2.751,1005,2.069,1006,2.069,1007,2.069,1008,2.069,1009,2.069,1010,3.294,1011,2.751,1012,2.751,1013,2.069,1014,1.186,1015,2.069,1016,1.186,1017,1.186,1018,1.186,1019,1.186,1020,1.186,1021,1.186,1022,1.186,1023,1.186,1024,1.186,1025,1.186,1026,1.186,1027,1.186,1028,1.186,1029,1.186,1030,2.069,1031,1.186,1032,1.186,1033,1.186,1034,1.186,1035,1.186,1036,2.069,1037,1.186,1038,1.186,1039,1.186,1040,1.186,1041,4.414,1042,1.186,1043,1.186,1044,1.186,1045,1.186,1046,1.186,1047,1.186,1048,1.186,1049,1.186,1050,1.186,1051,1.186,1052,1.186,1053,1.186,1054,1.186,1055,1.186,1056,1.186,1057,1.186,1058,1.186,1059,1.186,1060,1.186,1061,1.186,1062,1.186,1063,1.186,1064,1.186,1065,1.186,1066,1.186,1067,1.186,1068,1.021,1069,1.186,1070,2.069,1071,1.186,1072,1.186,1073,1.186,1074,1.186,1075,1.186,1076,1.186,1077,1.186,1078,1.186,1079,1.186,1080,1.186,1081,1.186,1082,1.186,1083,1.186,1084,1.186,1085,1.186,1086,1.186,1087,1.186,1088,2.069,1089,1.186,1090,1.186,1091,1.186,1092,1.186,1093,1.186,1094,0.912,1095,1.186,1096,1.186,1097,1.186,1098,2.069,1099,2.069,1100,1.186,1101,1.186,1102,1.186,1103,1.186,1104,1.186,1105,1.186,1106,1.186,1107,1.186,1108,1.186,1109,1.186,1110,1.186,1111,1.186,1112,1.186,1113,1.186,1114,1.186,1115,2.069,1116,1.186,1117,1.021,1118,1.186,1119,1.186,1120,1.186,1121,3.294,1122,3.294,1123,1.186,1124,2.069,1125,2.069,1126,2.069,1127,2.069,1128,1.186,1129,1.186,1130,1.186,1131,1.186,1132,1.186,1133,1.186,1134,1.186,1135,1.186,1136,1.186,1137,1.186,1138,1.186,1139,2.069,1140,1.186,1141,1.186,1142,1.186,1143,1.186,1144,1.186,1145,1.186]],["title/modules/SharedModule.html",[96,1.037,113,2.437]],["body/modules/SharedModule.html",[0,0.054,3,0.246,4,0.246,5,0.22,30,0.018,60,0.577,64,0.602,70,0.246,86,0.014,87,0.014,96,1.774,98,1.945,99,2.163,100,2.428,101,2.428,102,2.163,103,2.872,104,3.405,113,4.535,115,3.094,116,2.428,117,2.428,119,3.225,151,3.626,152,3.962,166,4.511,302,1.675,471,3.962,1146,3.962,1147,3.962,1148,3.54,1149,6.454]],["title/modules/TasksModule.html",[96,1.037,114,2.437]],["body/modules/TasksModule.html",[0,0.058,3,0.261,4,0.261,5,0.233,30,0.017,60,0.544,64,0.638,70,0.261,86,0.014,87,0.014,96,1.823,98,2.063,99,2.295,100,2.576,101,2.576,102,2.295,103,2.802,104,2.576,114,4.706,115,3.211,116,2.576,117,2.576,1150,4.203,1151,4.203,1152,4.706,1153,4.882,1154,4.882]],["title/injectables/TasksService.html",[257,0.522,1152,2.437]],["body/injectables/TasksService.html",[0,0.045,3,0.205,4,0.205,5,0.184,19,0.295,20,1.246,21,2.776,22,4.091,24,1.135,30,0.018,31,1.805,32,1.333,33,1.895,35,1.028,38,2.776,46,1.228,47,2.63,60,0.465,64,0.502,70,0.205,86,0.012,87,0.012,192,2.692,203,2.372,257,0.72,258,1.271,473,3.306,478,3.306,1152,3.364,1155,3.306,1156,6.332,1157,6.332,1158,6.332,1159,5.206,1160,3.841,1161,5.206,1162,3.841,1163,5.206,1164,3.841,1165,5.206,1166,3.841,1167,3.841,1168,3.841,1169,3.306,1170,5.906,1171,3.841,1172,3.841,1173,5.206,1174,3.841]],["title/injectables/TransformInterceptor.html",[257,0.522,271,2.437]],["body/injectables/TransformInterceptor.html",[0,0.051,3,0.232,4,0.232,5,0.208,15,1.441,19,0.334,24,1.233,29,0.389,30,0.018,35,0.707,43,0.905,44,0.782,45,0.744,46,0.905,60,0.562,64,0.569,70,0.302,81,3.656,83,0.994,86,0.013,87,0.013,195,1.375,257,0.783,258,1.441,271,3.656,386,4.062,387,3.051,388,3.738,389,3.531,390,4.3,392,2.814,393,4.062,396,3.656,398,2.615,400,2.813,494,2.445,845,3.349,850,3.349,851,3.748,852,3.748,1175,4.353]],["title/injectables/ValidationPipe.html",[257,0.522,1176,2.901]],["body/injectables/ValidationPipe.html",[0,0.067,3,0.192,4,0.192,5,0.172,15,1.188,19,0.276,21,2.68,24,1.083,29,0.612,30,0.018,32,2.135,33,1.307,35,0.807,43,1.033,44,0.893,45,0.849,46,1.033,60,0.509,64,0.469,70,0.192,83,1.302,86,0.012,87,0.012,201,1.517,202,0.9,209,3.425,257,0.688,258,1.188,282,2.016,299,2.319,302,2.24,555,3.823,556,2.319,662,2.515,670,2.761,675,4.279,676,4.279,677,4.734,678,5.298,680,3.09,681,4.279,685,3.09,686,2.761,696,3.09,754,4.386,767,2.515,1176,3.823,1177,3.09,1178,4.97,1179,4.97,1180,3.589,1181,6.154,1182,3.589,1183,3.589,1184,3.589,1185,3.589,1186,3.589,1187,3.589,1188,3.589,1189,3.589,1190,3.589,1191,3.589]],["title/coverage.html",[1192,4.427]],["body/coverage.html",[0,0.076,1,1.822,5,0.089,6,1.607,29,0.394,30,0.018,33,0.68,86,0.007,87,0.007,89,1.607,96,0.513,102,0.878,103,0.789,151,0.929,195,1.802,196,1.207,198,1.607,204,1.309,205,1.309,206,1.607,214,1.309,230,1.309,232,1.309,234,1.309,237,1.122,257,0.925,259,1.607,269,1.309,271,1.207,275,1.607,276,1.607,283,1.309,284,2.333,285,2.333,289,1.607,294,1.436,297,4.389,307,1.207,310,1.309,314,1.309,328,4.537,329,1.607,330,1.309,331,1.607,358,1.607,367,1.436,372,1.436,373,1.607,374,1.607,384,1.436,385,1.607,408,1.436,409,1.607,445,1.436,446,1.607,447,1.607,462,1.436,463,1.607,467,1.436,479,1.436,480,1.607,481,1.607,494,1.049,527,1.309,528,1.607,535,1.207,536,1.607,542,1.436,543,1.607,559,1.436,560,1.607,566,1.436,567,1.607,628,1.607,637,1.207,638,1.607,639,1.607,657,1.436,658,1.607,659,1.607,662,5.386,673,1.607,674,1.607,687,1.436,688,1.607,689,1.607,695,1.436,703,1.207,704,1.607,712,1.207,713,1.607,727,1.122,730,1.309,733,1.607,783,1.607,804,1.207,807,1.436,809,1.607,828,1.309,837,1.607,842,1.436,843,1.607,846,1.436,850,2.333,853,1.436,855,1.607,870,1.607,981,1.436,1094,1.436,1117,1.607,1148,1.436,1152,1.207,1155,1.607,1176,1.436,1177,1.607,1192,1.607,1193,1.867,1194,1.867,1195,3.033,1196,3.033,1197,2.611,1198,3.831,1199,7.247,1200,5.898,1201,1.607,1202,6.818,1203,1.607,1204,1.607,1205,1.607,1206,5.197,1207,1.607,1208,1.607,1209,5.197,1210,5.706,1211,1.607,1212,1.607,1213,1.607,1214,1.607,1215,1.607,1216,1.867,1217,1.607,1218,1.607,1219,3.831,1220,4.912,1221,1.607,1222,1.607,1223,1.607,1224,1.607,1225,1.607,1226,1.607,1227,1.607,1228,2.611,1229,2.611,1230,1.607,1231,1.436,1232,1.607,1233,1.607,1234,1.607,1235,3.033,1236,2.333,1237,1.867,1238,1.867,1239,1.867,1240,2.333,1241,1.607,1242,1.607,1243,1.607,1244,2.611,1245,1.607,1246,1.607,1247,1.867]],["title/dependencies.html",[99,2.132,1248,2.714]],["body/dependencies.html",[0,0.059,30,0.018,64,0.474,65,2.786,86,0.012,87,0.012,99,1.702,126,2.786,134,2.786,140,3.118,142,1.911,145,3.118,268,2.175,282,2.034,318,2.538,349,2.786,365,3.118,398,2.175,495,2.538,540,2.786,580,3.118,670,2.786,677,2.786,760,3.118,920,3.118,1169,3.118,1249,3.622,1250,3.622,1251,3.622,1252,3.622,1253,3.622,1254,5.001,1255,3.622,1256,3.622,1257,3.622,1258,5.729,1259,3.622,1260,6.178,1261,3.622,1262,3.622,1263,3.622,1264,5.729,1265,5.581,1266,3.622,1267,3.622,1268,3.622,1269,5.729,1270,3.622,1271,5.001,1272,3.622,1273,3.622,1274,3.622,1275,5.001,1276,5.001,1277,3.622,1278,3.622,1279,3.622,1280,3.622,1281,3.622,1282,3.622,1283,3.622,1284,3.622,1285,3.622,1286,3.622,1287,3.622,1288,3.622,1289,3.622,1290,3.622,1291,3.622,1292,3.622,1293,3.622,1294,3.622,1295,3.622,1296,3.622,1297,3.622,1298,3.622,1299,3.622,1300,3.622,1301,3.622,1302,3.622]],["title/miscellaneous/enumerations.html",[1303,1.663,1304,3.904]],["body/miscellaneous/enumerations.html",[19,0.408,30,0.017,32,2.48,86,0.015,87,0.015,290,5.518,292,3.382,1231,4.086,1303,2.802,1304,4.573,1305,4.573,1306,6.409,1307,5.311,1308,5.311,1309,5.311,1310,5.311,1311,5.311,1312,5.311,1313,5.311,1314,5.311]],["title/miscellaneous/functions.html",[1303,1.663,1315,3.904]],["body/miscellaneous/functions.html",[19,0.308,29,0.478,30,0.017,32,1.859,43,1.396,44,1.206,45,1.147,46,1.254,69,2.589,86,0.012,87,0.012,102,2.837,202,1.343,219,2.407,283,2.808,284,3.082,285,4.12,294,4.12,296,3.082,298,3.449,300,3.449,368,3.449,535,3.461,846,4.12,1203,3.449,1204,4.611,1205,4.611,1211,3.449,1212,4.611,1213,5.195,1214,3.449,1215,4.611,1217,3.449,1218,4.611,1230,4.611,1236,3.082,1240,3.082,1241,5.195,1242,3.449,1243,4.611,1303,2.114,1315,3.449,1316,3.449,1317,3.449,1318,4.006,1319,4.006,1320,4.006,1321,4.006,1322,4.006,1323,4.006,1324,4.006,1325,4.006,1326,4.006,1327,5.356,1328,5.356,1329,4.006,1330,5.356,1331,5.356]],["title/index.html",[19,0.242,1332,3.152,1333,3.152]],["body/index.html",[30,0.015,69,3.59,86,0.015,87,0.015,767,3.894,1265,4.783,1334,5.556,1335,5.556,1336,5.556,1337,4.783,1338,5.556,1339,5.556,1340,5.556,1341,5.556,1342,5.556,1343,5.556,1344,5.556,1345,5.556,1346,5.556,1347,5.556]],["title/modules.html",[98,2.173]],["body/modules.html",[30,0.014,86,0.014,87,0.014,97,3.463,98,2.088,107,3.193,108,3.193,109,3.193,110,3.193,111,3.193,112,3.193,113,3.193,114,3.193,933,6.376,1348,7.407,1349,7.407,1350,7.546,1351,6.132,1352,6.132]],["title/overview.html",[1353,4.427]],["body/overview.html",[2,1.392,30,0.017,86,0.012,87,0.012,88,3.863,96,1.002,97,5.303,98,1.54,99,1.713,100,1.922,101,1.922,102,1.713,103,1.54,104,1.922,105,3.137,106,3.137,107,4.198,108,3.713,109,4.34,110,3.713,111,4.198,112,4.198,113,4.002,114,4.198,115,2.65,116,1.922,117,1.922,151,3.08,197,1.812,204,2.553,237,3.452,252,3.137,253,3.137,258,1.206,304,3.137,305,3.137,306,3.137,307,4.447,725,3.137,726,3.137,727,3.452,802,3.137,803,3.137,804,3.713,853,2.803,1146,3.137,1147,3.137,1150,3.137,1151,3.137,1152,3.713,1353,3.137,1354,3.643,1355,3.643,1356,3.643,1357,3.643]],["title/properties.html",[20,1.085,1248,2.714]],["body/properties.html",[7,2.987,20,1.355,30,0.017,86,0.015,87,0.015,539,4.354,1068,4.873,1337,4.873,1358,5.66,1359,5.66,1360,5.66,1361,5.66,1362,5.66]],["title/miscellaneous/typealiases.html",[1303,1.663,1363,4.535]],["body/miscellaneous/typealiases.html",[19,0.425,29,0.494,30,0.015,86,0.015,87,0.015,981,5.051,1094,5.051,1197,4.761,1231,4.254,1232,5.653,1233,5.653,1303,2.918,1305,4.761,1364,5.531,1365,6.566,1366,5.531]],["title/miscellaneous/variables.html",[428,3.488,1303,1.663]],["body/miscellaneous/variables.html",[19,0.161,29,0.489,30,0.018,31,3.252,32,2.401,33,2.335,44,0.744,83,0.479,86,0.008,87,0.008,96,0.916,103,1.408,126,1.614,151,1.656,167,1.614,170,1.356,180,1.806,181,1.107,183,1.356,184,1.614,202,0.835,223,2.488,230,3.306,273,1.614,296,1.614,302,0.764,310,2.903,324,1.47,328,1.614,367,2.562,428,1.614,467,2.562,538,1.356,555,1.614,556,1.356,686,1.614,695,2.562,807,2.562,814,1.614,816,1.806,1148,1.614,1201,1.806,1207,1.806,1208,2.867,1220,5.282,1221,3.566,1222,3.566,1223,3.566,1224,4.715,1225,3.566,1226,3.566,1227,3.566,1228,1.806,1229,3.566,1234,1.806,1236,1.614,1240,1.614,1244,1.806,1245,2.867,1246,2.867,1303,1.107,1316,1.806,1317,1.806,1367,5.956,1368,3.331,1369,2.098,1370,3.331,1371,2.098,1372,2.098,1373,2.098,1374,2.098,1375,4.142,1376,3.331,1377,2.098,1378,2.098,1379,2.098,1380,2.098,1381,5.74,1382,3.331,1383,4.142,1384,2.098,1385,4.142,1386,3.331,1387,2.098,1388,2.098,1389,4.717,1390,2.098,1391,3.331,1392,2.098,1393,2.098,1394,2.098,1395,2.098,1396,4.717,1397,2.098,1398,2.098,1399,2.098,1400,2.098,1401,2.098,1402,2.098,1403,3.331,1404,3.331,1405,2.098,1406,2.098,1407,2.098,1408,2.098,1409,2.098,1410,2.098,1411,3.331,1412,2.098,1413,2.098,1414,2.098,1415,2.098,1416,2.098,1417,2.098,1418,2.098,1419,3.331,1420,3.331,1421,2.098,1422,2.098,1423,2.098,1424,2.098,1425,2.098,1426,2.098,1427,2.098,1428,2.098,1429,2.098,1430,2.098,1431,2.098,1432,2.098,1433,2.098,1434,3.331,1435,2.098,1436,2.098,1437,2.098,1438,2.098,1439,2.098,1440,2.098,1441,2.098,1442,2.098,1443,2.098,1444,2.098,1445,2.098,1446,2.098,1447,2.098,1448,3.331,1449,2.098,1450,2.098,1451,2.098,1452,2.098,1453,3.331,1454,2.098,1455,2.098]]],"invertedIndex":[["",{"_index":30,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"modules/AppModule.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"interfaces/DatabaseError.html":{},"modules/DatabaseModule.html":{},"interfaces/DatabaseOptions.html":{},"classes/DateScalar.html":{},"injectables/DrizzleService.html":{},"interfaces/EnvironmentVariables.html":{},"modules/EventsModule.html":{},"injectables/ExceptionInterceptor.html":{},"classes/ExceptionsFilter.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpConfigService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAwsConfig.html":{},"interfaces/ISwaggerConfigInterface.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NewRecipeInput.html":{},"classes/PaginationParamsDto.html":{},"injectables/ParseIntPipe.html":{},"classes/QueryFailedFilter.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"modules/RedisModule.html":{},"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{},"injectables/ResolvePromisesInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/SettingService.html":{},"modules/SharedModule.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":662,"title":{},"body":{"classes/PaginationParamsDto.html":{},"classes/RecipesArgs.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["0.0.0.0",{"_index":1347,"title":{},"body":{"index.html":{}}}],["0.0.1",{"_index":1119,"title":{},"body":{"classes/SettingService.html":{}}}],["0.14.1",{"_index":1285,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":1300,"title":{},"body":{"dependencies.html":{}}}],["0.35.2",{"_index":1288,"title":{},"body":{"dependencies.html":{}}}],["0.40.0",{"_index":1273,"title":{},"body":{"dependencies.html":{}}}],["0.43.0",{"_index":1270,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1284,"title":{},"body":{"dependencies.html":{}}}],["0.53.0",{"_index":1271,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1199,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1210,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1209,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1200,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1206,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1219,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1235,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1216,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1239,"title":{},"body":{"coverage.html":{}}}],["07:00",{"_index":966,"title":{},"body":{"classes/SettingService.html":{}}}],["1",{"_index":88,"title":{"classes/AppGateway-1.html":{}},"body":{"classes/SettingService.html":{},"overview.html":{}}}],["1.0.0",{"_index":1358,"title":{},"body":{"properties.html":{}}}],["1.1.0",{"_index":1259,"title":{},"body":{"dependencies.html":{}}}],["1.26.0",{"_index":1275,"title":{},"body":{"dependencies.html":{}}}],["1.27.0",{"_index":1281,"title":{},"body":{"dependencies.html":{}}}],["1/5",{"_index":1238,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":1196,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":192,"title":{},"body":{"modules/AppModule.html":{},"injectables/ParseIntPipe.html":{},"classes/SettingService.html":{},"injectables/TasksService.html":{}}}],["10.2.0",{"_index":1263,"title":{},"body":{"dependencies.html":{}}}],["10.4.5",{"_index":1260,"title":{},"body":{"dependencies.html":{}}}],["1000",{"_index":1099,"title":{},"body":{"classes/SettingService.html":{}}}],["1113",{"_index":989,"title":{},"body":{"classes/SettingService.html":{}}}],["12.2.0",{"_index":1258,"title":{},"body":{"dependencies.html":{}}}],["127.0.0.1",{"_index":1023,"title":{},"body":{"classes/SettingService.html":{}}}],["13",{"_index":1356,"title":{},"body":{"overview.html":{}}}],["14",{"_index":1195,"title":{},"body":{"coverage.html":{}}}],["14.1.0",{"_index":1297,"title":{},"body":{"dependencies.html":{}}}],["14d",{"_index":1009,"title":{},"body":{"classes/SettingService.html":{}}}],["15",{"_index":1100,"title":{},"body":{"classes/SettingService.html":{}}}],["16",{"_index":1355,"title":{},"body":{"overview.html":{}}}],["16.4.5",{"_index":1286,"title":{},"body":{"dependencies.html":{}}}],["16.9.0",{"_index":1296,"title":{},"body":{"dependencies.html":{}}}],["2.2.3",{"_index":1268,"title":{},"body":{"dependencies.html":{}}}],["2.9.3",{"_index":1252,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1237,"title":{},"body":{"coverage.html":{}}}],["20m",{"_index":1007,"title":{},"body":{"classes/SettingService.html":{}}}],["2113",{"_index":992,"title":{},"body":{"classes/SettingService.html":{}}}],["23502",{"_index":1310,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["23503",{"_index":1312,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["23505",{"_index":1308,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["23514",{"_index":1314,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["25",{"_index":718,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["255",{"_index":643,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["3.0.0",{"_index":1291,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":1262,"title":{},"body":{"dependencies.html":{}}}],["300",{"_index":1102,"title":{},"body":{"classes/SettingService.html":{}}}],["30000",{"_index":475,"title":{},"body":{"injectables/HttpConfigService.html":{}}}],["30d",{"_index":1015,"title":{},"body":{"classes/SettingService.html":{}}}],["3600",{"_index":1034,"title":{},"body":{"classes/SettingService.html":{}}}],["4.11.0",{"_index":1250,"title":{},"body":{"dependencies.html":{}}}],["4.6.1",{"_index":1295,"title":{},"body":{"dependencies.html":{}}}],["45",{"_index":1172,"title":{},"body":{"injectables/TasksService.html":{}}}],["5",{"_index":478,"title":{},"body":{"injectables/HttpConfigService.html":{},"injectables/TasksService.html":{}}}],["5.0.0",{"_index":1289,"title":{},"body":{"dependencies.html":{}}}],["5.3.2",{"_index":1293,"title":{},"body":{"dependencies.html":{}}}],["6.0.1",{"_index":1254,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":1098,"title":{},"body":{"classes/SettingService.html":{}}}],["60000",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["6379",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"classes/SettingService.html":{},"miscellaneous/variables.html":{}}}],["7.6.18",{"_index":1267,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1302,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1357,"title":{},"body":{"overview.html":{}}}],["8.11.10",{"_index":1283,"title":{},"body":{"dependencies.html":{}}}],["8.13.0",{"_index":1298,"title":{},"body":{"dependencies.html":{}}}],["86400",{"_index":1038,"title":{},"body":{"classes/SettingService.html":{}}}],["9",{"_index":1354,"title":{},"body":{"overview.html":{}}}],["9.0.2",{"_index":1256,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":496,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["_.isempty(children",{"_index":511,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["__dirname",{"_index":1125,"title":{},"body":{"classes/SettingService.html":{}}}],["_configservice",{"_index":576,"title":{},"body":{"injectables/LoggerService.html":{}}}],["_configservice.log.levels",{"_index":601,"title":{},"body":{"injectables/LoggerService.html":{}}}],["_configservice.nodeenv",{"_index":604,"title":{},"body":{"injectables/LoggerService.html":{}}}],["_logger",{"_index":569,"title":{},"body":{"injectables/LoggerService.html":{}}}],["accesskeyid",{"_index":529,"title":{},"body":{"interfaces/IAwsConfig.html":{},"classes/SettingService.html":{}}}],["accessors",{"_index":872,"title":{},"body":{"classes/SettingService.html":{}}}],["addrecipe",{"_index":734,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["addrecipe(newrecipedata",{"_index":740,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["address",{"_index":1343,"title":{},"body":{"index.html":{}}}],["admin",{"_index":975,"title":{},"body":{"classes/SettingService.html":{}}}],["afterinit",{"_index":25,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["afterinit(server",{"_index":41,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["age",{"_index":199,"title":{},"body":{"interfaces/Cat.html":{},"classes/CreateCatDto.html":{}}}],["alias",{"_index":1198,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1364,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["anypgcolumn",{"_index":1395,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api",{"_index":13,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"classes/SettingService.html":{}}}],["api/docs",{"_index":1113,"title":{},"body":{"classes/SettingService.html":{}}}],["apicustomheader",{"_index":1241,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["apiprefix",{"_index":873,"title":{},"body":{"classes/SettingService.html":{}}}],["apollo/server",{"_index":1249,"title":{},"body":{"dependencies.html":{}}}],["apollo/subgraph",{"_index":1251,"title":{},"body":{"dependencies.html":{}}}],["app",{"_index":69,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"classes/SettingService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["app.listen(3000",{"_index":1346,"title":{},"body":{"index.html":{}}}],["app_interceptor",{"_index":267,"title":{},"body":{"modules/CoreModule.html":{}}}],["appgateway",{"_index":1,"title":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"modules/EventsModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":97,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appname",{"_index":1043,"title":{},"body":{"classes/SettingService.html":{}}}],["appplatform",{"_index":1084,"title":{},"body":{"classes/SettingService.html":{}}}],["appversion",{"_index":1082,"title":{},"body":{"classes/SettingService.html":{}}}],["args",{"_index":50,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"classes/ExceptionsFilter.html":{},"classes/RecipesResolver.html":{}}}],["args('newrecipedata",{"_index":772,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["argstype",{"_index":721,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["argumentmetadata",{"_index":678,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["argumentshost",{"_index":414,"title":{},"body":{"classes/ExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["array",{"_index":1190,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["article",{"_index":1413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["articleid",{"_index":1401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["articles",{"_index":1221,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["articles.authorid",{"_index":1390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["articles.id",{"_index":1403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["articlesrelations",{"_index":1222,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ast",{"_index":343,"title":{},"body":{"classes/DateScalar.html":{}}}],["ast.kind",{"_index":354,"title":{},"body":{"classes/DateScalar.html":{}}}],["async",{"_index":209,"title":{},"body":{"controllers/CatsController.html":{},"injectables/ParseIntPipe.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"injectables/RedisRepository.html":{},"injectables/ValidationPipe.html":{}}}],["auth",{"_index":1127,"title":{},"body":{"classes/SettingService.html":{}}}],["author",{"_index":1387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authorid",{"_index":1379,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authorization",{"_index":963,"title":{},"body":{"classes/SettingService.html":{}}}],["authorizationkey",{"_index":961,"title":{},"body":{"classes/SettingService.html":{}}}],["autoschemafile",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":1352,"title":{},"body":{"modules.html":{}}}],["await",{"_index":767,"title":{},"body":{"classes/RecipesResolver.html":{},"injectables/RedisRepository.html":{},"injectables/ValidationPipe.html":{},"index.html":{}}}],["aws",{"_index":936,"title":{},"body":{"classes/SettingService.html":{}}}],["awss3config",{"_index":881,"title":{},"body":{"classes/SettingService.html":{}}}],["badrequestexception",{"_index":680,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('validation",{"_index":685,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["base",{"_index":1278,"title":{},"body":{"dependencies.html":{}}}],["baseexceptionfilter",{"_index":418,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["blacklist",{"_index":1060,"title":{},"body":{"classes/SettingService.html":{}}}],["body",{"_index":225,"title":{},"body":{"controllers/CatsController.html":{},"classes/ExceptionsFilter.html":{},"injectables/LoggerService.html":{}}}],["boolean",{"_index":754,"title":{},"body":{"classes/RecipesResolver.html":{},"guards/RolesGuard.html":{},"injectables/ValidationPipe.html":{}}}],["boolean(code",{"_index":303,"title":{},"body":{"interfaces/DatabaseError.html":{}}}],["bootstrap",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/DatabaseModule.html":{},"modules/RecipesModule.html":{},"modules/RedisModule.html":{},"modules/SharedModule.html":{},"modules/TasksModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["breed",{"_index":200,"title":{},"body":{"interfaces/Cat.html":{},"classes/CreateCatDto.html":{}}}],["browse",{"_index":1350,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1348,"title":{},"body":{"modules.html":{}}}],["bucketname",{"_index":530,"title":{},"body":{"interfaces/IAwsConfig.html":{},"classes/SettingService.html":{}}}],["build",{"_index":1430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bullmodule",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["bullmodule.forroot",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["business",{"_index":791,"title":{},"body":{"injectables/RecipesService.html":{}}}],["cache.interceptor.ts",{"_index":447,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["cache.interceptor.ts:6",{"_index":450,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["cacheinterceptor",{"_index":224,"title":{},"body":{"controllers/CatsController.html":{},"injectables/HttpCacheInterceptor.html":{}}}],["cachemodule",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{}}}],["cachemodule.register",{"_index":256,"title":{},"body":{"modules/CatsModule.html":{}}}],["cachettl",{"_index":1035,"title":{},"body":{"classes/SettingService.html":{}}}],["callhandler",{"_index":390,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ResolvePromisesInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["canactivate",{"_index":856,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":858,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canbeundefined",{"_index":1213,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["case.directive.ts",{"_index":1204,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["cat",{"_index":196,"title":{"interfaces/Cat.html":{}},"body":{"interfaces/Cat.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"coverage.html":{}}}],["cat.dto",{"_index":240,"title":{},"body":{"controllers/CatsController.html":{}}}],["cat.dto.ts",{"_index":276,"title":{},"body":{"classes/CreateCatDto.html":{},"coverage.html":{}}}],["cat.dto.ts:11",{"_index":280,"title":{},"body":{"classes/CreateCatDto.html":{}}}],["cat.dto.ts:5",{"_index":281,"title":{},"body":{"classes/CreateCatDto.html":{}}}],["cat.dto.ts:8",{"_index":278,"title":{},"body":{"classes/CreateCatDto.html":{}}}],["catch",{"_index":410,"title":{},"body":{"classes/ExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtUtilService.html":{},"classes/QueryFailedFilter.html":{}}}],["catch(exception",{"_index":413,"title":{},"body":{"classes/ExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["catch(unprocessableentityexception",{"_index":498,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catcherror",{"_index":399,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["catcherror(err",{"_index":403,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["categories",{"_index":1223,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["categories.id",{"_index":1396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["categories.parentcategoryid",{"_index":1418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["categories_articles",{"_index":1398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["categoriesarticles",{"_index":1224,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["categoriesarticles.articleid",{"_index":1415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["categoriesarticles.categoryid",{"_index":1412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["categoriesarticlesrelations",{"_index":1225,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["categoriesrelations",{"_index":1226,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["category",{"_index":1410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["categoryid",{"_index":1399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cats",{"_index":208,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{}}}],["cats.controller",{"_index":255,"title":{},"body":{"modules/CatsModule.html":{}}}],["cats.service",{"_index":238,"title":{},"body":{"controllers/CatsController.html":{},"modules/CatsModule.html":{}}}],["cats/cats.module",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["catscontroller",{"_index":205,"title":{"controllers/CatsController.html":{}},"body":{"controllers/CatsController.html":{},"modules/CatsModule.html":{},"coverage.html":{}}}],["catsmodule",{"_index":107,"title":{"modules/CatsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules.html":{},"overview.html":{}}}],["catsservice",{"_index":237,"title":{"injectables/CatsService.html":{}},"body":{"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"coverage.html":{},"overview.html":{}}}],["certificates",{"_index":1126,"title":{},"body":{"classes/SettingService.html":{}}}],["chanel",{"_index":985,"title":{},"body":{"classes/SettingService.html":{}}}],["change",{"_index":1341,"title":{},"body":{"index.html":{}}}],["changeit",{"_index":977,"title":{},"body":{"classes/SettingService.html":{}}}],["checkviolation",{"_index":1313,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["children",{"_index":509,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["class",{"_index":0,"title":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"classes/CreateCatDto.html":{},"classes/DateScalar.html":{},"classes/ExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/NewRecipeInput.html":{},"classes/PaginationParamsDto.html":{},"classes/QueryFailedFilter.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"classes/RecipesResolver.html":{},"classes/SettingService.html":{}},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"modules/AppModule.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"modules/DatabaseModule.html":{},"classes/DateScalar.html":{},"injectables/DrizzleService.html":{},"modules/EventsModule.html":{},"injectables/ExceptionInterceptor.html":{},"classes/ExceptionsFilter.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpConfigService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NewRecipeInput.html":{},"classes/PaginationParamsDto.html":{},"injectables/ParseIntPipe.html":{},"classes/QueryFailedFilter.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"modules/RedisModule.html":{},"injectables/RedisRepository.html":{},"injectables/ResolvePromisesInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/SettingService.html":{},"modules/SharedModule.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"classes/CreateCatDto.html":{},"classes/DateScalar.html":{},"classes/ExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/NewRecipeInput.html":{},"classes/PaginationParamsDto.html":{},"classes/QueryFailedFilter.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"classes/RecipesResolver.html":{},"classes/SettingService.html":{},"overview.html":{}}}],["client",{"_index":52,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"classes/DateScalar.html":{}}}],["client.emit('messagetoclient",{"_index":82,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["client.id",{"_index":74,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["cls",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["clsmodule",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["clsmodule.forroot",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["cluster_appmodule",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_catsmodule",{"_index":252,"title":{},"body":{"modules/CatsModule.html":{},"overview.html":{}}}],["cluster_catsmodule_providers",{"_index":253,"title":{},"body":{"modules/CatsModule.html":{},"overview.html":{}}}],["cluster_databasemodule",{"_index":304,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_exports",{"_index":305,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_providers",{"_index":306,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_recipesmodule",{"_index":725,"title":{},"body":{"modules/RecipesModule.html":{},"overview.html":{}}}],["cluster_recipesmodule_providers",{"_index":726,"title":{},"body":{"modules/RecipesModule.html":{},"overview.html":{}}}],["cluster_redismodule",{"_index":802,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_redismodule_providers",{"_index":803,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_sharedmodule",{"_index":1146,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cluster_sharedmodule_exports",{"_index":1147,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cluster_tasksmodule",{"_index":1150,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_providers",{"_index":1151,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["code",{"_index":286,"title":{},"body":{"interfaces/DatabaseError.html":{}}}],["code.enum",{"_index":293,"title":{},"body":{"interfaces/DatabaseError.html":{}}}],["code.enum.ts",{"_index":1306,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["column",{"_index":287,"title":{},"body":{"interfaces/DatabaseError.html":{}}}],["columns",{"_index":1404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["columns.articleid",{"_index":1408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["columns.categoryid",{"_index":1407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["comment",{"_index":1071,"title":{},"body":{"classes/SettingService.html":{}}}],["common/decorators/roles.decorator",{"_index":231,"title":{},"body":{"controllers/CatsController.html":{}}}],["common/guards/roles.guard",{"_index":233,"title":{},"body":{"controllers/CatsController.html":{}}}],["common/pipes/parse",{"_index":235,"title":{},"body":{"controllers/CatsController.html":{}}}],["common/scalars/date.scalar",{"_index":729,"title":{},"body":{"modules/RecipesModule.html":{}}}],["common/utils/deep",{"_index":847,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["common/utils/is",{"_index":295,"title":{},"body":{"interfaces/DatabaseError.html":{}}}],["config",{"_index":1328,"title":{},"body":{"miscellaneous/functions.html":{}}}],["configservice",{"_index":467,"title":{},"body":{"injectables/HttpConfigService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configurabledatabasemodule",{"_index":309,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configurablemodulebuilder",{"_index":1428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connected",{"_index":73,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["connection",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["connection_pool",{"_index":310,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DrizzleService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["connectionname",{"_index":1031,"title":{},"body":{"classes/SettingService.html":{}}}],["connectionsettings",{"_index":971,"title":{},"body":{"classes/SettingService.html":{}}}],["console",{"_index":980,"title":{},"body":{"classes/SettingService.html":{}}}],["console.info(process.env",{"_index":943,"title":{},"body":{"classes/SettingService.html":{}}}],["console.log",{"_index":775,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["console.log('before",{"_index":631,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`after",{"_index":635,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`request",{"_index":565,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["console.log(context.gethandler",{"_index":860,"title":{},"body":{"guards/RolesGuard.html":{}}}],["console.log(recipe",{"_index":776,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["consolelogger",{"_index":568,"title":{},"body":{"injectables/LoggerService.html":{}}}],["consolespanexporter",{"_index":1446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["const",{"_index":302,"title":{},"body":{"interfaces/DatabaseError.html":{},"classes/ExceptionsFilter.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"classes/QueryFailedFilter.html":{},"classes/RecipesResolver.html":{},"guards/RolesGuard.html":{},"classes/SettingService.html":{},"modules/SharedModule.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["constraint",{"_index":517,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["constrainterrors",{"_index":695,"title":{},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["constrainterrors[exception.constraint",{"_index":702,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["constraintkey",{"_index":516,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["constraints",{"_index":514,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["constraints[constraintkey",{"_index":525,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["constructor",{"_index":361,"title":{},"body":{"injectables/DrizzleService.html":{},"injectables/HttpConfigService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerService.html":{},"classes/QueryFailedFilter.html":{},"classes/RecipesResolver.html":{},"injectables/RedisRepository.html":{},"guards/RolesGuard.html":{},"classes/SettingService.html":{}}}],["constructor(@inject('redisclient",{"_index":831,"title":{},"body":{"injectables/RedisRepository.html":{}}}],["constructor(@inject(connection_pool",{"_index":369,"title":{},"body":{"injectables/DrizzleService.html":{}}}],["constructor(_configservice",{"_index":574,"title":{},"body":{"injectables/LoggerService.html":{}}}],["constructor(configservice",{"_index":465,"title":{},"body":{"injectables/HttpConfigService.html":{}}}],["constructor(jwtservice",{"_index":545,"title":{},"body":{"injectables/JwtUtilService.html":{}}}],["constructor(pool",{"_index":362,"title":{},"body":{"injectables/DrizzleService.html":{}}}],["constructor(private",{"_index":244,"title":{},"body":{"controllers/CatsController.html":{},"injectables/HttpConfigService.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerService.html":{},"classes/RecipesResolver.html":{},"guards/RolesGuard.html":{}}}],["constructor(public",{"_index":499,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["constructor(recipesservice",{"_index":738,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["constructor(redisclient",{"_index":813,"title":{},"body":{"injectables/RedisRepository.html":{}}}],["constructor(reflector",{"_index":485,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"guards/RolesGuard.html":{}}}],["content",{"_index":1377,"title":{},"body":{"miscellaneous/variables.html":{}}}],["context",{"_index":392,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/RecipesResolver.html":{},"injectables/ResolvePromisesInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{}}}],["context('pubsub",{"_index":773,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["context.gethandler",{"_index":862,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":452,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"guards/RolesGuard.html":{}}}],["contextname",{"_index":617,"title":{},"body":{"injectables/LoggerService.html":{}}}],["controller",{"_index":204,"title":{"controllers/CatsController.html":{}},"body":{"controllers/CatsController.html":{},"coverage.html":{},"overview.html":{}}}],["controller('cats",{"_index":243,"title":{},"body":{"controllers/CatsController.html":{}}}],["controllers",{"_index":194,"title":{},"body":{"modules/AppModule.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"modules/RedisModule.html":{}}}],["conventions",{"_index":1280,"title":{},"body":{"dependencies.html":{}}}],["convert",{"_index":519,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["core",{"_index":1272,"title":{},"body":{"dependencies.html":{}}}],["core/core.module",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["core/database/database.module",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["core/interfaces/aws.interface",{"_index":927,"title":{},"body":{"classes/SettingService.html":{}}}],["core/interfaces/swagger.interface",{"_index":928,"title":{},"body":{"classes/SettingService.html":{}}}],["core/redis/redis.module",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["coremodule",{"_index":108,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["cors",{"_index":955,"title":{},"body":{"classes/SettingService.html":{}}}],["coverage",{"_index":1192,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":210,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"injectables/RecipesService.html":{}}}],["create(@body",{"_index":246,"title":{},"body":{"controllers/CatsController.html":{}}}],["create(cat",{"_index":260,"title":{},"body":{"injectables/CatsService.html":{}}}],["create(createcatdto",{"_index":213,"title":{},"body":{"controllers/CatsController.html":{}}}],["create(data",{"_index":786,"title":{},"body":{"injectables/RecipesService.html":{}}}],["createcatdto",{"_index":214,"title":{"classes/CreateCatDto.html":{}},"body":{"controllers/CatsController.html":{},"classes/CreateCatDto.html":{},"coverage.html":{}}}],["createhttpoptions",{"_index":464,"title":{},"body":{"injectables/HttpConfigService.html":{}}}],["creationdate",{"_index":705,"title":{},"body":{"classes/Recipe.html":{}}}],["cron",{"_index":1167,"title":{},"body":{"injectables/TasksService.html":{}}}],["cron('45",{"_index":1159,"title":{},"body":{"injectables/TasksService.html":{}}}],["ctx",{"_index":500,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["ctx.getresponse",{"_index":502,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["custom",{"_index":337,"title":{},"body":{"classes/DateScalar.html":{}}}],["customscalar",{"_index":332,"title":{},"body":{"classes/DateScalar.html":{}}}],["daily",{"_index":922,"title":{},"body":{"classes/SettingService.html":{}}}],["dailyrotatefile",{"_index":921,"title":{},"body":{"classes/SettingService.html":{}}}],["data",{"_index":81,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"injectables/RecipesService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["database",{"_index":315,"title":{},"body":{"modules/DatabaseModule.html":{},"interfaces/DatabaseOptions.html":{},"injectables/DrizzleService.html":{},"classes/SettingService.html":{}}}],["database.module",{"_index":312,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DrizzleService.html":{}}}],["database_options",{"_index":311,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["databaseerror",{"_index":283,"title":{"interfaces/DatabaseError.html":{}},"body":{"interfaces/DatabaseError.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["databasekey",{"_index":882,"title":{},"body":{"classes/SettingService.html":{}}}],["databasemodule",{"_index":109,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["databasemodule.forrootasync",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["databaseoptions",{"_index":314,"title":{"interfaces/DatabaseOptions.html":{}},"body":{"modules/DatabaseModule.html":{},"interfaces/DatabaseOptions.html":{},"coverage.html":{}}}],["databaseoptions.database",{"_index":326,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["databaseoptions.host",{"_index":320,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["databaseoptions.password",{"_index":325,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["databaseoptions.port",{"_index":321,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["databaseoptions.user",{"_index":323,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["databaseschema",{"_index":367,"title":{},"body":{"injectables/DrizzleService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":336,"title":{},"body":{"classes/DateScalar.html":{},"classes/Recipe.html":{}}}],["date%.log",{"_index":1000,"title":{},"body":{"classes/SettingService.html":{}}}],["date(ast.value",{"_index":356,"title":{},"body":{"classes/DateScalar.html":{}}}],["date(value",{"_index":351,"title":{},"body":{"classes/DateScalar.html":{}}}],["date.now",{"_index":633,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["datepattern",{"_index":1001,"title":{},"body":{"classes/SettingService.html":{}}}],["datescalar",{"_index":330,"title":{"classes/DateScalar.html":{}},"body":{"classes/DateScalar.html":{},"modules/RecipesModule.html":{},"coverage.html":{}}}],["db",{"_index":360,"title":{},"body":{"injectables/DrizzleService.html":{}}}],["dd",{"_index":1004,"title":{},"body":{"classes/SettingService.html":{}}}],["debug",{"_index":570,"title":{},"body":{"injectables/LoggerService.html":{},"classes/SettingService.html":{}}}],["debug(message",{"_index":577,"title":{},"body":{"injectables/LoggerService.html":{}}}],["declarations",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/DatabaseModule.html":{},"modules/RecipesModule.html":{},"modules/RedisModule.html":{},"modules/SharedModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["decodedtoken",{"_index":552,"title":{},"body":{"injectables/JwtUtilService.html":{}}}],["decorators",{"_index":38,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"controllers/CatsController.html":{},"classes/CreateCatDto.html":{},"classes/NewRecipeInput.html":{},"classes/PaginationParamsDto.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"classes/RecipesResolver.html":{},"injectables/TasksService.html":{}}}],["deepresolvepromises",{"_index":846,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["deepresolvepromises(data",{"_index":849,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["deepresolvepromises(input",{"_index":1324,"title":{},"body":{"miscellaneous/functions.html":{}}}],["default",{"_index":31,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"injectables/CatsService.html":{},"classes/DateScalar.html":{},"classes/ExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/PaginationParamsDto.html":{},"classes/RecipesArgs.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["defaultlang",{"_index":958,"title":{},"body":{"classes/SettingService.html":{}}}],["defaultusercredentials",{"_index":972,"title":{},"body":{"classes/SettingService.html":{}}}],["defined",{"_index":35,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"classes/DateScalar.html":{},"injectables/DrizzleService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/ExceptionsFilter.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpConfigService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NewRecipeInput.html":{},"classes/PaginationParamsDto.html":{},"injectables/ParseIntPipe.html":{},"classes/QueryFailedFilter.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{},"injectables/ResolvePromisesInterceptor.html":{},"guards/RolesGuard.html":{},"classes/SettingService.html":{},"injectables/TasksService.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{}}}],["definition",{"_index":313,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DrizzleService.html":{}}}],["definition.ts",{"_index":1229,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["delete",{"_index":513,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{}}}],["delete(prefix",{"_index":817,"title":{},"body":{"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{}}}],["demonstration",{"_index":794,"title":{},"body":{"injectables/RecipesService.html":{}}}],["dependencies",{"_index":99,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/DatabaseModule.html":{},"modules/RecipesModule.html":{},"modules/RedisModule.html":{},"modules/SharedModule.html":{},"modules/TasksModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"classes/DateScalar.html":{},"interfaces/ISwaggerConfigInterface.html":{},"classes/NewRecipeInput.html":{},"classes/Recipe.html":{},"classes/SettingService.html":{},"properties.html":{}}}],["detail",{"_index":288,"title":{},"body":{"interfaces/DatabaseError.html":{}}}],["development",{"_index":942,"title":{},"body":{"classes/SettingService.html":{}}}],["device",{"_index":1086,"title":{},"body":{"classes/SettingService.html":{}}}],["directivename",{"_index":1331,"title":{},"body":{"miscellaneous/functions.html":{}}}],["disable",{"_index":1066,"title":{},"body":{"classes/SettingService.html":{}}}],["disconnected",{"_index":75,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["distributetracing",{"_index":1048,"title":{},"body":{"classes/SettingService.html":{}}}],["documentation",{"_index":1117,"title":{},"body":{"classes/SettingService.html":{},"coverage.html":{}}}],["dotenv",{"_index":920,"title":{},"body":{"classes/SettingService.html":{},"dependencies.html":{}}}],["dotenv.config",{"_index":929,"title":{},"body":{"classes/SettingService.html":{}}}],["driver",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"classes/SettingService.html":{}}}],["drizzle",{"_index":365,"title":{},"body":{"injectables/DrizzleService.html":{},"dependencies.html":{}}}],["drizzle(this.pool",{"_index":371,"title":{},"body":{"injectables/DrizzleService.html":{}}}],["drizzle.service",{"_index":319,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["drizzleservice",{"_index":307,"title":{"injectables/DrizzleService.html":{}},"body":{"modules/DatabaseModule.html":{},"injectables/DrizzleService.html":{},"coverage.html":{},"overview.html":{}}}],["dto/create",{"_index":239,"title":{},"body":{"controllers/CatsController.html":{}}}],["dto/new",{"_index":761,"title":{},"body":{"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{}}}],["dto/recipes.args",{"_index":763,"title":{},"body":{"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{}}}],["e",{"_index":1453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email",{"_index":1424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emitter",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["en",{"_index":960,"title":{},"body":{"classes/SettingService.html":{}}}],["enable",{"_index":1039,"title":{},"body":{"classes/SettingService.html":{}}}],["enabled",{"_index":1041,"title":{},"body":{"classes/SettingService.html":{}}}],["enumerations",{"_index":1304,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":930,"title":{},"body":{"classes/SettingService.html":{}}}],["environmentvariables",{"_index":372,"title":{"interfaces/EnvironmentVariables.html":{}},"body":{"interfaces/EnvironmentVariables.html":{},"coverage.html":{}}}],["envname",{"_index":937,"title":{},"body":{"classes/SettingService.html":{}}}],["err",{"_index":441,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["error",{"_index":292,"title":{},"body":{"interfaces/DatabaseError.html":{},"classes/ExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerService.html":{},"classes/QueryFailedFilter.html":{},"classes/SettingService.html":{},"miscellaneous/enumerations.html":{}}}],["error('failed",{"_index":557,"title":{},"body":{"injectables/JwtUtilService.html":{}}}],["error(`redis",{"_index":1454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error(message",{"_index":579,"title":{},"body":{"injectables/LoggerService.html":{}}}],["error.fields.${_.snakecase",{"_index":526,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["error.fields.{key",{"_index":521,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["error.ts",{"_index":285,"title":{},"body":{"interfaces/DatabaseError.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["error.unique.email",{"_index":1432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["errorresponse",{"_index":616,"title":{},"body":{"injectables/LoggerService.html":{}}}],["errors",{"_index":696,"title":{},"body":{"classes/QueryFailedFilter.html":{},"injectables/ValidationPipe.html":{}}}],["errors.length",{"_index":1188,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errors.ts",{"_index":1208,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["eslint",{"_index":1065,"title":{},"body":{"classes/SettingService.html":{}}}],["eslint/ban",{"_index":1069,"title":{},"body":{"classes/SettingService.html":{}}}],["event",{"_index":84,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["eventemittermodule",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["eventemittermodule.forroot",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["events.gateway",{"_index":383,"title":{},"body":{"modules/EventsModule.html":{}}}],["eventsmodule",{"_index":110,"title":{"modules/EventsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules.html":{},"overview.html":{}}}],["eventstore",{"_index":983,"title":{},"body":{"classes/SettingService.html":{}}}],["eventstoreconfig",{"_index":876,"title":{},"body":{"classes/SettingService.html":{}}}],["ex",{"_index":836,"title":{},"body":{"injectables/RedisRepository.html":{}}}],["example",{"_index":8,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["exception",{"_index":404,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/ExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["exception.constraint",{"_index":701,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["exception.constraint?.startswith('uq",{"_index":697,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["exception.getresponse",{"_index":505,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":444,"title":{},"body":{"classes/ExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":482,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["exceptioninterceptor",{"_index":384,"title":{"injectables/ExceptionInterceptor.html":{}},"body":{"injectables/ExceptionInterceptor.html":{},"coverage.html":{}}}],["exceptionsfilter",{"_index":408,"title":{"classes/ExceptionsFilter.html":{}},"body":{"classes/ExceptionsFilter.html":{},"coverage.html":{}}}],["excluded",{"_index":459,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["excludepaths",{"_index":457,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["excludepaths.includes(httpadapter.getrequesturl(request",{"_index":460,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["executioncontext",{"_index":388,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ResolvePromisesInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{}}}],["exitonerror",{"_index":1021,"title":{},"body":{"classes/SettingService.html":{}}}],["expiresrefreshtoken",{"_index":1144,"title":{},"body":{"classes/SettingService.html":{}}}],["expirestoken",{"_index":1142,"title":{},"body":{"classes/SettingService.html":{}}}],["expiry",{"_index":826,"title":{},"body":{"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{}}}],["explainthreshold",{"_index":1054,"title":{},"body":{"classes/SettingService.html":{}}}],["export",{"_index":70,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"modules/AppModule.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"interfaces/DatabaseError.html":{},"modules/DatabaseModule.html":{},"interfaces/DatabaseOptions.html":{},"classes/DateScalar.html":{},"injectables/DrizzleService.html":{},"interfaces/EnvironmentVariables.html":{},"modules/EventsModule.html":{},"injectables/ExceptionInterceptor.html":{},"classes/ExceptionsFilter.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpConfigService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAwsConfig.html":{},"interfaces/ISwaggerConfigInterface.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NewRecipeInput.html":{},"classes/PaginationParamsDto.html":{},"injectables/ParseIntPipe.html":{},"classes/QueryFailedFilter.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"modules/RedisModule.html":{},"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{},"injectables/ResolvePromisesInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/SettingService.html":{},"modules/SharedModule.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{}}}],["exports",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/DatabaseModule.html":{},"modules/RecipesModule.html":{},"modules/RedisModule.html":{},"modules/SharedModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["express",{"_index":495,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggerService.html":{},"classes/QueryFailedFilter.html":{},"dependencies.html":{}}}],["expressinstrumentation",{"_index":1444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extends",{"_index":327,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/ExceptionsFilter.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/LoggerService.html":{}}}],["extract",{"_index":558,"title":{},"body":{"injectables/JwtUtilService.html":{}}}],["extractpayloadfromtoken",{"_index":544,"title":{},"body":{"injectables/JwtUtilService.html":{}}}],["extractpayloadfromtoken(token",{"_index":548,"title":{},"body":{"injectables/JwtUtilService.html":{}}}],["factoryprovider",{"_index":1447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["failed",{"_index":686,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["failed.filter.ts",{"_index":689,"title":{},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["failed.filter.ts:10",{"_index":690,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["failed.filter.ts:11",{"_index":691,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["failed.filter.ts:13",{"_index":692,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["failonnoserverresponse",{"_index":979,"title":{},"body":{"classes/SettingService.html":{}}}],["false",{"_index":301,"title":{},"body":{"interfaces/DatabaseError.html":{},"classes/SettingService.html":{}}}],["fastify",{"_index":1265,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["fastify/formbody",{"_index":1253,"title":{},"body":{"dependencies.html":{}}}],["fastify/middie",{"_index":1255,"title":{},"body":{"dependencies.html":{}}}],["field",{"_index":649,"title":{},"body":{"classes/NewRecipeInput.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{}}}],["field()@maxlength(30",{"_index":647,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["field(type",{"_index":645,"title":{},"body":{"classes/NewRecipeInput.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{}}}],["field({nullable",{"_index":641,"title":{},"body":{"classes/NewRecipeInput.html":{},"classes/Recipe.html":{}}}],["fields",{"_index":1389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"modules/AppModule.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"interfaces/DatabaseError.html":{},"modules/DatabaseModule.html":{},"interfaces/DatabaseOptions.html":{},"classes/DateScalar.html":{},"injectables/DrizzleService.html":{},"interfaces/EnvironmentVariables.html":{},"modules/EventsModule.html":{},"injectables/ExceptionInterceptor.html":{},"classes/ExceptionsFilter.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpConfigService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAwsConfig.html":{},"interfaces/ISwaggerConfigInterface.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NewRecipeInput.html":{},"classes/PaginationParamsDto.html":{},"injectables/ParseIntPipe.html":{},"classes/QueryFailedFilter.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"modules/RedisModule.html":{},"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{},"injectables/ResolvePromisesInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/SettingService.html":{},"modules/SharedModule.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["filename",{"_index":998,"title":{},"body":{"classes/SettingService.html":{}}}],["findall",{"_index":211,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"injectables/RecipesService.html":{}}}],["findall(recipesargs",{"_index":796,"title":{},"body":{"injectables/RecipesService.html":{}}}],["findone",{"_index":212,"title":{},"body":{"controllers/CatsController.html":{}}}],["findone(id",{"_index":220,"title":{},"body":{"controllers/CatsController.html":{}}}],["findonebyid",{"_index":784,"title":{},"body":{"injectables/RecipesService.html":{}}}],["findonebyid(id",{"_index":798,"title":{},"body":{"injectables/RecipesService.html":{}}}],["foreignkeyviolation",{"_index":1311,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["format",{"_index":1010,"title":{},"body":{"classes/SettingService.html":{}}}],["formatted",{"_index":620,"title":{},"body":{"injectables/LoggerService.html":{}}}],["formattederror",{"_index":571,"title":{},"body":{"injectables/LoggerService.html":{}}}],["formattederror(message",{"_index":583,"title":{},"body":{"injectables/LoggerService.html":{}}}],["formbody",{"_index":1290,"title":{},"body":{"dependencies.html":{}}}],["fs",{"_index":925,"title":{},"body":{"classes/SettingService.html":{}}}],["fs.existssync(privatekeypath",{"_index":1131,"title":{},"body":{"classes/SettingService.html":{}}}],["fs.existssync(publickeypath",{"_index":1134,"title":{},"body":{"classes/SettingService.html":{}}}],["fs.readfilesync(privatekeypath",{"_index":1132,"title":{},"body":{"classes/SettingService.html":{}}}],["fs.readfilesync(publickeypath",{"_index":1135,"title":{},"body":{"classes/SettingService.html":{}}}],["function",{"_index":297,"title":{},"body":{"interfaces/DatabaseError.html":{},"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["functions",{"_index":1315,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":221,"title":{},"body":{"controllers/CatsController.html":{}}}],["get(key",{"_index":886,"title":{},"body":{"classes/SettingService.html":{}}}],["get(prefix",{"_index":820,"title":{},"body":{"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{}}}],["getapiprefix",{"_index":892,"title":{},"body":{"classes/SettingService.html":{}}}],["getapp",{"_index":890,"title":{},"body":{"classes/SettingService.html":{}}}],["getawss3config",{"_index":912,"title":{},"body":{"classes/SettingService.html":{}}}],["getdatabasekey",{"_index":914,"title":{},"body":{"classes/SettingService.html":{}}}],["geteventstoreconfig",{"_index":898,"title":{},"body":{"classes/SettingService.html":{}}}],["getheaderkey",{"_index":908,"title":{},"body":{"classes/SettingService.html":{}}}],["gethttpstatus",{"_index":411,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["gethttpstatus(exception",{"_index":416,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["getjwtconfig",{"_index":918,"title":{},"body":{"classes/SettingService.html":{}}}],["getlog",{"_index":906,"title":{},"body":{"classes/SettingService.html":{}}}],["getnewrelic",{"_index":904,"title":{},"body":{"classes/SettingService.html":{}}}],["getnodeenv",{"_index":894,"title":{},"body":{"classes/SettingService.html":{}}}],["getnumber",{"_index":871,"title":{},"body":{"classes/SettingService.html":{}}}],["getnumber(key",{"_index":888,"title":{},"body":{"classes/SettingService.html":{}}}],["getratelimit",{"_index":910,"title":{},"body":{"classes/SettingService.html":{}}}],["getredis",{"_index":902,"title":{},"body":{"classes/SettingService.html":{}}}],["getswaggerconfig",{"_index":916,"title":{},"body":{"classes/SettingService.html":{}}}],["getthrottlerconfig",{"_index":896,"title":{},"body":{"classes/SettingService.html":{}}}],["getting",{"_index":1332,"title":{"index.html":{}},"body":{}}],["getwinstonconfig",{"_index":900,"title":{},"body":{"classes/SettingService.html":{}}}],["global",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/SharedModule.html":{}}}],["google",{"_index":1076,"title":{},"body":{"classes/SettingService.html":{}}}],["gqlargumentshost",{"_index":419,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["gqlargumentshost.create(host",{"_index":425,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["gqlcontexttype",{"_index":420,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["gqlexceptionfilter",{"_index":421,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["gqlhost",{"_index":424,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["gqlhost.getcontext",{"_index":429,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["graph",{"_index":1351,"title":{},"body":{"modules.html":{}}}],["graphiql",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["graphql",{"_index":349,"title":{},"body":{"classes/DateScalar.html":{},"classes/ExceptionsFilter.html":{},"dependencies.html":{}}}],["graphqlmodule",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlschema",{"_index":1330,"title":{},"body":{"miscellaneous/functions.html":{}}}],["guard",{"_index":853,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":854,"title":{},"body":{"guards/RolesGuard.html":{}}}],["handle",{"_index":401,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{}}}],["handleconnection",{"_index":26,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["handleconnection(client",{"_index":48,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["handlecron",{"_index":1156,"title":{},"body":{"injectables/TasksService.html":{}}}],["handledisconnect",{"_index":27,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["handledisconnect(client",{"_index":53,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["handleexceptions",{"_index":1017,"title":{},"body":{"classes/SettingService.html":{}}}],["handleinterval",{"_index":1157,"title":{},"body":{"injectables/TasksService.html":{}}}],["handlemessage",{"_index":28,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["handlemessage(client",{"_index":55,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["handletimeout",{"_index":1158,"title":{},"body":{"injectables/TasksService.html":{}}}],["hasrole",{"_index":864,"title":{},"body":{"guards/RolesGuard.html":{}}}],["headerkey",{"_index":879,"title":{},"body":{"classes/SettingService.html":{}}}],["headers",{"_index":621,"title":{},"body":{"injectables/LoggerService.html":{}}}],["helmet",{"_index":1292,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":792,"title":{},"body":{"injectables/RecipesService.html":{}}}],["hh:mm:ss",{"_index":1019,"title":{},"body":{"classes/SettingService.html":{}}}],["host",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"interfaces/DatabaseOptions.html":{},"classes/ExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/SettingService.html":{},"miscellaneous/variables.html":{}}}],["host.gettype",{"_index":423,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["host.interface",{"_index":597,"title":{},"body":{"injectables/LoggerService.html":{}}}],["host.switchtohttp",{"_index":501,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["host.switchtohttp().getrequest",{"_index":432,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["http",{"_index":540,"title":{},"body":{"interfaces/ISwaggerConfigInterface.html":{},"classes/SettingService.html":{},"dependencies.html":{}}}],["httpadapter",{"_index":453,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["httpadapter.getrequestmethod(request",{"_index":456,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["httpadapter.getrequesturl(request",{"_index":461,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["httpargumentshost",{"_index":595,"title":{},"body":{"injectables/LoggerService.html":{}}}],["httpcacheinterceptor",{"_index":445,"title":{"injectables/HttpCacheInterceptor.html":{}},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["httpconfigservice",{"_index":462,"title":{"injectables/HttpConfigService.html":{}},"body":{"injectables/HttpConfigService.html":{},"coverage.html":{}}}],["httpcontext",{"_index":615,"title":{},"body":{"injectables/LoggerService.html":{}}}],["httpendpoint",{"_index":990,"title":{},"body":{"classes/SettingService.html":{}}}],["httpexception",{"_index":394,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/ExceptionsFilter.html":{}}}],["httpexceptionfilter",{"_index":479,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httpinstrumentation",{"_index":1443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpmodule",{"_index":1149,"title":{},"body":{"modules/SharedModule.html":{}}}],["httpmoduleoptions",{"_index":469,"title":{},"body":{"injectables/HttpConfigService.html":{}}}],["httpmoduleoptionsfactory",{"_index":470,"title":{},"body":{"injectables/HttpConfigService.html":{}}}],["https",{"_index":541,"title":{},"body":{"interfaces/ISwaggerConfigInterface.html":{},"classes/SettingService.html":{}}}],["https://docs.nestjs.com/websockets/gateways",{"_index":11,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["https://socket.io/docs/client",{"_index":14,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["https://socket.io/docs/server",{"_index":12,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["httpstatus",{"_index":395,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/ExceptionsFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["httpstatus.bad_gateway",{"_index":407,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["httpstatus.conflict",{"_index":698,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":438,"title":{},"body":{"classes/ExceptionsFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["i18n",{"_index":523,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["iawsconfig",{"_index":527,"title":{"interfaces/IAwsConfig.html":{}},"body":{"interfaces/IAwsConfig.html":{},"classes/SettingService.html":{},"coverage.html":{}}}],["id",{"_index":223,"title":{},"body":{"controllers/CatsController.html":{},"classes/Recipe.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"classes/SettingService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":1193,"title":{},"body":{"coverage.html":{}}}],["idstoskip",{"_index":660,"title":{},"body":{"classes/PaginationParamsDto.html":{}}}],["ignore",{"_index":1072,"title":{},"body":{"classes/SettingService.html":{}}}],["implements",{"_index":15,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/ExceptionsFilter.html":{},"injectables/HttpConfigService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"classes/QueryFailedFilter.html":{},"injectables/RedisRepository.html":{},"injectables/ResolvePromisesInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{}}}],["import",{"_index":60,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"modules/AppModule.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"interfaces/DatabaseError.html":{},"modules/DatabaseModule.html":{},"classes/DateScalar.html":{},"injectables/DrizzleService.html":{},"modules/EventsModule.html":{},"injectables/ExceptionInterceptor.html":{},"classes/ExceptionsFilter.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpConfigService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NewRecipeInput.html":{},"classes/PaginationParamsDto.html":{},"injectables/ParseIntPipe.html":{},"classes/QueryFailedFilter.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"modules/RedisModule.html":{},"injectables/RedisRepository.html":{},"injectables/ResolvePromisesInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/SettingService.html":{},"modules/SharedModule.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{}}}],["important",{"_index":9,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["imports",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/RedisModule.html":{},"modules/SharedModule.html":{}}}],["improve",{"_index":982,"title":{},"body":{"classes/SettingService.html":{}}}],["index",{"_index":19,"title":{"index.html":{}},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"interfaces/DatabaseError.html":{},"interfaces/DatabaseOptions.html":{},"classes/DateScalar.html":{},"injectables/DrizzleService.html":{},"interfaces/EnvironmentVariables.html":{},"injectables/ExceptionInterceptor.html":{},"classes/ExceptionsFilter.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpConfigService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAwsConfig.html":{},"interfaces/ISwaggerConfigInterface.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NewRecipeInput.html":{},"classes/PaginationParamsDto.html":{},"injectables/ParseIntPipe.html":{},"classes/QueryFailedFilter.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{},"injectables/ResolvePromisesInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/SettingService.html":{},"injectables/TasksService.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"modules/AppModule.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"interfaces/DatabaseError.html":{},"modules/DatabaseModule.html":{},"interfaces/DatabaseOptions.html":{},"classes/DateScalar.html":{},"injectables/DrizzleService.html":{},"interfaces/EnvironmentVariables.html":{},"modules/EventsModule.html":{},"injectables/ExceptionInterceptor.html":{},"classes/ExceptionsFilter.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpConfigService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAwsConfig.html":{},"interfaces/ISwaggerConfigInterface.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NewRecipeInput.html":{},"classes/PaginationParamsDto.html":{},"injectables/ParseIntPipe.html":{},"classes/QueryFailedFilter.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"modules/RedisModule.html":{},"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{},"injectables/ResolvePromisesInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/SettingService.html":{},"modules/SharedModule.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{}}}],["info(message",{"_index":587,"title":{},"body":{"injectables/LoggerService.html":{}}}],["ingredients",{"_index":640,"title":{},"body":{"classes/NewRecipeInput.html":{},"classes/Recipe.html":{}}}],["initialized",{"_index":606,"title":{},"body":{"injectables/LoggerService.html":{}}}],["inject",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/DrizzleService.html":{},"injectables/RedisRepository.html":{},"miscellaneous/variables.html":{}}}],["injectable",{"_index":257,"title":{"injectables/CatsService.html":{},"injectables/DrizzleService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpConfigService.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/RecipesService.html":{},"injectables/RedisRepository.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/TasksService.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{}},"body":{"injectables/CatsService.html":{},"injectables/DrizzleService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpConfigService.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/RecipesService.html":{},"injectables/RedisRepository.html":{},"injectables/ResolvePromisesInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":258,"title":{},"body":{"injectables/CatsService.html":{},"injectables/DrizzleService.html":{},"injectables/ExceptionInterceptor.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpConfigService.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/RecipesService.html":{},"injectables/RedisRepository.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/TasksService.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"overview.html":{}}}],["input",{"_index":1325,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inputtype",{"_index":650,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["instanceof",{"_index":439,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["instructions",{"_index":1345,"title":{},"body":{"index.html":{}}}],["instrumentations",{"_index":1442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["int",{"_index":722,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["int)@min(0",{"_index":716,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["int)@min(1)@max(50",{"_index":719,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["int.pipe",{"_index":236,"title":{},"body":{"controllers/CatsController.html":{}}}],["int.pipe.ts",{"_index":674,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["int.pipe.ts:6",{"_index":679,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["integer('article_id",{"_index":1402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["integer('author_id",{"_index":1380,"title":{},"body":{"miscellaneous/variables.html":{}}}],["integer('category_id",{"_index":1400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["integer('parent_category_id').references",{"_index":1394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intercept",{"_index":386,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ResolvePromisesInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":387,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ResolvePromisesInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interceptor",{"_index":405,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["interceptors/logging.interceptor",{"_index":270,"title":{},"body":{"modules/CoreModule.html":{}}}],["interceptors/transform.interceptor",{"_index":272,"title":{},"body":{"modules/CoreModule.html":{}}}],["interface",{"_index":195,"title":{"interfaces/Cat.html":{},"interfaces/DatabaseError.html":{},"interfaces/DatabaseOptions.html":{},"interfaces/EnvironmentVariables.html":{},"interfaces/IAwsConfig.html":{},"interfaces/ISwaggerConfigInterface.html":{},"interfaces/RedisRepositoryInterface.html":{},"interfaces/Response.html":{}},"body":{"interfaces/Cat.html":{},"interfaces/DatabaseError.html":{},"interfaces/DatabaseOptions.html":{},"interfaces/EnvironmentVariables.html":{},"interfaces/IAwsConfig.html":{},"interfaces/ISwaggerConfigInterface.html":{},"interfaces/RedisRepositoryInterface.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["interfaces",{"_index":197,"title":{},"body":{"interfaces/Cat.html":{},"interfaces/DatabaseError.html":{},"interfaces/DatabaseOptions.html":{},"interfaces/EnvironmentVariables.html":{},"interfaces/IAwsConfig.html":{},"interfaces/ISwaggerConfigInterface.html":{},"interfaces/RedisRepositoryInterface.html":{},"interfaces/Response.html":{},"overview.html":{}}}],["interfaces/cat.interface",{"_index":241,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{}}}],["interval",{"_index":1168,"title":{},"body":{"injectables/TasksService.html":{}}}],["interval(10000",{"_index":1161,"title":{},"body":{"injectables/TasksService.html":{}}}],["ioredis",{"_index":830,"title":{},"body":{"injectables/RedisRepository.html":{}}}],["isdatabaseerror",{"_index":1230,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isdatabaseerror(value",{"_index":298,"title":{},"body":{"interfaces/DatabaseError.html":{},"miscellaneous/functions.html":{}}}],["isgetrequest",{"_index":455,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["isint",{"_index":277,"title":{},"body":{"classes/CreateCatDto.html":{}}}],["isnan(val",{"_index":684,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["isnumber",{"_index":668,"title":{},"body":{"classes/PaginationParamsDto.html":{}}}],["isoptional",{"_index":651,"title":{},"body":{"classes/NewRecipeInput.html":{},"classes/PaginationParamsDto.html":{}}}],["isoptional()@type(undefined)@isnumber()@min(0",{"_index":663,"title":{},"body":{"classes/PaginationParamsDto.html":{}}}],["isoptional()@type(undefined)@isnumber()@min(1",{"_index":665,"title":{},"body":{"classes/PaginationParamsDto.html":{}}}],["isrecord",{"_index":294,"title":{},"body":{"interfaces/DatabaseError.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isrecord(value",{"_index":300,"title":{},"body":{"interfaces/DatabaseError.html":{},"miscellaneous/functions.html":{}}}],["isstring",{"_index":279,"title":{},"body":{"classes/CreateCatDto.html":{}}}],["iswaggerconfiginterface",{"_index":535,"title":{"interfaces/ISwaggerConfigInterface.html":{}},"body":{"interfaces/ISwaggerConfigInterface.html":{},"classes/SettingService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["item",{"_index":867,"title":{},"body":{"guards/RolesGuard.html":{}}}],["join",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["json",{"_index":611,"title":{},"body":{"injectables/LoggerService.html":{}}}],["json.stringify(variables",{"_index":430,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["jwt_expiration_time",{"_index":375,"title":{},"body":{"interfaces/EnvironmentVariables.html":{}}}],["jwt_secret",{"_index":376,"title":{},"body":{"interfaces/EnvironmentVariables.html":{}}}],["jwtconfig",{"_index":884,"title":{},"body":{"classes/SettingService.html":{}}}],["jwtmodule",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtmodule.registerasync",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtservice",{"_index":546,"title":{},"body":{"injectables/JwtUtilService.html":{}}}],["jwtutilservice",{"_index":542,"title":{"injectables/JwtUtilService.html":{}},"body":{"injectables/JwtUtilService.html":{},"coverage.html":{}}}],["key",{"_index":818,"title":{},"body":{"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{},"classes/SettingService.html":{}}}],["kind",{"_index":348,"title":{},"body":{"classes/DateScalar.html":{}}}],["kind.int",{"_index":355,"title":{},"body":{"classes/DateScalar.html":{}}}],["lang",{"_index":1088,"title":{},"body":{"classes/SettingService.html":{}}}],["left",{"_index":793,"title":{},"body":{"injectables/RecipesService.html":{}}}],["legend",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/DatabaseModule.html":{},"modules/RecipesModule.html":{},"modules/RedisModule.html":{},"modules/SharedModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["length",{"_index":652,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["length(30",{"_index":656,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["level",{"_index":607,"title":{},"body":{"injectables/LoggerService.html":{},"classes/SettingService.html":{}}}],["levels",{"_index":1079,"title":{},"body":{"classes/SettingService.html":{}}}],["license",{"_index":1361,"title":{},"body":{"properties.html":{}}}],["licensekey",{"_index":1045,"title":{},"body":{"classes/SettingService.html":{}}}],["limit",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"classes/PaginationParamsDto.html":{}}}],["line",{"_index":1067,"title":{},"body":{"classes/SettingService.html":{}}}],["listen",{"_index":1342,"title":{},"body":{"index.html":{}}}],["literal",{"_index":585,"title":{},"body":{"injectables/LoggerService.html":{},"classes/QueryFailedFilter.html":{}}}],["localhost",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"classes/SettingService.html":{}}}],["lodash",{"_index":497,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["log",{"_index":572,"title":{},"body":{"injectables/LoggerService.html":{},"classes/SettingService.html":{}}}],["log(message",{"_index":589,"title":{},"body":{"injectables/LoggerService.html":{}}}],["logger",{"_index":22,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"classes/ExceptionsFilter.html":{},"classes/SettingService.html":{},"injectables/TasksService.html":{}}}],["logger('appgateway",{"_index":34,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["logger(tasksservice.name",{"_index":1165,"title":{},"body":{"injectables/TasksService.html":{}}}],["loggermiddleware",{"_index":559,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["loggermodule",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["loggermodule.forroot",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["loggerservice",{"_index":566,"title":{"injectables/LoggerService.html":{}},"body":{"injectables/LoggerService.html":{},"coverage.html":{}}}],["logginginterceptor",{"_index":269,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"modules/CoreModule.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["logic",{"_index":251,"title":{},"body":{"controllers/CatsController.html":{},"injectables/RecipesService.html":{}}}],["loglevel",{"_index":924,"title":{},"body":{"classes/SettingService.html":{}}}],["loglevels",{"_index":600,"title":{},"body":{"injectables/LoggerService.html":{},"classes/SettingService.html":{}}}],["logs/${this.nodeenv}/debug",{"_index":999,"title":{},"body":{"classes/SettingService.html":{}}}],["logs/${this.nodeenv}/error",{"_index":1014,"title":{},"body":{"classes/SettingService.html":{}}}],["machine",{"_index":1339,"title":{},"body":{"index.html":{}}}],["manager",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/HttpCacheInterceptor.html":{}}}],["many",{"_index":1386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["many(categories",{"_index":1422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["many(categoriesarticles",{"_index":1391,"title":{},"body":{"miscellaneous/variables.html":{}}}],["map",{"_index":845,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["matching",{"_index":87,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"modules/AppModule.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"interfaces/DatabaseError.html":{},"modules/DatabaseModule.html":{},"interfaces/DatabaseOptions.html":{},"classes/DateScalar.html":{},"injectables/DrizzleService.html":{},"interfaces/EnvironmentVariables.html":{},"modules/EventsModule.html":{},"injectables/ExceptionInterceptor.html":{},"classes/ExceptionsFilter.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpConfigService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAwsConfig.html":{},"interfaces/ISwaggerConfigInterface.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NewRecipeInput.html":{},"classes/PaginationParamsDto.html":{},"injectables/ParseIntPipe.html":{},"classes/QueryFailedFilter.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"modules/RedisModule.html":{},"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{},"injectables/ResolvePromisesInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/SettingService.html":{},"modules/SharedModule.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":723,"title":{},"body":{"classes/RecipesArgs.html":{},"classes/SettingService.html":{}}}],["max(50",{"_index":724,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["maxfiles",{"_index":1008,"title":{},"body":{"classes/SettingService.html":{}}}],["maxlength",{"_index":653,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["maxlength(30",{"_index":654,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["maxredirects",{"_index":476,"title":{},"body":{"injectables/HttpConfigService.html":{}}}],["maxsamples",{"_index":1058,"title":{},"body":{"classes/SettingService.html":{}}}],["maxsize",{"_index":1006,"title":{},"body":{"classes/SettingService.html":{}}}],["mercurius",{"_index":760,"title":{},"body":{"classes/RecipesResolver.html":{},"dependencies.html":{}}}],["mercuriusdriver",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["mercuriusdriverconfig",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["message",{"_index":406,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerService.html":{},"classes/QueryFailedFilter.html":{}}}],["messages",{"_index":520,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["meta",{"_index":584,"title":{},"body":{"injectables/LoggerService.html":{}}}],["meta.errorresponse",{"_index":625,"title":{},"body":{"injectables/LoggerService.html":{}}}],["meta.httpcontext.getrequest",{"_index":619,"title":{},"body":{"injectables/LoggerService.html":{}}}],["meta.httpcontext.getresponse",{"_index":618,"title":{},"body":{"injectables/LoggerService.html":{}}}],["metadata",{"_index":677,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["metatype",{"_index":1181,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["methods",{"_index":24,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/ExceptionsFilter.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpConfigService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"classes/QueryFailedFilter.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{},"injectables/ResolvePromisesInterceptor.html":{},"guards/RolesGuard.html":{},"classes/SettingService.html":{},"injectables/TasksService.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{}}}],["middleware",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["min",{"_index":669,"title":{},"body":{"classes/PaginationParamsDto.html":{},"classes/RecipesArgs.html":{},"classes/SettingService.html":{}}}],["min(0",{"_index":671,"title":{},"body":{"classes/PaginationParamsDto.html":{},"classes/RecipesArgs.html":{}}}],["min(1",{"_index":672,"title":{},"body":{"classes/PaginationParamsDto.html":{},"classes/RecipesArgs.html":{}}}],["miscellaneous",{"_index":1303,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1362,"title":{},"body":{"properties.html":{}}}],["mm",{"_index":1003,"title":{},"body":{"classes/SettingService.html":{}}}],["mock",{"_index":788,"title":{},"body":{"injectables/RecipesService.html":{}}}],["models/recipe.model",{"_index":764,"title":{},"body":{"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{}}}],["module",{"_index":96,"title":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EventsModule.html":{},"modules/RecipesModule.html":{},"modules/RedisModule.html":{},"modules/SharedModule.html":{},"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EventsModule.html":{},"modules/RecipesModule.html":{},"modules/RedisModule.html":{},"modules/SharedModule.html":{},"modules/TasksModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":98,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EventsModule.html":{},"modules/RecipesModule.html":{},"modules/RedisModule.html":{},"modules/SharedModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["morgan",{"_index":1080,"title":{},"body":{"classes/SettingService.html":{}}}],["mount",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["msgtoclient",{"_index":85,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["multiline",{"_index":934,"title":{},"body":{"classes/SettingService.html":{}}}],["mutation",{"_index":757,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["mutation(returns",{"_index":742,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["n",{"_index":932,"title":{},"body":{"classes/SettingService.html":{}}}],["name",{"_index":44,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"classes/DateScalar.html":{},"injectables/DrizzleService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/ExceptionsFilter.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpConfigService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"classes/QueryFailedFilter.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{},"injectables/ResolvePromisesInterceptor.html":{},"guards/RolesGuard.html":{},"classes/SettingService.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["need",{"_index":1340,"title":{},"body":{"index.html":{}}}],["nest",{"_index":1337,"title":{},"body":{"index.html":{},"properties.html":{}}}],["nest_cache",{"_index":1030,"title":{},"body":{"classes/SettingService.html":{}}}],["nested_categories",{"_index":1420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestedcategories",{"_index":1421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestfastifyapplication",{"_index":1327,"title":{},"body":{"miscellaneous/functions.html":{}}}],["nestinstrumentation",{"_index":1445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestinterceptor",{"_index":396,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ResolvePromisesInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["nestjs/apollo",{"_index":1257,"title":{},"body":{"dependencies.html":{}}}],["nestjs/axios",{"_index":471,"title":{},"body":{"injectables/HttpConfigService.html":{},"modules/SharedModule.html":{}}}],["nestjs/bullmq",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/cache",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/HttpCacheInterceptor.html":{}}}],["nestjs/common",{"_index":64,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"modules/AppModule.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"injectables/DrizzleService.html":{},"modules/EventsModule.html":{},"injectables/ExceptionInterceptor.html":{},"classes/ExceptionsFilter.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpConfigService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"classes/QueryFailedFilter.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"modules/RedisModule.html":{},"injectables/RedisRepository.html":{},"injectables/ResolvePromisesInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/SettingService.html":{},"modules/SharedModule.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces/features/arguments",{"_index":596,"title":{},"body":{"injectables/LoggerService.html":{}}}],["nestjs/config",{"_index":1261,"title":{},"body":{"dependencies.html":{}}}],["nestjs/core",{"_index":268,"title":{},"body":{"modules/CoreModule.html":{},"classes/ExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["nestjs/graphql",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"classes/DateScalar.html":{},"classes/ExceptionsFilter.html":{},"classes/NewRecipeInput.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"classes/RecipesResolver.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtUtilService.html":{},"dependencies.html":{}}}],["nestjs/mercurius",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1264,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":1169,"title":{},"body":{"injectables/TasksService.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["nestjs/throttler",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["nestjs/websockets",{"_index":63,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["nestmiddleware",{"_index":564,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["new",{"_index":33,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"controllers/CatsController.html":{},"modules/DatabaseModule.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/ExceptionsFilter.html":{},"injectables/JwtUtilService.html":{},"injectables/ParseIntPipe.html":{},"classes/RecipesResolver.html":{},"classes/SettingService.html":{},"injectables/TasksService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newrecipedata",{"_index":744,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["newrecipeinput",{"_index":637,"title":{"classes/NewRecipeInput.html":{}},"body":{"classes/NewRecipeInput.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"coverage.html":{}}}],["newrelic",{"_index":878,"title":{},"body":{"classes/SettingService.html":{}}}],["next",{"_index":389,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ResolvePromisesInterceptor.html":{},"interfaces/Response.html":{},"classes/SettingService.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":848,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["next.handle().pipe(map(data",{"_index":852,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["node",{"_index":1277,"title":{},"body":{"dependencies.html":{}}}],["node:http",{"_index":694,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["nodeenv",{"_index":874,"title":{},"body":{"classes/SettingService.html":{}}}],["nodepgdatabase",{"_index":364,"title":{},"body":{"injectables/DrizzleService.html":{}}}],["nodesdk",{"_index":1433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["note",{"_index":1335,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":756,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["notfoundexception(id",{"_index":769,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["notifications",{"_index":442,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["notnull",{"_index":1383,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notnullviolation",{"_index":1309,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["now",{"_index":632,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now}ms",{"_index":636,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["null",{"_index":357,"title":{},"body":{"classes/DateScalar.html":{},"injectables/JwtUtilService.html":{},"classes/PaginationParamsDto.html":{},"classes/SettingService.html":{}}}],["nullable",{"_index":655,"title":{},"body":{"classes/NewRecipeInput.html":{},"classes/Recipe.html":{}}}],["number",{"_index":201,"title":{},"body":{"interfaces/Cat.html":{},"controllers/CatsController.html":{},"classes/CreateCatDto.html":{},"interfaces/DatabaseOptions.html":{},"classes/DateScalar.html":{},"interfaces/EnvironmentVariables.html":{},"classes/PaginationParamsDto.html":{},"classes/RecipesArgs.html":{},"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{},"classes/SettingService.html":{},"injectables/ValidationPipe.html":{}}}],["number(this.configservice.get('http_max_redirects",{"_index":477,"title":{},"body":{"injectables/HttpConfigService.html":{}}}],["number(this.configservice.get('http_timeout",{"_index":474,"title":{},"body":{"injectables/HttpConfigService.html":{}}}],["number(this.get('postgres_port",{"_index":1108,"title":{},"body":{"classes/SettingService.html":{}}}],["number(this.get(key",{"_index":945,"title":{},"body":{"classes/SettingService.html":{}}}],["object",{"_index":555,"title":{},"body":{"injectables/JwtUtilService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["object.entries(constraints",{"_index":518,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["object.keys(process.env",{"_index":938,"title":{},"body":{"classes/SettingService.html":{}}}],["objecttype",{"_index":711,"title":{},"body":{"classes/Recipe.html":{}}}],["observable",{"_index":393,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ResolvePromisesInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["offset",{"_index":661,"title":{},"body":{"classes/PaginationParamsDto.html":{}}}],["once",{"_index":1174,"title":{},"body":{"injectables/TasksService.html":{}}}],["one",{"_index":1385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["one(articles",{"_index":1414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["one(categories",{"_index":1411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["one(users",{"_index":1388,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ongatewayconnection",{"_index":17,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["ongatewaydisconnect",{"_index":18,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["ongatewayinit",{"_index":16,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["onmoduledestroy",{"_index":810,"title":{},"body":{"injectables/RedisRepository.html":{}}}],["opentelemetry/instrumentation",{"_index":1269,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/resources",{"_index":1274,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/sdk",{"_index":1276,"title":{},"body":{"dependencies.html":{}}}],["opentelemetry/semantic",{"_index":1279,"title":{},"body":{"dependencies.html":{}}}],["operationname",{"_index":427,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["optional",{"_index":45,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"interfaces/DatabaseError.html":{},"classes/DateScalar.html":{},"injectables/DrizzleService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/ExceptionsFilter.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpConfigService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerConfigInterface.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"classes/QueryFailedFilter.html":{},"classes/Recipe.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{},"injectables/ResolvePromisesInterceptor.html":{},"guards/RolesGuard.html":{},"classes/SettingService.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":316,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["options.ts",{"_index":329,"title":{},"body":{"interfaces/DatabaseOptions.html":{},"coverage.html":{}}}],["orm",{"_index":1287,"title":{},"body":{"dependencies.html":{}}}],["orm/node",{"_index":366,"title":{},"body":{"injectables/DrizzleService.html":{}}}],["otel",{"_index":1436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["otelsdk",{"_index":1245,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/DatabaseModule.html":{},"modules/RecipesModule.html":{},"modules/RedisModule.html":{},"modules/SharedModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["override",{"_index":422,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["overview",{"_index":1353,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1248,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["paginationparamsdto",{"_index":657,"title":{"classes/PaginationParamsDto.html":{}},"body":{"classes/PaginationParamsDto.html":{},"coverage.html":{}}}],["param",{"_index":226,"title":{},"body":{"controllers/CatsController.html":{}}}],["param('id",{"_index":250,"title":{},"body":{"controllers/CatsController.html":{}}}],["parameters",{"_index":43,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/DateScalar.html":{},"injectables/DrizzleService.html":{},"injectables/ExceptionInterceptor.html":{},"classes/ExceptionsFilter.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpConfigService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"classes/QueryFailedFilter.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{},"injectables/ResolvePromisesInterceptor.html":{},"guards/RolesGuard.html":{},"classes/SettingService.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{}}}],["params.dto.ts",{"_index":659,"title":{},"body":{"classes/PaginationParamsDto.html":{},"coverage.html":{}}}],["params.dto.ts:15",{"_index":666,"title":{},"body":{"classes/PaginationParamsDto.html":{}}}],["params.dto.ts:21",{"_index":664,"title":{},"body":{"classes/PaginationParamsDto.html":{}}}],["params.dto.ts:9",{"_index":667,"title":{},"body":{"classes/PaginationParamsDto.html":{}}}],["parentcategory",{"_index":1417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parentcategoryid",{"_index":1393,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.redis_port",{"_index":1451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(value",{"_index":683,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["parseintpipe",{"_index":234,"title":{"injectables/ParseIntPipe.html":{}},"body":{"controllers/CatsController.html":{},"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["parseliteral",{"_index":333,"title":{},"body":{"classes/DateScalar.html":{}}}],["parseliteral(ast",{"_index":340,"title":{},"body":{"classes/DateScalar.html":{}}}],["parsevalue",{"_index":334,"title":{},"body":{"classes/DateScalar.html":{}}}],["parsevalue(value",{"_index":344,"title":{},"body":{"classes/DateScalar.html":{}}}],["password",{"_index":324,"title":{},"body":{"modules/DatabaseModule.html":{},"interfaces/DatabaseOptions.html":{},"classes/SettingService.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ISwaggerConfigInterface.html":{},"classes/SettingService.html":{}}}],["path.join",{"_index":1124,"title":{},"body":{"classes/SettingService.html":{}}}],["payload",{"_index":56,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"classes/RecipesResolver.html":{}}}],["per",{"_index":1344,"title":{},"body":{"index.html":{}}}],["pg",{"_index":318,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DrizzleService.html":{},"classes/SettingService.html":{},"dependencies.html":{}}}],["pgtable",{"_index":1397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pgtable('articles",{"_index":1374,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pgtable('categories",{"_index":1392,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pgtable('users",{"_index":1423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pgtransaction",{"_index":1366,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["pino",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["pinohttp",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["pipe",{"_index":402,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["pipe(tap",{"_index":634,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["pipetransform",{"_index":681,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["pk",{"_index":1405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plaintoclass",{"_index":1183,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":1186,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["pool",{"_index":317,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DrizzleService.html":{}}}],["poolconfig",{"_index":926,"title":{},"body":{"classes/SettingService.html":{}}}],["pooloptions",{"_index":993,"title":{},"body":{"classes/SettingService.html":{}}}],["port",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"interfaces/DatabaseOptions.html":{},"classes/SettingService.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":227,"title":{},"body":{"controllers/CatsController.html":{}}}],["post()@roles('admin",{"_index":215,"title":{},"body":{"controllers/CatsController.html":{}}}],["postgres",{"_index":291,"title":{},"body":{"interfaces/DatabaseError.html":{},"injectables/DrizzleService.html":{}}}],["postgres_db",{"_index":377,"title":{},"body":{"interfaces/EnvironmentVariables.html":{}}}],["postgres_host",{"_index":378,"title":{},"body":{"interfaces/EnvironmentVariables.html":{}}}],["postgres_password",{"_index":379,"title":{},"body":{"interfaces/EnvironmentVariables.html":{}}}],["postgres_port",{"_index":380,"title":{},"body":{"interfaces/EnvironmentVariables.html":{}}}],["postgres_user",{"_index":381,"title":{},"body":{"interfaces/EnvironmentVariables.html":{}}}],["postgreserrorcode",{"_index":290,"title":{},"body":{"interfaces/DatabaseError.html":{},"miscellaneous/enumerations.html":{}}}],["postgrestransaction",{"_index":1233,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["prefix",{"_index":207,"title":{},"body":{"controllers/CatsController.html":{},"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{},"classes/SettingService.html":{}}}],["pretty",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["primarykey",{"_index":1406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["private",{"_index":21,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"injectables/CatsService.html":{},"injectables/DrizzleService.html":{},"classes/ExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerService.html":{},"injectables/RedisRepository.html":{},"injectables/TasksService.html":{},"injectables/ValidationPipe.html":{}}}],["privatekey",{"_index":1121,"title":{},"body":{"classes/SettingService.html":{}}}],["privatekeypath",{"_index":1123,"title":{},"body":{"classes/SettingService.html":{}}}],["process.env.node_env",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.redis_host",{"_index":1449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.redis_port",{"_index":1450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env[envname",{"_index":939,"title":{},"body":{"classes/SettingService.html":{}}}],["process.env[envname].replace(/\\\\n/g",{"_index":940,"title":{},"body":{"classes/SettingService.html":{}}}],["process.env[key",{"_index":944,"title":{},"body":{"classes/SettingService.html":{}}}],["production",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerService.html":{}}}],["promise",{"_index":219,"title":{},"body":{"controllers/CatsController.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":20,"title":{"properties.html":{}},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"interfaces/Cat.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"interfaces/DatabaseError.html":{},"interfaces/DatabaseOptions.html":{},"classes/DateScalar.html":{},"injectables/DrizzleService.html":{},"interfaces/EnvironmentVariables.html":{},"classes/ExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAwsConfig.html":{},"interfaces/ISwaggerConfigInterface.html":{},"injectables/LoggerService.html":{},"classes/NewRecipeInput.html":{},"classes/PaginationParamsDto.html":{},"classes/QueryFailedFilter.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"interfaces/Response.html":{},"injectables/TasksService.html":{},"properties.html":{}}}],["protocol",{"_index":969,"title":{},"body":{"classes/SettingService.html":{}}}],["provide",{"_index":273,"title":{},"body":{"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":614,"title":{},"body":{"injectables/LoggerService.html":{}}}],["providers",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EventsModule.html":{},"modules/RecipesModule.html":{},"modules/RedisModule.html":{},"modules/SharedModule.html":{},"modules/TasksModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["public",{"_index":359,"title":{},"body":{"injectables/DrizzleService.html":{},"classes/ExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"classes/SettingService.html":{}}}],["publickey",{"_index":1122,"title":{},"body":{"classes/SettingService.html":{}}}],["publickeypath",{"_index":1129,"title":{},"body":{"classes/SettingService.html":{}}}],["publicurl",{"_index":531,"title":{},"body":{"interfaces/IAwsConfig.html":{},"classes/SettingService.html":{}}}],["pubsub",{"_index":741,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["pubsub.publish",{"_index":777,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["pubsub.subscribe('recipeadded",{"_index":782,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["purposes",{"_index":795,"title":{},"body":{"injectables/RecipesService.html":{}}}],["put",{"_index":789,"title":{},"body":{"injectables/RecipesService.html":{}}}],["query",{"_index":758,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["query(returns",{"_index":746,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["queryfailedfilter",{"_index":687,"title":{"classes/QueryFailedFilter.html":{}},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["r",{"_index":504,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["r.message",{"_index":506,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ratelimit",{"_index":880,"title":{},"body":{"classes/SettingService.html":{}}}],["readonly",{"_index":203,"title":{},"body":{"interfaces/Cat.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"injectables/DrizzleService.html":{},"classes/ExceptionsFilter.html":{},"injectables/HttpConfigService.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerService.html":{},"classes/RecipesResolver.html":{},"injectables/RedisRepository.html":{},"guards/RolesGuard.html":{},"injectables/TasksService.html":{}}}],["real",{"_index":790,"title":{},"body":{"injectables/RecipesService.html":{}}}],["received",{"_index":77,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["recipe",{"_index":703,"title":{"classes/Recipe.html":{}},"body":{"classes/Recipe.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"coverage.html":{}}}],["recipe(@args('id",{"_index":766,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["recipe(id",{"_index":745,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["recipe.input",{"_index":762,"title":{},"body":{"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{}}}],["recipe.input.ts",{"_index":639,"title":{},"body":{"classes/NewRecipeInput.html":{},"coverage.html":{}}}],["recipe.input.ts:13",{"_index":644,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["recipe.input.ts:16",{"_index":646,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["recipe.input.ts:8",{"_index":648,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["recipeadded",{"_index":735,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["recipeadded(@context('pubsub",{"_index":781,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["recipeadded(pubsub",{"_index":748,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["recipes",{"_index":736,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["recipes(@args",{"_index":770,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["recipes(recipesargs",{"_index":751,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["recipes.resolver",{"_index":731,"title":{},"body":{"modules/RecipesModule.html":{}}}],["recipes.service",{"_index":732,"title":{},"body":{"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{}}}],["recipes/recipes.module",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["recipesargs",{"_index":712,"title":{"classes/RecipesArgs.html":{}},"body":{"classes/RecipesArgs.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"coverage.html":{}}}],["recipesmodule",{"_index":111,"title":{"modules/RecipesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RecipesModule.html":{},"modules.html":{},"overview.html":{}}}],["recipesresolver",{"_index":730,"title":{"classes/RecipesResolver.html":{}},"body":{"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"coverage.html":{}}}],["recipesservice",{"_index":727,"title":{"injectables/RecipesService.html":{}},"body":{"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"coverage.html":{},"overview.html":{}}}],["record",{"_index":296,"title":{},"body":{"interfaces/DatabaseError.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["record.ts",{"_index":1218,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["recordsql",{"_index":1052,"title":{},"body":{"classes/SettingService.html":{}}}],["redis",{"_index":814,"title":{},"body":{"injectables/RedisRepository.html":{},"classes/SettingService.html":{},"miscellaneous/variables.html":{}}}],["redis.client.factory",{"_index":808,"title":{},"body":{"modules/RedisModule.html":{}}}],["redis.repository",{"_index":806,"title":{},"body":{"modules/RedisModule.html":{}}}],["redis.repository.interface",{"_index":829,"title":{},"body":{"injectables/RedisRepository.html":{}}}],["redisclient",{"_index":816,"title":{},"body":{"injectables/RedisRepository.html":{},"miscellaneous/variables.html":{}}}],["redisclientfactory",{"_index":807,"title":{},"body":{"modules/RedisModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["redisinstance",{"_index":1448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redisinstance.on('error",{"_index":1452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redismodule",{"_index":112,"title":{"modules/RedisModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"modules.html":{},"overview.html":{}}}],["redisrepository",{"_index":804,"title":{"injectables/RedisRepository.html":{}},"body":{"modules/RedisModule.html":{},"injectables/RedisRepository.html":{},"coverage.html":{},"overview.html":{}}}],["redisrepositoryinterface",{"_index":828,"title":{"interfaces/RedisRepositoryInterface.html":{}},"body":{"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{},"coverage.html":{}}}],["references",{"_index":1381,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":1299,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":483,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{},"guards/RolesGuard.html":{}}}],["refreshtokensecret",{"_index":1140,"title":{},"body":{"classes/SettingService.html":{}}}],["relationname",{"_index":1419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["relations",{"_index":1409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["relations(articles",{"_index":1384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["relations(categories",{"_index":1416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["relevant",{"_index":1439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remote",{"_index":1338,"title":{},"body":{"index.html":{}}}],["remove",{"_index":785,"title":{},"body":{"injectables/RecipesService.html":{}}}],["remove(id",{"_index":800,"title":{},"body":{"injectables/RecipesService.html":{}}}],["removerecipe",{"_index":737,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["removerecipe(@args('id",{"_index":779,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["removerecipe(id",{"_index":753,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["replace",{"_index":931,"title":{},"body":{"classes/SettingService.html":{}}}],["repository",{"_index":1360,"title":{},"body":{"properties.html":{}}}],["req",{"_index":426,"title":{},"body":{"classes/ExceptionsFilter.html":{},"injectables/LoggerMiddleware.html":{}}}],["req.body",{"_index":435,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["req.method",{"_index":433,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["req.originalurl",{"_index":434,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["request",{"_index":451,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"injectables/LoggerService.html":{},"guards/RolesGuard.html":{}}}],["request.body",{"_index":623,"title":{},"body":{"injectables/LoggerService.html":{}}}],["request.filter.ts",{"_index":481,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["request.filter.ts:10",{"_index":486,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.filter.ts:11",{"_index":487,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.filter.ts:13",{"_index":489,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.filter.ts:25",{"_index":492,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.headers",{"_index":622,"title":{},"body":{"injectables/LoggerService.html":{}}}],["request.user",{"_index":863,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":562,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["reset",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/DatabaseModule.html":{},"modules/RecipesModule.html":{},"modules/RedisModule.html":{},"modules/SharedModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["resolvepromisesinterceptor",{"_index":842,"title":{"injectables/ResolvePromisesInterceptor.html":{}},"body":{"injectables/ResolvePromisesInterceptor.html":{},"coverage.html":{}}}],["resolver",{"_index":759,"title":{},"body":{"classes/RecipesResolver.html":{},"injectables/ResolvePromisesInterceptor.html":{}}}],["resolver(of",{"_index":765,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["resolver.ts",{"_index":1215,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["resource",{"_index":1434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response",{"_index":494,"title":{"interfaces/Response.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"injectables/LoggerService.html":{},"classes/QueryFailedFilter.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["response.status(status).json",{"_index":699,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["response.status(statuscode).json(r",{"_index":508,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["responsemessage",{"_index":624,"title":{},"body":{"injectables/LoggerService.html":{}}}],["results",{"_index":86,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"modules/AppModule.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"interfaces/DatabaseError.html":{},"modules/DatabaseModule.html":{},"interfaces/DatabaseOptions.html":{},"classes/DateScalar.html":{},"injectables/DrizzleService.html":{},"interfaces/EnvironmentVariables.html":{},"modules/EventsModule.html":{},"injectables/ExceptionInterceptor.html":{},"classes/ExceptionsFilter.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpConfigService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAwsConfig.html":{},"interfaces/ISwaggerConfigInterface.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NewRecipeInput.html":{},"classes/PaginationParamsDto.html":{},"injectables/ParseIntPipe.html":{},"classes/QueryFailedFilter.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"modules/RedisModule.html":{},"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{},"injectables/ResolvePromisesInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/SettingService.html":{},"modules/SharedModule.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":83,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"interfaces/DatabaseError.html":{},"modules/DatabaseModule.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/ExceptionsFilter.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpConfigService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"injectables/RedisRepository.html":{},"injectables/ResolvePromisesInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/SettingService.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":46,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/DateScalar.html":{},"injectables/ExceptionInterceptor.html":{},"classes/ExceptionsFilter.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpConfigService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"classes/QueryFailedFilter.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{},"injectables/ResolvePromisesInterceptor.html":{},"guards/RolesGuard.html":{},"classes/SettingService.html":{},"injectables/TasksService.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":1301,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":868,"title":{},"body":{"guards/RolesGuard.html":{},"classes/SettingService.html":{}}}],["roles",{"_index":230,"title":{},"body":{"controllers/CatsController.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":245,"title":{},"body":{"controllers/CatsController.html":{}}}],["roles.find(item",{"_index":866,"title":{},"body":{"guards/RolesGuard.html":{}}}],["rolesguard",{"_index":232,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/CatsController.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rotate",{"_index":923,"title":{},"body":{"classes/SettingService.html":{}}}],["routes",{"_index":458,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["rs256.key",{"_index":1128,"title":{},"body":{"classes/SettingService.html":{}}}],["rs256.key.pub",{"_index":1130,"title":{},"body":{"classes/SettingService.html":{}}}],["running",{"_index":1336,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":398,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ResolvePromisesInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":400,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ResolvePromisesInterceptor.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["safe",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["sample",{"_index":1334,"title":{},"body":{"index.html":{}}}],["scalar",{"_index":338,"title":{},"body":{"classes/DateScalar.html":{}}}],["scalar('date",{"_index":350,"title":{},"body":{"classes/DateScalar.html":{}}}],["schema",{"_index":368,"title":{},"body":{"injectables/DrizzleService.html":{},"miscellaneous/functions.html":{}}}],["schema.gql",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["schema.ts",{"_index":1220,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["scheme",{"_index":537,"title":{},"body":{"interfaces/ISwaggerConfigInterface.html":{},"classes/SettingService.html":{}}}],["searchplaceholder",{"_index":1036,"title":{},"body":{"classes/SettingService.html":{}}}],["second",{"_index":1171,"title":{},"body":{"injectables/TasksService.html":{}}}],["seconds",{"_index":1173,"title":{},"body":{"injectables/TasksService.html":{}}}],["secret",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["secretaccesskey",{"_index":532,"title":{},"body":{"interfaces/IAwsConfig.html":{},"classes/SettingService.html":{}}}],["secretkey",{"_index":1137,"title":{},"body":{"classes/SettingService.html":{}}}],["semanticresourceattributes.service_name",{"_index":1435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["send",{"_index":80,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["sent",{"_index":353,"title":{},"body":{"classes/DateScalar.html":{}}}],["separate",{"_index":984,"title":{},"body":{"classes/SettingService.html":{}}}],["serial('id').primarykey",{"_index":1375,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serialize",{"_index":335,"title":{},"body":{"classes/DateScalar.html":{}}}],["serialize(value",{"_index":346,"title":{},"body":{"classes/DateScalar.html":{}}}],["server",{"_index":37,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["set",{"_index":811,"title":{},"body":{"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{}}}],["set(prefix",{"_index":823,"title":{},"body":{"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{}}}],["setclassmethodname('forroot",{"_index":1429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata('roles",{"_index":1455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting.service",{"_index":472,"title":{},"body":{"injectables/HttpConfigService.html":{},"injectables/LoggerService.html":{}}}],["settingservice",{"_index":151,"title":{"classes/SettingService.html":{}},"body":{"modules/AppModule.html":{},"injectables/HttpConfigService.html":{},"injectables/LoggerService.html":{},"classes/SettingService.html":{},"modules/SharedModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["settingservice.databasekey",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["settingservice.jwtconfig.secretkey",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["setupswagger",{"_index":1243,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setupswagger(app",{"_index":1326,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setwithexpiry",{"_index":812,"title":{},"body":{"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{}}}],["setwithexpiry(prefix",{"_index":825,"title":{},"body":{"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{}}}],["shared.module",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["shared/events/events.module",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["shared/services/setting.service",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"modules/SharedModule.html":{}}}],["shared/tasks/tasks.module",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["sharedmodule",{"_index":113,"title":{"modules/SharedModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SharedModule.html":{},"modules.html":{},"overview.html":{}}}],["simplespanprocessor(traceexporter",{"_index":1441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["skip",{"_index":714,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["slowsql",{"_index":1056,"title":{},"body":{"classes/SettingService.html":{}}}],["socket",{"_index":49,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["socket.io",{"_index":65,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"dependencies.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"modules/AppModule.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"modules/CoreModule.html":{},"classes/CreateCatDto.html":{},"interfaces/DatabaseError.html":{},"modules/DatabaseModule.html":{},"interfaces/DatabaseOptions.html":{},"classes/DateScalar.html":{},"injectables/DrizzleService.html":{},"interfaces/EnvironmentVariables.html":{},"modules/EventsModule.html":{},"injectables/ExceptionInterceptor.html":{},"classes/ExceptionsFilter.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpConfigService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAwsConfig.html":{},"interfaces/ISwaggerConfigInterface.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NewRecipeInput.html":{},"classes/PaginationParamsDto.html":{},"injectables/ParseIntPipe.html":{},"classes/QueryFailedFilter.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"modules/RecipesModule.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"modules/RedisModule.html":{},"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{},"injectables/ResolvePromisesInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/SettingService.html":{},"modules/SharedModule.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{}}}],["spanprocessor",{"_index":1440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../boilerplate.polyfill.ts",{"_index":1365,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../can",{"_index":1318,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../constraint",{"_index":1369,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database",{"_index":1367,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.module",{"_index":1368,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../databse",{"_index":1320,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../decorator.ts",{"_index":1316,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../deep",{"_index":1319,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../is",{"_index":1321,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1317,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../postgres",{"_index":1305,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../redis.client.factory.ts",{"_index":1372,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":1373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../setup.ts",{"_index":1322,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../shared.module.ts",{"_index":1371,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../tracing.ts",{"_index":1370,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../upper",{"_index":1323,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.gateway.ts",{"_index":6,"title":{},"body":{"classes/AppGateway.html":{},"coverage.html":{}}}],["src/app.gateway.ts:16",{"_index":36,"title":{},"body":{"classes/AppGateway.html":{}}}],["src/app.gateway.ts:17",{"_index":40,"title":{},"body":{"classes/AppGateway.html":{}}}],["src/app.gateway.ts:19",{"_index":42,"title":{},"body":{"classes/AppGateway.html":{}}}],["src/app.gateway.ts:23",{"_index":51,"title":{},"body":{"classes/AppGateway.html":{}}}],["src/app.gateway.ts:27",{"_index":54,"title":{},"body":{"classes/AppGateway.html":{}}}],["src/app.gateway.ts:32",{"_index":58,"title":{},"body":{"classes/AppGateway.html":{}}}],["src/app.module.ts",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["src/boilerplate.polyfill.ts",{"_index":1197,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/cats/cats.controller.ts",{"_index":206,"title":{},"body":{"controllers/CatsController.html":{},"coverage.html":{}}}],["src/cats/cats.controller.ts:17",{"_index":216,"title":{},"body":{"controllers/CatsController.html":{}}}],["src/cats/cats.controller.ts:23",{"_index":218,"title":{},"body":{"controllers/CatsController.html":{}}}],["src/cats/cats.controller.ts:28",{"_index":222,"title":{},"body":{"controllers/CatsController.html":{}}}],["src/cats/cats.module.ts",{"_index":254,"title":{},"body":{"modules/CatsModule.html":{}}}],["src/cats/cats.service.ts",{"_index":259,"title":{},"body":{"injectables/CatsService.html":{},"coverage.html":{}}}],["src/cats/cats.service.ts:12",{"_index":262,"title":{},"body":{"injectables/CatsService.html":{}}}],["src/cats/cats.service.ts:6",{"_index":263,"title":{},"body":{"injectables/CatsService.html":{}}}],["src/cats/cats.service.ts:8",{"_index":261,"title":{},"body":{"injectables/CatsService.html":{}}}],["src/cats/dto/create",{"_index":275,"title":{},"body":{"classes/CreateCatDto.html":{},"coverage.html":{}}}],["src/cats/interfaces/cat.interface.ts",{"_index":198,"title":{},"body":{"interfaces/Cat.html":{},"coverage.html":{}}}],["src/common/decorators/roles.decorator.ts",{"_index":1201,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/directives/upper",{"_index":1203,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/filters/bad",{"_index":480,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/common/filters/constraint",{"_index":1207,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/filters/exceptions.filter.ts",{"_index":409,"title":{},"body":{"classes/ExceptionsFilter.html":{},"coverage.html":{}}}],["src/common/filters/exceptions.filter.ts:37",{"_index":417,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["src/common/filters/exceptions.filter.ts:7",{"_index":412,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["src/common/filters/exceptions.filter.ts:9",{"_index":415,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["src/common/filters/query",{"_index":688,"title":{},"body":{"classes/QueryFailedFilter.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts",{"_index":855,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/common/guards/roles.guard.ts:5",{"_index":857,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/guards/roles.guard.ts:8",{"_index":859,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/common/interceptors/exception.interceptor.ts",{"_index":385,"title":{},"body":{"injectables/ExceptionInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/exception.interceptor.ts:14",{"_index":391,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["src/common/interceptors/serializer.interceptor.ts",{"_index":843,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/serializer.interceptor.ts:13",{"_index":844,"title":{},"body":{"injectables/ResolvePromisesInterceptor.html":{}}}],["src/common/middleware/logger.middleware.ts",{"_index":560,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/middleware/logger.middleware.ts:5",{"_index":563,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/common/pipes/parse",{"_index":673,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["src/common/pipes/validation.pipe.ts",{"_index":1177,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/common/pipes/validation.pipe.ts:13",{"_index":1182,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/common/pipes/validation.pipe.ts:26",{"_index":1180,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/common/scalars/date.scalar.ts",{"_index":331,"title":{},"body":{"classes/DateScalar.html":{},"coverage.html":{}}}],["src/common/scalars/date.scalar.ts:12",{"_index":347,"title":{},"body":{"classes/DateScalar.html":{}}}],["src/common/scalars/date.scalar.ts:16",{"_index":342,"title":{},"body":{"classes/DateScalar.html":{}}}],["src/common/scalars/date.scalar.ts:6",{"_index":339,"title":{},"body":{"classes/DateScalar.html":{}}}],["src/common/scalars/date.scalar.ts:8",{"_index":345,"title":{},"body":{"classes/DateScalar.html":{}}}],["src/common/utils/can",{"_index":1211,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/utils/deep",{"_index":1214,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/utils/environment",{"_index":373,"title":{},"body":{"interfaces/EnvironmentVariables.html":{},"coverage.html":{}}}],["src/common/utils/is",{"_index":1217,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/utils/pagination",{"_index":658,"title":{},"body":{"classes/PaginationParamsDto.html":{},"coverage.html":{}}}],["src/core/core.module.ts",{"_index":266,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/core/database/database",{"_index":328,"title":{},"body":{"interfaces/DatabaseOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/database/database.module",{"_index":1228,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/database/database.module.ts",{"_index":308,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/core/database/databse",{"_index":284,"title":{},"body":{"interfaces/DatabaseError.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/database/drizzle.service.ts",{"_index":358,"title":{},"body":{"injectables/DrizzleService.html":{},"coverage.html":{}}}],["src/core/database/drizzle.service.ts:9",{"_index":363,"title":{},"body":{"injectables/DrizzleService.html":{}}}],["src/core/database/postgres",{"_index":1231,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/interceptors/http",{"_index":446,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/logging.interceptor.ts",{"_index":628,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/logging.interceptor.ts:12",{"_index":629,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/core/interceptors/transform.interceptor.ts",{"_index":850,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/transform.interceptor.ts:18",{"_index":1175,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/core/interfaces/aws.interface.ts",{"_index":528,"title":{},"body":{"interfaces/IAwsConfig.html":{},"coverage.html":{}}}],["src/core/interfaces/swagger.interface.ts",{"_index":536,"title":{},"body":{"interfaces/ISwaggerConfigInterface.html":{},"coverage.html":{}}}],["src/core/redis/redis.client.factory.ts",{"_index":1234,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/redis/redis.module.ts",{"_index":805,"title":{},"body":{"modules/RedisModule.html":{}}}],["src/core/redis/redis.repository.interface.ts",{"_index":837,"title":{},"body":{"interfaces/RedisRepositoryInterface.html":{},"coverage.html":{}}}],["src/core/redis/redis.repository.interface.ts:2",{"_index":839,"title":{},"body":{"interfaces/RedisRepositoryInterface.html":{}}}],["src/core/redis/redis.repository.interface.ts:3",{"_index":840,"title":{},"body":{"interfaces/RedisRepositoryInterface.html":{}}}],["src/core/redis/redis.repository.interface.ts:4",{"_index":838,"title":{},"body":{"interfaces/RedisRepositoryInterface.html":{}}}],["src/core/redis/redis.repository.interface.ts:5",{"_index":841,"title":{},"body":{"interfaces/RedisRepositoryInterface.html":{}}}],["src/core/redis/redis.repository.ts",{"_index":809,"title":{},"body":{"injectables/RedisRepository.html":{},"coverage.html":{}}}],["src/core/redis/redis.repository.ts:13",{"_index":821,"title":{},"body":{"injectables/RedisRepository.html":{}}}],["src/core/redis/redis.repository.ts:17",{"_index":824,"title":{},"body":{"injectables/RedisRepository.html":{}}}],["src/core/redis/redis.repository.ts:21",{"_index":819,"title":{},"body":{"injectables/RedisRepository.html":{}}}],["src/core/redis/redis.repository.ts:25",{"_index":827,"title":{},"body":{"injectables/RedisRepository.html":{}}}],["src/core/redis/redis.repository.ts:6",{"_index":815,"title":{},"body":{"injectables/RedisRepository.html":{}}}],["src/core/redis/redis.repository.ts:9",{"_index":822,"title":{},"body":{"injectables/RedisRepository.html":{}}}],["src/main.ts",{"_index":1236,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/recipes/dto/new",{"_index":638,"title":{},"body":{"classes/NewRecipeInput.html":{},"coverage.html":{}}}],["src/recipes/dto/recipes.args.ts",{"_index":713,"title":{},"body":{"classes/RecipesArgs.html":{},"coverage.html":{}}}],["src/recipes/dto/recipes.args.ts:13",{"_index":720,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["src/recipes/dto/recipes.args.ts:8",{"_index":717,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["src/recipes/models/recipe.model.ts",{"_index":704,"title":{},"body":{"classes/Recipe.html":{},"coverage.html":{}}}],["src/recipes/models/recipe.model.ts:12",{"_index":707,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipes/models/recipe.model.ts:15",{"_index":706,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipes/models/recipe.model.ts:18",{"_index":709,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipes/models/recipe.model.ts:6",{"_index":708,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipes/models/recipe.model.ts:9",{"_index":710,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipes/recipes.module.ts",{"_index":728,"title":{},"body":{"modules/RecipesModule.html":{}}}],["src/recipes/recipes.resolver.ts",{"_index":733,"title":{},"body":{"classes/RecipesResolver.html":{},"coverage.html":{}}}],["src/recipes/recipes.resolver.ts:17",{"_index":739,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["src/recipes/recipes.resolver.ts:21",{"_index":747,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["src/recipes/recipes.resolver.ts:30",{"_index":752,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["src/recipes/recipes.resolver.ts:35",{"_index":743,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["src/recipes/recipes.resolver.ts:48",{"_index":755,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["src/recipes/recipes.resolver.ts:53",{"_index":750,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["src/recipes/recipes.service.ts",{"_index":783,"title":{},"body":{"injectables/RecipesService.html":{},"coverage.html":{}}}],["src/recipes/recipes.service.ts:14",{"_index":787,"title":{},"body":{"injectables/RecipesService.html":{}}}],["src/recipes/recipes.service.ts:18",{"_index":799,"title":{},"body":{"injectables/RecipesService.html":{}}}],["src/recipes/recipes.service.ts:22",{"_index":797,"title":{},"body":{"injectables/RecipesService.html":{}}}],["src/recipes/recipes.service.ts:26",{"_index":801,"title":{},"body":{"injectables/RecipesService.html":{}}}],["src/shared.module.ts",{"_index":1148,"title":{},"body":{"modules/SharedModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared/events/events.gateway.ts",{"_index":89,"title":{},"body":{"classes/AppGateway-1.html":{},"coverage.html":{}}}],["src/shared/events/events.gateway.ts:16",{"_index":90,"title":{},"body":{"classes/AppGateway-1.html":{}}}],["src/shared/events/events.gateway.ts:17",{"_index":91,"title":{},"body":{"classes/AppGateway-1.html":{}}}],["src/shared/events/events.gateway.ts:19",{"_index":92,"title":{},"body":{"classes/AppGateway-1.html":{}}}],["src/shared/events/events.gateway.ts:23",{"_index":93,"title":{},"body":{"classes/AppGateway-1.html":{}}}],["src/shared/events/events.gateway.ts:27",{"_index":94,"title":{},"body":{"classes/AppGateway-1.html":{}}}],["src/shared/events/events.gateway.ts:32",{"_index":95,"title":{},"body":{"classes/AppGateway-1.html":{}}}],["src/shared/events/events.module.ts",{"_index":382,"title":{},"body":{"modules/EventsModule.html":{}}}],["src/shared/services/http.service.ts",{"_index":463,"title":{},"body":{"injectables/HttpConfigService.html":{},"coverage.html":{}}}],["src/shared/services/http.service.ts:10",{"_index":468,"title":{},"body":{"injectables/HttpConfigService.html":{}}}],["src/shared/services/http.service.ts:7",{"_index":466,"title":{},"body":{"injectables/HttpConfigService.html":{}}}],["src/shared/services/jwt.service.ts",{"_index":543,"title":{},"body":{"injectables/JwtUtilService.html":{},"coverage.html":{}}}],["src/shared/services/jwt.service.ts:5",{"_index":547,"title":{},"body":{"injectables/JwtUtilService.html":{}}}],["src/shared/services/jwt.service.ts:8",{"_index":549,"title":{},"body":{"injectables/JwtUtilService.html":{}}}],["src/shared/services/logger.service.ts",{"_index":567,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{}}}],["src/shared/services/logger.service.ts:10",{"_index":575,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/shared/services/logger.service.ts:22",{"_index":590,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/shared/services/logger.service.ts:25",{"_index":588,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/shared/services/logger.service.ts:28",{"_index":578,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/shared/services/logger.service.ts:31",{"_index":581,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/shared/services/logger.service.ts:40",{"_index":586,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/shared/services/logger.service.ts:60",{"_index":592,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/shared/services/setting.service.ts",{"_index":870,"title":{},"body":{"classes/SettingService.html":{},"coverage.html":{}}}],["src/shared/services/setting.service.ts:11",{"_index":885,"title":{},"body":{"classes/SettingService.html":{}}}],["src/shared/services/setting.service.ts:141",{"_index":903,"title":{},"body":{"classes/SettingService.html":{}}}],["src/shared/services/setting.service.ts:163",{"_index":905,"title":{},"body":{"classes/SettingService.html":{}}}],["src/shared/services/setting.service.ts:190",{"_index":907,"title":{},"body":{"classes/SettingService.html":{}}}],["src/shared/services/setting.service.ts:209",{"_index":909,"title":{},"body":{"classes/SettingService.html":{}}}],["src/shared/services/setting.service.ts:220",{"_index":911,"title":{},"body":{"classes/SettingService.html":{}}}],["src/shared/services/setting.service.ts:229",{"_index":913,"title":{},"body":{"classes/SettingService.html":{}}}],["src/shared/services/setting.service.ts:238",{"_index":915,"title":{},"body":{"classes/SettingService.html":{}}}],["src/shared/services/setting.service.ts:248",{"_index":917,"title":{},"body":{"classes/SettingService.html":{}}}],["src/shared/services/setting.service.ts:26",{"_index":887,"title":{},"body":{"classes/SettingService.html":{}}}],["src/shared/services/setting.service.ts:261",{"_index":919,"title":{},"body":{"classes/SettingService.html":{}}}],["src/shared/services/setting.service.ts:30",{"_index":889,"title":{},"body":{"classes/SettingService.html":{}}}],["src/shared/services/setting.service.ts:34",{"_index":891,"title":{},"body":{"classes/SettingService.html":{}}}],["src/shared/services/setting.service.ts:50",{"_index":893,"title":{},"body":{"classes/SettingService.html":{}}}],["src/shared/services/setting.service.ts:61",{"_index":895,"title":{},"body":{"classes/SettingService.html":{}}}],["src/shared/services/setting.service.ts:65",{"_index":897,"title":{},"body":{"classes/SettingService.html":{}}}],["src/shared/services/setting.service.ts:69",{"_index":899,"title":{},"body":{"classes/SettingService.html":{}}}],["src/shared/services/setting.service.ts:96",{"_index":901,"title":{},"body":{"classes/SettingService.html":{}}}],["src/shared/swagger/decorator.ts",{"_index":1240,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/shared/swagger/setup.ts",{"_index":1242,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/shared/tasks/tasks.module.ts",{"_index":1153,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/shared/tasks/tasks.service.ts",{"_index":1155,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/shared/tasks/tasks.service.ts:14",{"_index":1162,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/shared/tasks/tasks.service.ts:19",{"_index":1164,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/shared/tasks/tasks.service.ts:6",{"_index":1166,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/shared/tasks/tasks.service.ts:9",{"_index":1160,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tracing.ts",{"_index":1244,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":1333,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1359,"title":{},"body":{"properties.html":{}}}],["statements",{"_index":1194,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1294,"title":{},"body":{"dependencies.html":{}}}],["status",{"_index":436,"title":{},"body":{"classes/ExceptionsFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["status_codes",{"_index":693,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["status_codes[status",{"_index":700,"title":{},"body":{"classes/QueryFailedFilter.html":{}}}],["statuscode",{"_index":503,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/QueryFailedFilter.html":{}}}],["strict",{"_index":534,"title":{},"body":{"interfaces/IAwsConfig.html":{},"interfaces/ISwaggerConfigInterface.html":{}}}],["string",{"_index":202,"title":{},"body":{"interfaces/Cat.html":{},"classes/CreateCatDto.html":{},"interfaces/DatabaseError.html":{},"interfaces/DatabaseOptions.html":{},"classes/DateScalar.html":{},"interfaces/EnvironmentVariables.html":{},"injectables/HttpCacheInterceptor.html":{},"interfaces/IAwsConfig.html":{},"interfaces/ISwaggerConfigInterface.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerService.html":{},"classes/NewRecipeInput.html":{},"injectables/ParseIntPipe.html":{},"classes/QueryFailedFilter.html":{},"classes/Recipe.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{},"classes/SettingService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["stringified",{"_index":612,"title":{},"body":{"injectables/LoggerService.html":{}}}],["strings",{"_index":935,"title":{},"body":{"classes/SettingService.html":{}}}],["subscribemessage",{"_index":61,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["subscribemessage('msgtoserver",{"_index":57,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["subscription",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"classes/RecipesResolver.html":{}}}],["subscription(returns",{"_index":749,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["super(loggerservice.name",{"_index":598,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.catch(exception",{"_index":431,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["support",{"_index":933,"title":{},"body":{"classes/SettingService.html":{},"modules.html":{}}}],["svg",{"_index":1349,"title":{},"body":{"modules.html":{}}}],["swaggerconfig",{"_index":883,"title":{},"body":{"classes/SettingService.html":{}}}],["syntax",{"_index":522,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["t",{"_index":851,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["table",{"_index":289,"title":{},"body":{"interfaces/DatabaseError.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1247,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":715,"title":{},"body":{"classes/RecipesArgs.html":{}}}],["talentclass",{"_index":1115,"title":{},"body":{"classes/SettingService.html":{}}}],["tap",{"_index":630,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["target",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["tasks.service",{"_index":1154,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasksmodule",{"_index":114,"title":{"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksservice",{"_index":1152,"title":{"injectables/TasksService.html":{}},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["tcpendpoint",{"_index":986,"title":{},"body":{"classes/SettingService.html":{}}}],["terminusmodule",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["text('content').notnull",{"_index":1378,"title":{},"body":{"miscellaneous/variables.html":{}}}],["text('email').unique().notnull",{"_index":1425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["text('name').notnull",{"_index":1426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["text('password').notnull",{"_index":1427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["text('title').notnull",{"_index":1376,"title":{},"body":{"miscellaneous/variables.html":{}}}],["think",{"_index":610,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this._logger",{"_index":602,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this._logger.debug('logging",{"_index":605,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this._logger.debug(message",{"_index":609,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this._logger.error",{"_index":613,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this._logger.error(`${meta.contextname",{"_index":626,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this._logger.info(message",{"_index":608,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this._logger.warn(message",{"_index":627,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.apiprefix",{"_index":957,"title":{},"body":{"classes/SettingService.html":{}}}],["this.app.name",{"_index":1078,"title":{},"body":{"classes/SettingService.html":{}}}],["this.cats",{"_index":265,"title":{},"body":{"injectables/CatsService.html":{}}}],["this.cats.push(cat",{"_index":264,"title":{},"body":{"injectables/CatsService.html":{}}}],["this.catsservice.create(createcatdto",{"_index":247,"title":{},"body":{"controllers/CatsController.html":{}}}],["this.catsservice.findall",{"_index":249,"title":{},"body":{"controllers/CatsController.html":{}}}],["this.db",{"_index":370,"title":{},"body":{"injectables/DrizzleService.html":{}}}],["this.get('api_prefix",{"_index":967,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('api_url",{"_index":954,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('api_version",{"_index":947,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('api_version_default",{"_index":949,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('api_version_key",{"_index":951,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('app_authorization_key",{"_index":962,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('app_default_lang",{"_index":959,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('app_name",{"_index":946,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('app_timezone",{"_index":965,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('aws_s3_access_key_id",{"_index":1103,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('aws_s3_secret_access_key",{"_index":1104,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('cors",{"_index":956,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('event_store_credentials_password",{"_index":976,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('event_store_credentials_username",{"_index":974,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('event_store_hostname",{"_index":987,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('event_store_protocol",{"_index":970,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('header_app_device",{"_index":1085,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('header_app_version",{"_index":1083,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('header_lang",{"_index":1089,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('header_timezone",{"_index":1087,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('header_user_id",{"_index":1091,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('header_user_uuid",{"_index":1093,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('jwt_expires_refresh_token",{"_index":1145,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('jwt_expires_token",{"_index":1143,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('jwt_refresh_token_secret",{"_index":1141,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('jwt_secret",{"_index":1138,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('jwt_token_secret_private_key",{"_index":1133,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('jwt_token_secret_public_key",{"_index":1136,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('log_driver",{"_index":1075,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('log_enabled",{"_index":1074,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('log_levels",{"_index":1064,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('log_levels').split",{"_index":1073,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('log_morgan_enabled",{"_index":1081,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('log_name",{"_index":1077,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('newrelic_app_name",{"_index":1044,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('newrelic_blacklist_routes",{"_index":1061,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('newrelic_blacklist_routes').split",{"_index":1062,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('newrelic_distribute_tracing_enabled",{"_index":1049,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('newrelic_enabled",{"_index":1042,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('newrelic_license_key",{"_index":1046,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('newrelic_log_level",{"_index":1047,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('newrelic_slow_sql_enabled",{"_index":1057,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('newrelic_slow_sql_max_samples",{"_index":1059,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('newrelic_transaction_enabled",{"_index":1051,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('newrelic_transaction_explain_threshold",{"_index":1055,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('newrelic_transaction_record_sql",{"_index":1053,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('node_env",{"_index":968,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('postgres_db",{"_index":1111,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('postgres_host",{"_index":1107,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('postgres_password",{"_index":1110,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('postgres_user",{"_index":1109,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('rate_limit_enabled",{"_index":1095,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('redis_connection_name",{"_index":1032,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('redis_enable_search_placeholder",{"_index":1040,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('redis_host",{"_index":1022,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('redis_password",{"_index":1026,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('redis_port",{"_index":1025,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('redis_prefix",{"_index":1029,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('redis_role",{"_index":1027,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('redis_ttl",{"_index":1033,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('redis_url",{"_index":1024,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('redis_user",{"_index":1028,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('s3_bucket_name",{"_index":1105,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('s3_public_url",{"_index":1106,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('swagger_description",{"_index":1116,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('swagger_path",{"_index":1112,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('swagger_scheme",{"_index":1120,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('swagger_title",{"_index":1114,"title":{},"body":{"classes/SettingService.html":{}}}],["this.get('swagger_version",{"_index":1118,"title":{},"body":{"classes/SettingService.html":{}}}],["this.gethttpstatus(exception",{"_index":437,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["this.getnumber('event_store_http_port",{"_index":991,"title":{},"body":{"classes/SettingService.html":{}}}],["this.getnumber('event_store_pooloptions_max",{"_index":995,"title":{},"body":{"classes/SettingService.html":{}}}],["this.getnumber('event_store_pooloptions_min",{"_index":994,"title":{},"body":{"classes/SettingService.html":{}}}],["this.getnumber('event_store_tcp_port",{"_index":988,"title":{},"body":{"classes/SettingService.html":{}}}],["this.getnumber('rate_limit_max",{"_index":1101,"title":{},"body":{"classes/SettingService.html":{}}}],["this.getnumber('rate_limit_windowms",{"_index":1097,"title":{},"body":{"classes/SettingService.html":{}}}],["this.getnumber('redis_cache_ttl_search_placeholder",{"_index":1037,"title":{},"body":{"classes/SettingService.html":{}}}],["this.httpadapterhost",{"_index":454,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["this.jwtservice.decode(token",{"_index":553,"title":{},"body":{"injectables/JwtUtilService.html":{}}}],["this.logger.debug('called",{"_index":1170,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.logger.error",{"_index":440,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["this.logger.error('unhandledexception",{"_index":443,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["this.logger.log('initialized",{"_index":71,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["this.logger.log(`client",{"_index":72,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["this.logger.log(`message",{"_index":76,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["this.logger.log(payload",{"_index":78,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["this.nodeenv",{"_index":941,"title":{},"body":{"classes/SettingService.html":{}}}],["this.recipesservice.create(newrecipedata",{"_index":774,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["this.recipesservice.findall(recipesargs",{"_index":771,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["this.recipesservice.findonebyid(id",{"_index":768,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["this.recipesservice.remove(id",{"_index":780,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["this.redisclient.del(`${prefix}:${key",{"_index":835,"title":{},"body":{"injectables/RedisRepository.html":{}}}],["this.redisclient.disconnect",{"_index":832,"title":{},"body":{"injectables/RedisRepository.html":{}}}],["this.redisclient.get(`${prefix}:${key",{"_index":833,"title":{},"body":{"injectables/RedisRepository.html":{}}}],["this.redisclient.set(`${prefix}:${key",{"_index":834,"title":{},"body":{"injectables/RedisRepository.html":{}}}],["this.reflector.get('roles",{"_index":861,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.tovalidate(metatype",{"_index":1185,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.validationfilter(children",{"_index":512,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["this.validationfilter(validationerrors",{"_index":507,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["this.wss.emit('msgtoclient",{"_index":79,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["throttlerconfig",{"_index":875,"title":{},"body":{"classes/SettingService.html":{}}}],["throttlermodule",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forroot",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["throw",{"_index":556,"title":{},"body":{"injectables/JwtUtilService.html":{},"injectables/ParseIntPipe.html":{},"classes/RecipesResolver.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["throwerror",{"_index":397,"title":{},"body":{"injectables/ExceptionInterceptor.html":{}}}],["timeout",{"_index":473,"title":{},"body":{"injectables/HttpConfigService.html":{},"injectables/TasksService.html":{}}}],["timeout(5000",{"_index":1163,"title":{},"body":{"injectables/TasksService.html":{}}}],["timestamp",{"_index":599,"title":{},"body":{"injectables/LoggerService.html":{}}}],["timezone",{"_index":964,"title":{},"body":{"classes/SettingService.html":{}}}],["title",{"_index":538,"title":{},"body":{"interfaces/ISwaggerConfigInterface.html":{},"classes/NewRecipeInput.html":{},"classes/Recipe.html":{},"classes/SettingService.html":{},"miscellaneous/variables.html":{}}}],["todo",{"_index":981,"title":{},"body":{"classes/SettingService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["token",{"_index":550,"title":{},"body":{"injectables/JwtUtilService.html":{}}}],["topic",{"_index":778,"title":{},"body":{"classes/RecipesResolver.html":{}}}],["tovalidate",{"_index":1178,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":1179,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["trace",{"_index":580,"title":{},"body":{"injectables/LoggerService.html":{},"dependencies.html":{}}}],["traceexporter",{"_index":1246,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["trackby",{"_index":448,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["trackby(context",{"_index":449,"title":{},"body":{"injectables/HttpCacheInterceptor.html":{}}}],["transaction.ts",{"_index":1232,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["transactiontracer",{"_index":1050,"title":{},"body":{"classes/SettingService.html":{}}}],["transform",{"_index":675,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["transform(value",{"_index":676,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":670,"title":{},"body":{"classes/PaginationParamsDto.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["transforminterceptor",{"_index":271,"title":{"injectables/TransformInterceptor.html":{}},"body":{"modules/CoreModule.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["translation",{"_index":524,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["transport",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["transports",{"_index":997,"title":{},"body":{"classes/SettingService.html":{}}}],["true",{"_index":67,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"modules/AppModule.html":{},"injectables/LoggerService.html":{},"classes/NewRecipeInput.html":{},"classes/Recipe.html":{},"injectables/RecipesService.html":{},"guards/RolesGuard.html":{},"classes/SettingService.html":{}}}],["true})@isoptional()@length(30",{"_index":642,"title":{},"body":{"classes/NewRecipeInput.html":{}}}],["try",{"_index":551,"title":{},"body":{"injectables/JwtUtilService.html":{}}}],["ts",{"_index":1070,"title":{},"body":{"classes/SettingService.html":{}}}],["ttl",{"_index":189,"title":{},"body":{"modules/AppModule.html":{},"classes/SettingService.html":{}}}],["type",{"_index":29,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"interfaces/Cat.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"interfaces/DatabaseError.html":{},"interfaces/DatabaseOptions.html":{},"classes/DateScalar.html":{},"injectables/DrizzleService.html":{},"interfaces/EnvironmentVariables.html":{},"injectables/ExceptionInterceptor.html":{},"classes/ExceptionsFilter.html":{},"injectables/HttpCacheInterceptor.html":{},"injectables/HttpConfigService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IAwsConfig.html":{},"interfaces/ISwaggerConfigInterface.html":{},"injectables/JwtUtilService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/NewRecipeInput.html":{},"classes/PaginationParamsDto.html":{},"injectables/ParseIntPipe.html":{},"classes/QueryFailedFilter.html":{},"classes/Recipe.html":{},"classes/RecipesArgs.html":{},"classes/RecipesResolver.html":{},"injectables/RecipesService.html":{},"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{},"injectables/ResolvePromisesInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/SettingService.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1363,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":554,"title":{},"body":{"injectables/JwtUtilService.html":{}}}],["types",{"_index":1189,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types.find(type",{"_index":1191,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types/pg",{"_index":1282,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1068,"title":{},"body":{"classes/SettingService.html":{},"properties.html":{}}}],["undefined",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"injectables/HttpCacheInterceptor.html":{},"classes/QueryFailedFilter.html":{}}}],["undefined.ts",{"_index":1212,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["uniqueviolation",{"_index":1307,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unknown",{"_index":299,"title":{},"body":{"interfaces/DatabaseError.html":{},"classes/ExceptionsFilter.html":{},"injectables/ParseIntPipe.html":{},"classes/RecipesResolver.html":{},"injectables/ValidationPipe.html":{}}}],["unprocessableentityexception",{"_index":488,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["update",{"_index":1437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["upperdirectivetransformer",{"_index":1205,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["upperdirectivetransformer(schema",{"_index":1329,"title":{},"body":{"miscellaneous/functions.html":{}}}],["uq_97672ac88f789774dd47f7c8be3",{"_index":1431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uris",{"_index":10,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["url",{"_index":953,"title":{},"body":{"classes/SettingService.html":{}}}],["use",{"_index":533,"title":{},"body":{"interfaces/IAwsConfig.html":{},"interfaces/ISwaggerConfigInterface.html":{},"injectables/LoggerMiddleware.html":{}}}],["use(req",{"_index":561,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["useclass",{"_index":274,"title":{},"body":{"modules/CoreModule.html":{}}}],["usefactory",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":228,"title":{},"body":{"controllers/CatsController.html":{}}}],["useguards(rolesguard",{"_index":242,"title":{},"body":{"controllers/CatsController.html":{}}}],["useinterceptors",{"_index":229,"title":{},"body":{"controllers/CatsController.html":{}}}],["useinterceptors(cacheinterceptor",{"_index":248,"title":{},"body":{"controllers/CatsController.html":{}}}],["useinterceptors(cacheinterceptor)@get",{"_index":217,"title":{},"body":{"controllers/CatsController.html":{}}}],["user",{"_index":322,"title":{},"body":{"modules/DatabaseModule.html":{},"interfaces/DatabaseOptions.html":{},"guards/RolesGuard.html":{},"classes/SettingService.html":{}}}],["user.roles",{"_index":869,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.roles.find(role",{"_index":865,"title":{},"body":{"guards/RolesGuard.html":{}}}],["userid",{"_index":1090,"title":{},"body":{"classes/SettingService.html":{}}}],["username",{"_index":973,"title":{},"body":{"classes/SettingService.html":{}}}],["users",{"_index":1227,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["users.id",{"_index":1382,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useruuid",{"_index":1092,"title":{},"body":{"classes/SettingService.html":{}}}],["uuid",{"_index":1094,"title":{},"body":{"classes/SettingService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["val",{"_index":682,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["validate",{"_index":1184,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(object",{"_index":1187,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validationerror",{"_index":491,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["validationerror.children",{"_index":510,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["validationerror.constraints",{"_index":515,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["validationerrors",{"_index":493,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["validationfilter",{"_index":484,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["validationfilter(validationerrors",{"_index":490,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["validationpipe",{"_index":1176,"title":{"injectables/ValidationPipe.html":{}},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validator",{"_index":282,"title":{},"body":{"classes/CreateCatDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/NewRecipeInput.html":{},"classes/PaginationParamsDto.html":{},"classes/RecipesArgs.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["value",{"_index":32,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"injectables/CatsService.html":{},"interfaces/DatabaseError.html":{},"classes/DateScalar.html":{},"classes/ExceptionsFilter.html":{},"classes/PaginationParamsDto.html":{},"injectables/ParseIntPipe.html":{},"classes/RecipesArgs.html":{},"injectables/RedisRepository.html":{},"interfaces/RedisRepositoryInterface.html":{},"injectables/TasksService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.gettime",{"_index":352,"title":{},"body":{"classes/DateScalar.html":{}}}],["valuenode",{"_index":341,"title":{},"body":{"classes/DateScalar.html":{}}}],["variable",{"_index":1202,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":428,"title":{"miscellaneous/variables.html":{}},"body":{"classes/ExceptionsFilter.html":{},"miscellaneous/variables.html":{}}}],["variables.ts.ts",{"_index":374,"title":{},"body":{"interfaces/EnvironmentVariables.html":{},"coverage.html":{}}}],["verbose",{"_index":1063,"title":{},"body":{"classes/SettingService.html":{}}}],["verboselogging",{"_index":978,"title":{},"body":{"classes/SettingService.html":{}}}],["version",{"_index":539,"title":{},"body":{"interfaces/ISwaggerConfigInterface.html":{},"classes/SettingService.html":{},"properties.html":{}}}],["versiondefault",{"_index":948,"title":{},"body":{"classes/SettingService.html":{}}}],["versionkey",{"_index":950,"title":{},"body":{"classes/SettingService.html":{}}}],["void",{"_index":47,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/ExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"classes/QueryFailedFilter.html":{},"injectables/RedisRepository.html":{},"injectables/TasksService.html":{}}}],["warn",{"_index":573,"title":{},"body":{"injectables/LoggerService.html":{},"classes/SettingService.html":{}}}],["warn(message",{"_index":591,"title":{},"body":{"injectables/LoggerService.html":{}}}],["websocketgateway",{"_index":62,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["websocketgateway({namespace",{"_index":68,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["websocketgateway({serveclient",{"_index":66,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["websocketserver",{"_index":39,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["windowms",{"_index":1096,"title":{},"body":{"classes/SettingService.html":{}}}],["winston",{"_index":594,"title":{},"body":{"injectables/LoggerService.html":{},"classes/SettingService.html":{}}}],["winston.createlogger(_configservice.winstonconfig",{"_index":603,"title":{},"body":{"injectables/LoggerService.html":{}}}],["winston.format.colorize",{"_index":1018,"title":{},"body":{"classes/SettingService.html":{}}}],["winston.format.combine",{"_index":1011,"title":{},"body":{"classes/SettingService.html":{}}}],["winston.format.json",{"_index":1013,"title":{},"body":{"classes/SettingService.html":{}}}],["winston.format.simple",{"_index":1020,"title":{},"body":{"classes/SettingService.html":{}}}],["winston.format.timestamp",{"_index":1012,"title":{},"body":{"classes/SettingService.html":{}}}],["winston.logger",{"_index":593,"title":{},"body":{"injectables/LoggerService.html":{}}}],["winston.loggeroptions",{"_index":996,"title":{},"body":{"classes/SettingService.html":{}}}],["winston.transports.console",{"_index":1016,"title":{},"body":{"classes/SettingService.html":{}}}],["winstonconfig",{"_index":877,"title":{},"body":{"classes/SettingService.html":{}}}],["ws",{"_index":1266,"title":{},"body":{"dependencies.html":{}}}],["wsresponse",{"_index":59,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["wss",{"_index":23,"title":{},"body":{"classes/AppGateway.html":{},"classes/AppGateway-1.html":{}}}],["x",{"_index":952,"title":{},"body":{"classes/SettingService.html":{}}}],["y0urs3cr3tz",{"_index":1139,"title":{},"body":{"classes/SettingService.html":{}}}],["yes",{"_index":582,"title":{},"body":{"injectables/LoggerService.html":{}}}],["yyyy",{"_index":1002,"title":{},"body":{"classes/SettingService.html":{}}}],["zippedarchive",{"_index":1005,"title":{},"body":{"classes/SettingService.html":{}}}],["zoom",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules/DatabaseModule.html":{},"modules/RecipesModule.html":{},"modules/RedisModule.html":{},"modules/SharedModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AppGateway.html":{"url":"classes/AppGateway.html","title":"class - AppGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.gateway.ts\n        \n\n\n            \n                Description\n            \n            \n                Example :Important URIs:\nhttps://docs.nestjs.com/websockets/gateways\nhttps://socket.io/docs/server-api/\nhttps://socket.io/docs/client-api/\n            \n\n\n            \n                Implements\n            \n            \n                        OnGatewayInit\n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                            \n                                    \n                                wss\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                afterInit\n                            \n                            \n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                    \n                                handleMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger('AppGateway')\n                    \n                \n                    \n                        \n                                Defined in src/app.gateway.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        wss\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app.gateway.ts:17\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        afterInit\n                        \n                    \n                \n            \n            \n                \nafterInit(server: Server)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.gateway.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                server\n                                            \n                                                        Server\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleConnection\n                        \n                    \n                \n            \n            \n                \nhandleConnection(client: Socket, ...args: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.gateway.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                args\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.gateway.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleMessage(client: Socket, payload: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('msgToServer')\n                \n            \n\n                    \n                        \n                            Defined in src/app.gateway.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         WsResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SubscribeMessage, WebSocketGateway, OnGatewayInit, WsResponse, WebSocketServer, OnGatewayConnection, OnGatewayDisconnect } from '@nestjs/websockets';\nimport { Logger } from '@nestjs/common';\nimport { Socket, Server } from 'socket.io';\n\n/**\n *\tImportant URIs:\n *\thttps://docs.nestjs.com/websockets/gateways\n *\thttps://socket.io/docs/server-api/\n *\thttps://socket.io/docs/client-api/\n */\n\n// @WebSocketGateway({serveClient: true})\n@WebSocketGateway({namespace: 'app'})\nexport class AppGateway implements OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect {\n\t\n\tprivate logger: Logger = new Logger('AppGateway');\n\t@WebSocketServer() wss: Server;\n\n\tafterInit(server: Server) {\n\t\tthis.logger.log('Initialized .....');\n\t}\n\n\thandleConnection(client: Socket, ...args: any[]) {\n\t\tthis.logger.log(`Client connected: ${client.id}`);\n\t}\n\n\thandleDisconnect(client: Socket) {\n\t\tthis.logger.log(`Client disconnected: ${client.id}`);\n\t}\n\n\t@SubscribeMessage('msgToServer')\n\thandleMessage(client: Socket, payload: any): WsResponse {\n\t\tthis.logger.log(`Message received for ${client.id}`);\n\t\tthis.logger.log(payload);\n\t\tthis.wss.emit('msgToClient', payload); // send data to every client\n\t\t// client.emit('messageToClient', payload); // send data to client socket only\n\t\treturn { event: 'msgToClient', data: payload }; // send data to client socket only\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AppGateway-1.html":{"url":"classes/AppGateway-1.html","title":"class - AppGateway-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/events/events.gateway.ts\n        \n\n\n            \n                Description\n            \n            \n                Example :Important URIs:\nhttps://docs.nestjs.com/websockets/gateways\nhttps://socket.io/docs/server-api/\nhttps://socket.io/docs/client-api/\n            \n\n\n            \n                Implements\n            \n            \n                        OnGatewayInit\n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                            \n                                    \n                                wss\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                afterInit\n                            \n                            \n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                    \n                                handleMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger('AppGateway')\n                    \n                \n                    \n                        \n                                Defined in src/shared/events/events.gateway.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        wss\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shared/events/events.gateway.ts:17\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        afterInit\n                        \n                    \n                \n            \n            \n                \nafterInit(server: Server)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/events/events.gateway.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                server\n                                            \n                                                        Server\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleConnection\n                        \n                    \n                \n            \n            \n                \nhandleConnection(client: Socket, ...args: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/events/events.gateway.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                args\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/events/events.gateway.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleMessage(client: Socket, payload: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('msgToServer')\n                \n            \n\n                    \n                        \n                            Defined in src/shared/events/events.gateway.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         WsResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SubscribeMessage, WebSocketGateway, OnGatewayInit, WsResponse, WebSocketServer, OnGatewayConnection, OnGatewayDisconnect } from '@nestjs/websockets';\nimport { Logger } from '@nestjs/common';\nimport { Socket, Server } from 'socket.io';\n\n/**\n *\tImportant URIs:\n *\thttps://docs.nestjs.com/websockets/gateways\n *\thttps://socket.io/docs/server-api/\n *\thttps://socket.io/docs/client-api/\n */\n\n// @WebSocketGateway({serveClient: true})\n@WebSocketGateway({namespace: 'app'})\nexport class AppGateway implements OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect {\n\t\n\tprivate logger: Logger = new Logger('AppGateway');\n\t@WebSocketServer() wss: Server;\n\n\tafterInit(server: Server) {\n\t\tthis.logger.log('Initialized .....');\n\t}\n\n\thandleConnection(client: Socket, ...args: any[]) {\n\t\tthis.logger.log(`Client connected: ${client.id}`);\n\t}\n\n\thandleDisconnect(client: Socket) {\n\t\tthis.logger.log(`Client disconnected: ${client.id}`);\n\t}\n\n\t@SubscribeMessage('msgToServer')\n\thandleMessage(client: Socket, payload: any): WsResponse {\n\t\tthis.logger.log(`Message received for ${client.id}`);\n\t\tthis.logger.log(payload);\n\t\tthis.wss.emit('msgToClient', payload); // send data to every client\n\t\t// client.emit('messageToClient', payload); // send data to client socket only\n\t\treturn { event: 'msgToClient', data: payload }; // send data to client socket only\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nCatsModule\n\nCatsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCatsModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEventsModule\n\nEventsModule\n\nAppModule -->\n\nEventsModule->AppModule\n\n\n\n\n\nRecipesModule\n\nRecipesModule\n\nAppModule -->\n\nRecipesModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CatsModule\n                        \n                        \n                            CoreModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EventsModule\n                        \n                        \n                            RecipesModule\n                        \n                        \n                            RedisModule\n                        \n                        \n                            SharedModule\n                        \n                        \n                            TasksModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // import { CacheModule } from '@nestjs/cache-manager';\nimport { join } from 'path';\nimport { Module } from '@nestjs/common';\nimport { LoggerModule } from 'nestjs-pino';\nimport { EventEmitterModule } from '@nestjs/event-emitter';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ClsModule } from 'nestjs-cls';\nimport { ThrottlerModule } from '@nestjs/throttler';\nimport { BullModule } from '@nestjs/bullmq';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { MercuriusDriver, MercuriusDriverConfig } from '@nestjs/mercurius';\nimport { DatabaseModule } from './core/database/database.module';\nimport { RedisModule } from './core/redis/redis.module';\nimport { SharedModule } from './shared.module';\nimport { CatsModule } from './cats/cats.module';\nimport { CoreModule } from './core/core.module';\nimport { SettingService } from './shared/services/setting.service';\nimport { TasksModule } from './shared/tasks/tasks.module';\nimport { EventsModule } from './shared/events/events.module';\nimport { RecipesModule } from './recipes/recipes.module';\n\n@Module({\n  imports: [\n    // TerminusModule,\n    RedisModule,\n    LoggerModule.forRoot({\n      pinoHttp: {\n        safe: true,\n        transport:\n          process.env.NODE_ENV !== 'production'\n            ? { target: 'pino-pretty' }\n            : undefined,\n      },\n    }),\n    JwtModule.registerAsync({\n      global: true,\n      useFactory: (settingService: SettingService) => ({\n        secret: settingService.jwtConfig.secretKey,\n      }),\n      inject: [SettingService],\n    }),\n    DatabaseModule.forRootAsync({\n      imports: [],\n      inject: [SettingService],\n      useFactory: (settingService: SettingService) => ({\n        ...settingService.databaseKey\n      }),\n    }),\n    GraphQLModule.forRoot({\n      driver: MercuriusDriver,\n      autoSchemaFile: 'schema.gql',\n      subscription: true,\n      graphiql: true,\n    }),\n    BullModule.forRoot({\n      connection: {\n        host: 'localhost',\n        port: 6379,\n      },\n    }),\n    // ClsModule.forRoot({\n    //   global: true,\n    //   middleware: {\n    //     mount: true,\n    //   },\n    // }),\n    ThrottlerModule.forRoot([{\n      ttl: 60000,\n      limit: 10,\n    }]),\n    EventEmitterModule.forRoot(),\n    SharedModule,\n    CoreModule,\n    CatsModule,\n    TasksModule,\n    EventsModule,\n    RecipesModule\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Cat.html":{"url":"interfaces/Cat.html","title":"interface - Cat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Cat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cats/interfaces/cat.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            age\n                                        \n                                \n                                \n                                        \n                                            breed\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        age\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        age:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        breed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        breed:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Cat {\n  readonly name: string;\n  readonly age: number;\n  readonly breed: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CatsController.html":{"url":"controllers/CatsController.html","title":"controller - CatsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CatsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cats/cats.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                cats\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCatDto: CreateCatDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Roles('admin')\n                \n            \n\n                    \n                        \n                            Defined in src/cats/cats.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCatDto\n                                            \n                                                            CreateCatDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(CacheInterceptor)@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/cats/cats.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/cats/cats.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { CacheInterceptor } from '@nestjs/cache-manager';\nimport { Body, Controller, Get, Param, Post, UseGuards, UseInterceptors } from '@nestjs/common';\nimport { Roles } from '../common/decorators/roles.decorator';\nimport { RolesGuard } from '../common/guards/roles.guard';\nimport { ParseIntPipe } from '../common/pipes/parse-int.pipe';\nimport { CatsService } from './cats.service';\nimport { CreateCatDto } from './dto/create-cat.dto';\nimport { Cat } from './interfaces/cat.interface';\n\n@UseGuards(RolesGuard)\n@Controller('cats')\nexport class CatsController {\n  constructor(private readonly catsService: CatsService) {}\n\n  @Post()\n  @Roles('admin')\n  async create(@Body() createCatDto: CreateCatDto) {\n    this.catsService.create(createCatDto);\n  }\n\n  @UseInterceptors(CacheInterceptor)\n  @Get()\n  async findAll(): Promise {\n    return this.catsService.findAll();\n  }\n\n  @Get(':id')\n  findOne(\n    @Param('id', new ParseIntPipe())\n    id: number,\n  ) {\n    // get by ID logic\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CatsModule.html":{"url":"modules/CatsModule.html","title":"module - CatsModule","body":"\n                   \n\n\n\n\n    Modules\n    CatsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CatsModule\n\n\n\ncluster_CatsModule_providers\n\n\n\n\nCatsService\n\nCatsService\n\n\n\nCatsModule\n\nCatsModule\n\nCatsModule -->\n\nCatsService->CatsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cats/cats.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CatsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CatsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        \nimport { CacheModule } from '@nestjs/cache-manager';\nimport { Module } from '@nestjs/common';\nimport { CatsController } from './cats.controller';\nimport { CatsService } from './cats.service';\n\n@Module({\n  imports: [CacheModule.register()],\n  controllers: [CatsController],\n  providers: [CatsService],\n})\nexport class CatsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CatsService.html":{"url":"injectables/CatsService.html","title":"injectable - CatsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CatsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cats/cats.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                cats\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(cat: Cat)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cats/cats.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                cat\n                                            \n                                                            Cat\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/cats/cats.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Cat[]\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cats\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Cat[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/cats/cats.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Cat } from './interfaces/cat.interface';\n\n@Injectable()\nexport class CatsService {\n  private readonly cats: Cat[] = [];\n\n  create(cat: Cat) {\n    this.cats.push(cat);\n  }\n\n  findAll(): Cat[] {\n    return this.cats;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/core.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n// import { APP_INTERCEPTOR } from '@nestjs/core';\n// import { LoggingInterceptor } from './interceptors/logging.interceptor';\n// import { TransformInterceptor } from './interceptors/transform.interceptor';\n\n@Module({\n  providers: [\n    // { provide: APP_INTERCEPTOR, useClass: TransformInterceptor },\n    // { provide: APP_INTERCEPTOR, useClass: LoggingInterceptor },\n  ],\n})\nexport class CoreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCatDto.html":{"url":"classes/CreateCatDto.html","title":"class - CreateCatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cats/dto/create-cat.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                age\n                            \n                            \n                                    \n                                    Readonly\n                                breed\n                            \n                            \n                                    \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cats/dto/create-cat.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        breed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cats/dto/create-cat.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/cats/dto/create-cat.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsString } from 'class-validator';\n\nexport class CreateCatDto {\n  @IsString()\n  readonly name: string;\n\n  @IsInt()\n  readonly age: number;\n\n  @IsString()\n  readonly breed: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatabaseError.html":{"url":"interfaces/DatabaseError.html","title":"interface - DatabaseError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DatabaseError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/database/databse-error.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            code\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            column\n                                        \n                                \n                                \n                                        \n                                            detail\n                                        \n                                \n                                \n                                        \n                                            table\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         PostgresErrorCode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PostgresErrorCode\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        column\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        column:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        detail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        detail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        table\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        table:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PostgresErrorCode } from './postgres-error-code.enum';\nimport { isRecord } from '@/common/utils/is-record';\n\nexport interface DatabaseError {\n  code: PostgresErrorCode;\n  detail: string;\n  table: string;\n  column?: string;\n}\n\nexport function isDatabaseError(value: unknown): value is DatabaseError {\n  if (!isRecord(value)) {\n    return false;\n  }\n  const { code, detail, table } = value;\n  return Boolean(code && detail && table);\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\ncluster_DatabaseModule_providers\n\n\n\n\nDrizzleService \n\nDrizzleService \n\n\n\nDatabaseModule\n\nDatabaseModule\n\nDrizzleService  -->\n\nDatabaseModule->DrizzleService \n\n\n\n\n\nDrizzleService\n\nDrizzleService\n\nDatabaseModule -->\n\nDrizzleService->DatabaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DrizzleService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DrizzleService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport {\n  ConfigurableDatabaseModule,\n  CONNECTION_POOL,\n  DATABASE_OPTIONS,\n} from './database.module-definition';\nimport { DatabaseOptions } from './database-options';\nimport { Pool } from 'pg';\nimport { DrizzleService } from './drizzle.service';\n\n@Global()\n@Module({\n  exports: [DrizzleService],\n  providers: [\n    DrizzleService,\n    {\n      provide: CONNECTION_POOL,\n      inject: [DATABASE_OPTIONS],\n      useFactory: (databaseOptions: DatabaseOptions) => {\n        return new Pool({\n          host: databaseOptions.host,\n          port: databaseOptions.port,\n          user: databaseOptions.user,\n          password: databaseOptions.password,\n          database: databaseOptions.database,\n        });\n      },\n    },\n  ],\n})\nexport class DatabaseModule extends ConfigurableDatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatabaseOptions.html":{"url":"interfaces/DatabaseOptions.html","title":"interface - DatabaseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DatabaseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/database/database-options.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            database\n                                        \n                                \n                                \n                                        \n                                            host\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            port\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        database\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        database:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        host:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface DatabaseOptions {\n  host: string;\n  port: number;\n  user: string;\n  password: string;\n  database: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DateScalar.html":{"url":"classes/DateScalar.html","title":"class - DateScalar","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DateScalar\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/scalars/date.scalar.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        CustomScalar\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                parseLiteral\n                            \n                            \n                                parseValue\n                            \n                            \n                                serialize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Date custom scalar type'\n                    \n                \n                    \n                        \n                                Defined in src/common/scalars/date.scalar.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        parseLiteral\n                        \n                    \n                \n            \n            \n                \nparseLiteral(ast: ValueNode)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/scalars/date.scalar.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ast\n                                            \n                                                        ValueNode\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Date\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseValue\n                        \n                    \n                \n            \n            \n                \nparseValue(value: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/scalars/date.scalar.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Date\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/scalars/date.scalar.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CustomScalar, Scalar } from '@nestjs/graphql';\nimport { Kind, ValueNode } from 'graphql';\n\n@Scalar('Date', type => Date)\nexport class DateScalar implements CustomScalar {\n  description = 'Date custom scalar type';\n\n  parseValue(value: number): Date {\n    return new Date(value); // value from the client\n  }\n\n  serialize(value: Date): number {\n    return value.getTime(); // value sent to the client\n  }\n\n  parseLiteral(ast: ValueNode): Date {\n    if (ast.kind === Kind.INT) {\n      return new Date(ast.value);\n    }\n    return null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DrizzleService.html":{"url":"injectables/DrizzleService.html","title":"injectable - DrizzleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DrizzleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/database/drizzle.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                db\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pool: Pool)\n                    \n                \n                        \n                            \n                                Defined in src/core/database/drizzle.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pool\n                                                  \n                                                        \n                                                                    Pool\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NodePgDatabase<>\n\n                    \n                \n                    \n                        \n                                Defined in src/core/database/drizzle.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { Pool } from 'pg';\nimport { CONNECTION_POOL } from './database.module-definition';\nimport { drizzle, NodePgDatabase } from 'drizzle-orm/node-postgres';\nimport { databaseSchema } from './database-schema';\n\n@Injectable()\nexport class DrizzleService {\n  public db: NodePgDatabase;\n  constructor(@Inject(CONNECTION_POOL) private readonly pool: Pool) {\n    this.db = drizzle(this.pool, { schema: databaseSchema });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EnvironmentVariables.html":{"url":"interfaces/EnvironmentVariables.html","title":"interface - EnvironmentVariables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EnvironmentVariables\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/utils/environment-variables.ts.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            JWT_EXPIRATION_TIME\n                                        \n                                \n                                \n                                        \n                                            JWT_SECRET\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_DB\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_HOST\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_PASSWORD\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_PORT\n                                        \n                                \n                                \n                                        \n                                            POSTGRES_USER\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        JWT_EXPIRATION_TIME\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        JWT_EXPIRATION_TIME:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        JWT_SECRET\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        JWT_SECRET:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_DB\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_DB:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_HOST\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_HOST:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_PASSWORD\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_PASSWORD:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_PORT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_PORT:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        POSTGRES_USER\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        POSTGRES_USER:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface EnvironmentVariables {\n    POSTGRES_HOST: string;\n    POSTGRES_PORT: number;\n    POSTGRES_USER: string;\n    POSTGRES_PASSWORD: string;\n    POSTGRES_DB: string;\n    JWT_SECRET: string;\n    JWT_EXPIRATION_TIME: number;\n  }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EventsModule.html":{"url":"modules/EventsModule.html","title":"module - EventsModule","body":"\n                   \n\n\n\n\n    Modules\n    EventsModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shared/events/events.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppGateway } from './events.gateway';\n\n@Module({\n  providers: [AppGateway],\n})\nexport class EventsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExceptionInterceptor.html":{"url":"injectables/ExceptionInterceptor.html","title":"injectable - ExceptionInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExceptionInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/exception.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/exception.interceptor.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class ExceptionInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next\n      .handle()\n      .pipe(\n        catchError(err =>\n          throwError(\n            () =>\n              new HttpException(\n                'Exception interceptor message',\n                HttpStatus.BAD_GATEWAY,\n              ),\n          ),\n        ),\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExceptionsFilter.html":{"url":"classes/ExceptionsFilter.html","title":"class - ExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/exceptions.filter.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                catch\n                            \n                            \n                                    Private\n                                getHttpStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger()\n                    \n                \n                    \n                        \n                                Defined in src/common/filters/exceptions.filter.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        catch\n                        \n                    \n                \n            \n            \n                \n                        \n                    catch(exception, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exceptions.filter.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getHttpStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHttpStatus(exception)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/exceptions.filter.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     HttpStatus\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, HttpException, HttpStatus, Logger } from '@nestjs/common';\nimport { BaseExceptionFilter } from '@nestjs/core';\n// import { GqlArgumentsHost, GqlContextType, GqlExceptionFilter } from '@nestjs/graphql';\n\n@Catch()\nexport class ExceptionsFilter extends BaseExceptionFilter /* implements GqlExceptionFilter*/ {\n    private readonly logger: Logger = new Logger();\n\n    public override catch(exception: unknown, host: ArgumentsHost): void {\n        let args: unknown;\n        // if (host.getType() === 'graphql') {\n        //   const gqlHost = GqlArgumentsHost.create(host);\n        //   const {\n        //     req: {\n        //       body: { operationName, variables },\n        //     },\n        //   } = gqlHost.getContext } } }>();\n        //   args = `${operationName} ${JSON.stringify(variables)}`;\n        // } else {\n        super.catch(exception, host);\n        // const req = host.switchToHttp().getRequest();\n        // req.method, req.originalUrl...\n        // args = req.body;\n        // }\n\n        const status = this.getHttpStatus(exception);\n        if (status === HttpStatus.INTERNAL_SERVER_ERROR) {\n            if (exception instanceof Error) {\n                this.logger.error({ err: exception, args });\n            } else {\n                // Error Notifications\n                this.logger.error('UnhandledException', exception);\n            }\n        }\n    }\n\n    private getHttpStatus(exception: unknown): HttpStatus {\n        return exception instanceof HttpException ? exception.getStatus() : HttpStatus.INTERNAL_SERVER_ERROR;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpCacheInterceptor.html":{"url":"injectables/HttpCacheInterceptor.html","title":"injectable - HttpCacheInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpCacheInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/http-cache.interceptor.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CacheInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                trackBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        trackBy\n                        \n                    \n                \n            \n            \n                \ntrackBy(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/interceptors/http-cache.interceptor.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CacheInterceptor } from '@nestjs/cache-manager';\nimport { ExecutionContext, Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class HttpCacheInterceptor extends CacheInterceptor {\n  trackBy(context: ExecutionContext): string | undefined {\n    const request = context.switchToHttp().getRequest();\n    const { httpAdapter } = this.httpAdapterHost;\n\n    const isGetRequest = httpAdapter.getRequestMethod(request) === 'GET';\n    const excludePaths = [\n      // Routes to be excluded\n    ];\n    if (\n      !isGetRequest ||\n      (isGetRequest &&\n        excludePaths.includes(httpAdapter.getRequestUrl(request)))\n    ) {\n      return undefined;\n    }\n    return httpAdapter.getRequestUrl(request);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HttpConfigService.html":{"url":"injectables/HttpConfigService.html","title":"injectable - HttpConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HttpConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/services/http.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createHttpOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: SettingService)\n                    \n                \n                        \n                            \n                                Defined in src/shared/services/http.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        SettingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createHttpOptions\n                        \n                    \n                \n            \n            \n                \ncreateHttpOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/services/http.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     HttpModuleOptions\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HttpModuleOptions, HttpModuleOptionsFactory } from '@nestjs/axios';\n\nimport { SettingService } from './setting.service';\n\n@Injectable()\nexport class HttpConfigService implements HttpModuleOptionsFactory {\n  constructor(private readonly configService: SettingService) {}\n\n  createHttpOptions(): HttpModuleOptions {\n    return {\n      timeout: Number(this.configService.get('HTTP_TIMEOUT') ?? 30000),\n      maxRedirects: Number(this.configService.get('HTTP_MAX_REDIRECTS') ?? 5),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/bad-request.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reflector\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                validationFilter\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/filters/bad-request.filter.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reflector\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Reflector\n\n                    \n                \n                    \n                        \n                                Defined in src/common/filters/bad-request.filter.ts:11\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: UnprocessableEntityException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/bad-request.filter.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        UnprocessableEntityException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        validationFilter\n                        \n                    \n                \n            \n            \n                \n                        \n                    validationFilter(validationErrors: ValidationError[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/bad-request.filter.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                validationErrors\n                                            \n                                                        ValidationError[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { ArgumentsHost, ExceptionFilter } from '@nestjs/common';\nimport { Catch, UnprocessableEntityException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport type { ValidationError } from 'class-validator';\nimport type { Response } from 'express';\nimport _ from 'lodash';\n\n@Catch(UnprocessableEntityException)\nexport class HttpExceptionFilter\n    implements ExceptionFilter {\n    constructor(public reflector: Reflector) { }\n\n    catch(exception: UnprocessableEntityException, host: ArgumentsHost): void {\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const statusCode = exception.getStatus();\n        const r = exception.getResponse() as { message: ValidationError[] };\n\n        const validationErrors = r.message;\n        this.validationFilter(validationErrors);\n\n        response.status(statusCode).json(r);\n    }\n\n    private validationFilter(validationErrors: ValidationError[]): void {\n        for (const validationError of validationErrors) {\n            const children = validationError.children;\n\n            if (children && !_.isEmpty(children)) {\n                this.validationFilter(children);\n\n                return;\n            }\n\n            delete validationError.children;\n\n            const constraints = validationError.constraints;\n\n            if (!constraints) {\n                return;\n            }\n\n            for (const [constraintKey, constraint] of Object.entries(constraints)) {\n                // convert default messages\n                if (!constraint) {\n                    // convert error message to error.fields.{key} syntax for i18n translation\n                    constraints[constraintKey] = `error.fields.${_.snakeCase(\n                        constraintKey,\n                    )}`;\n                }\n            }\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAwsConfig.html":{"url":"interfaces/IAwsConfig.html","title":"interface - IAwsConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAwsConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/aws.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accessKeyId\n                                        \n                                \n                                \n                                        \n                                            bucketName\n                                        \n                                \n                                \n                                        \n                                            publicUrl\n                                        \n                                \n                                \n                                        \n                                            secretAccessKey\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessKeyId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessKeyId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bucketName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bucketName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publicUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        publicUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secretAccessKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secretAccessKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface IAwsConfig {\n  accessKeyId: string;\n  secretAccessKey: string;\n  bucketName: string;\n  publicUrl: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISwaggerConfigInterface.html":{"url":"interfaces/ISwaggerConfigInterface.html","title":"interface - ISwaggerConfigInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISwaggerConfigInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interfaces/swagger.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            description\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            scheme\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scheme\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scheme:     \"http\" | \"https\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"http\" | \"https\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        'use strict';\n\nexport interface ISwaggerConfigInterface {\n  path?: string;\n  title: string;\n  description?: string;\n  version: string;\n  scheme: 'http' | 'https';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtUtilService.html":{"url":"injectables/JwtUtilService.html","title":"injectable - JwtUtilService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtUtilService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/services/jwt.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                extractPayloadFromToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/shared/services/jwt.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        extractPayloadFromToken\n                        \n                    \n                \n            \n            \n                \nextractPayloadFromToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/services/jwt.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class JwtUtilService {\n  constructor(private readonly jwtService: JwtService) {}\n\n  extractPayloadFromToken(token: string): any {\n    try {\n      const decodedToken = this.jwtService.decode(token);\n      if (decodedToken && typeof decodedToken === 'object') {\n        return decodedToken;\n      }\n    } catch (error) {\n      throw new Error('Failed to extract');\n    }\n    return null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middleware/logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: any, res: any, next: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/middleware/logger.middleware.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  use(req: any, res: any, next: () => void) {\n    console.log(`Request...`);\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerService.html":{"url":"injectables/LoggerService.html","title":"injectable - LoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/services/logger.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ConsoleLogger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                _logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                formattedError\n                            \n                            \n                                info\n                            \n                            \n                                log\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(_configService: SettingService)\n                    \n                \n                        \n                            \n                                Defined in src/shared/services/logger.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        _configService\n                                                  \n                                                        \n                                                                        SettingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/services/logger.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: string, trace?: any, context?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/services/logger.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                trace\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formattedError\n                        \n                    \n                \n            \n            \n                \nformattedError(message: string, error, meta: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/services/logger.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                meta\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        info\n                        \n                    \n                \n            \n            \n                \ninfo(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/services/logger.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/services/logger.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/services/logger.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     winston.Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/shared/services/logger.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConsoleLogger, Injectable } from '@nestjs/common';\nimport * as winston from 'winston';\n\nimport { SettingService } from './setting.service';\nimport { HttpArgumentsHost } from '@nestjs/common/interfaces/features/arguments-host.interface';\nimport { Request, Response } from 'express';\n\n@Injectable()\nexport class LoggerService extends ConsoleLogger {\n  private readonly _logger: winston.Logger;\n\n  constructor(private readonly _configService: SettingService) {\n    super(LoggerService.name, {\n      timestamp: true,\n      logLevels: _configService.log.levels,\n    });\n    this._logger = winston.createLogger(_configService.winstonConfig);\n    if (_configService.nodeEnv !== 'production') {\n      this._logger.debug('Logging initialized at debug level');\n    }\n  }\n  log(message: string): void {\n    this._logger.info(message);\n  }\n  info(message: string): void {\n    this._logger.info(message);\n  }\n  debug(message: string): void {\n    this._logger.debug(message);\n  }\n  error(message: string, trace?: any, context?: string): void {\n    // i think the trace should be JSON Stringified\n    this._logger.error(\n      `${context || ''} ${message} -> (${\n        trace || trace || trace || trace || trace || 'trace not provided !'\n      })`,\n    );\n  }\n\n  formattedError(\n    message: string,\n    error,\n    meta: {\n      httpContext: HttpArgumentsHost;\n      errorResponse;\n      contextName: string;\n    },\n  ) {\n    const response = meta.httpContext.getResponse();\n    const request = meta.httpContext.getRequest();\n    const formatted = {\n      headers: request.headers,\n      body: request.body,\n      responseMessage: meta.errorResponse,\n      error,\n    };\n    this._logger.error(`${meta.contextName || ''} ${message}`, formatted);\n  }\n\n  warn(message: string): void {\n    this._logger.warn(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/logging.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/interceptors/logging.interceptor.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    console.log('Before...');\n\n    const now = Date.now();\n    return next\n      .handle()\n      .pipe(tap(() => console.log(`After... ${Date.now() - now}ms`)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NewRecipeInput.html":{"url":"classes/NewRecipeInput.html","title":"class - NewRecipeInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NewRecipeInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipes/dto/new-recipe.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                ingredients\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})@IsOptional()@Length(30, 255)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/dto/new-recipe.input.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ingredients\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/dto/new-recipe.input.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@MaxLength(30)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/dto/new-recipe.input.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType } from '@nestjs/graphql';\nimport { IsOptional, Length, MaxLength } from 'class-validator';\n\n@InputType()\nexport class NewRecipeInput {\n  @Field()\n  @MaxLength(30)\n  title: string;\n\n  @Field({ nullable: true })\n  @IsOptional()\n  @Length(30, 255)\n  description?: string;\n\n  @Field(type => [String])\n  ingredients: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationParamsDto.html":{"url":"classes/PaginationParamsDto.html","title":"class - PaginationParamsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationParamsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/utils/pagination-params.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                idsToSkip\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                offset\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        idsToSkip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/utils/pagination-params.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/utils/pagination-params.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsNumber()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/utils/pagination-params.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, Min, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class PaginationParamsDto {\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(0)\n  offset: number = 0;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit: number | null = null;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(0)\n  idsToSkip: number = 0;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseIntPipe.html":{"url":"injectables/ParseIntPipe.html","title":"injectable - ParseIntPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseIntPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipes/parse-int.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pipes/parse-int.pipe.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        ArgumentMetadata\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\nimport { PipeTransform, Injectable, ArgumentMetadata } from '@nestjs/common';\n\n@Injectable()\nexport class ParseIntPipe implements PipeTransform {\n  async transform(value: string, metadata: ArgumentMetadata) {\n    const val = parseInt(value, 10);\n    if (isNaN(val)) {\n      throw new BadRequestException('Validation failed');\n    }\n    return val;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueryFailedFilter.html":{"url":"classes/QueryFailedFilter.html","title":"class - QueryFailedFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueryFailedFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/query-failed.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reflector\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/filters/query-failed.filter.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        reflector\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Reflector\n\n                    \n                \n                    \n                        \n                                Defined in src/common/filters/query-failed.filter.ts:11\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: literal type, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/filters/query-failed.filter.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { STATUS_CODES } from 'node:http';\n\nimport type { ArgumentsHost, ExceptionFilter } from '@nestjs/common';\nimport { Catch, HttpStatus } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport type { Response } from 'express';\n\nimport { constraintErrors } from './constraint-errors';\n\nexport class QueryFailedFilter implements ExceptionFilter {\n    constructor(public reflector: Reflector) { }\n\n    catch(\n        exception: { constraint?: string },\n        host: ArgumentsHost,\n    ) {\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const status = exception.constraint?.startsWith('UQ')\n            ? HttpStatus.CONFLICT\n            : HttpStatus.INTERNAL_SERVER_ERROR;\n\n        response.status(status).json({\n            statusCode: status,\n            error: STATUS_CODES[status],\n            message: exception.constraint\n                ? constraintErrors[exception.constraint]\n                : undefined,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Recipe.html":{"url":"classes/Recipe.html","title":"class - Recipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Recipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipes/models/recipe.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                creationDate\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                ingredients\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        creationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/models/recipe.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/models/recipe.model.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => ID)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/models/recipe.model.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ingredients\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/models/recipe.model.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/models/recipe.model.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, ObjectType } from '@nestjs/graphql';\n\n@ObjectType({ description: 'recipe ' })\nexport class Recipe {\n  @Field(type => ID)\n  id: string;\n\n  @Field()\n  title: string;\n\n  @Field({ nullable: true })\n  description?: string;\n\n  @Field()\n  creationDate: Date;\n\n  @Field(type => [String])\n  ingredients: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RecipesArgs.html":{"url":"classes/RecipesArgs.html","title":"class - RecipesArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RecipesArgs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipes/dto/recipes.args.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                skip\n                            \n                            \n                                    \n                                    \n                                    \n                                take\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        skip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => Int)@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/dto/recipes.args.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 25\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => Int)@Min(1)@Max(50)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipes/dto/recipes.args.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArgsType, Field, Int } from '@nestjs/graphql';\nimport { Max, Min } from 'class-validator';\n\n@ArgsType()\nexport class RecipesArgs {\n  @Field(type => Int)\n  @Min(0)\n  skip = 0;\n\n  @Field(type => Int)\n  @Min(1)\n  @Max(50)\n  take = 25;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RecipesModule.html":{"url":"modules/RecipesModule.html","title":"module - RecipesModule","body":"\n                   \n\n\n\n\n    Modules\n    RecipesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RecipesModule\n\n\n\ncluster_RecipesModule_providers\n\n\n\n\nRecipesService\n\nRecipesService\n\n\n\nRecipesModule\n\nRecipesModule\n\nRecipesModule -->\n\nRecipesService->RecipesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/recipes/recipes.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RecipesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DateScalar } from '@/common/scalars/date.scalar';\nimport { RecipesResolver } from './recipes.resolver';\nimport { RecipesService } from './recipes.service';\n\n@Module({\n  providers: [RecipesResolver, RecipesService, DateScalar],\n})\nexport class RecipesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RecipesResolver.html":{"url":"classes/RecipesResolver.html","title":"class - RecipesResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RecipesResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipes/recipes.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                addRecipe\n                            \n                            \n                                    \n                                    Async\n                                recipe\n                            \n                            \n                                    \n                                recipeAdded\n                            \n                            \n                                    \n                                recipes\n                            \n                            \n                                    \n                                    Async\n                                removeRecipe\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(recipesService: RecipesService)\n                    \n                \n                        \n                            \n                                Defined in src/recipes/recipes.resolver.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        recipesService\n                                                  \n                                                        \n                                                                        RecipesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        addRecipe\n                        \n                    \n                \n            \n            \n                \n                        \n                    addRecipe(newRecipeData: NewRecipeInput, pubSub: PubSub)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(returns => Recipe)\n                \n            \n\n                    \n                        \n                            Defined in src/recipes/recipes.resolver.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newRecipeData\n                                            \n                                                            NewRecipeInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                pubSub\n                                            \n                                                        PubSub\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        recipe\n                        \n                    \n                \n            \n            \n                \n                        \n                    recipe(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(returns => Recipe)\n                \n            \n\n                    \n                        \n                            Defined in src/recipes/recipes.resolver.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recipeAdded\n                        \n                    \n                \n            \n            \n                \n                        \n                    recipeAdded(pubSub: PubSub)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Subscription(returns => Recipe)\n                \n            \n\n                    \n                        \n                            Defined in src/recipes/recipes.resolver.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pubSub\n                                            \n                                                        PubSub\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recipes\n                        \n                    \n                \n            \n            \n                \n                        \n                    recipes(recipesArgs: RecipesArgs)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(returns => )\n                \n            \n\n                    \n                        \n                            Defined in src/recipes/recipes.resolver.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recipesArgs\n                                            \n                                                            RecipesArgs\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        removeRecipe\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeRecipe(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(returns => Boolean)\n                \n            \n\n                    \n                        \n                            Defined in src/recipes/recipes.resolver.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\nimport {\n  Args,\n  Context,\n  Mutation,\n  Query,\n  Resolver,\n  Subscription,\n} from '@nestjs/graphql';\nimport { PubSub } from 'mercurius';\nimport { NewRecipeInput } from './dto/new-recipe.input';\nimport { RecipesArgs } from './dto/recipes.args';\nimport { Recipe } from './models/recipe.model';\nimport { RecipesService } from './recipes.service';\n\n@Resolver(of => Recipe)\nexport class RecipesResolver {\n  constructor(private readonly recipesService: RecipesService) {}\n\n  @Query(returns => Recipe)\n  async recipe(@Args('id') id: string): Promise {\n    const recipe = await this.recipesService.findOneById(id);\n    if (!recipe) {\n      throw new NotFoundException(id);\n    }\n    return recipe;\n  }\n\n  @Query(returns => [Recipe])\n  recipes(@Args() recipesArgs: RecipesArgs): Promise {\n    return this.recipesService.findAll(recipesArgs);\n  }\n\n  @Mutation(returns => Recipe)\n  async addRecipe(\n    @Args('newRecipeData') newRecipeData: NewRecipeInput,\n    @Context('pubsub') pubSub: PubSub,\n  ): Promise {\n    const recipe = await this.recipesService.create(newRecipeData);\n    console.log('====================================');\n    console.log(recipe);\n    console.log('====================================');\n    pubSub.publish({ topic: 'recipeAdded', payload: { recipeAdded: recipe } });\n    return recipe;\n  }\n\n  @Mutation(returns => Boolean)\n  async removeRecipe(@Args('id') id: string) {\n    return this.recipesService.remove(id);\n  }\n\n  @Subscription(returns => Recipe)\n  recipeAdded(@Context('pubsub') pubSub: PubSub) {\n    return pubSub.subscribe('recipeAdded');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RecipesService.html":{"url":"injectables/RecipesService.html","title":"injectable - RecipesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RecipesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipes/recipes.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: NewRecipeInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/recipes/recipes.service.ts:14\n                        \n                    \n\n\n            \n                \n                        MOCK\nPut some real business logic here\nLeft for demonstration purposes\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            NewRecipeInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(recipesArgs: RecipesArgs)\n                \n            \n\n\n                    \n                        \n                            Defined in src/recipes/recipes.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recipesArgs\n                                            \n                                                            RecipesArgs\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/recipes/recipes.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/recipes/recipes.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { NewRecipeInput } from './dto/new-recipe.input';\nimport { RecipesArgs } from './dto/recipes.args';\nimport { Recipe } from './models/recipe.model';\n\n@Injectable()\nexport class RecipesService {\n  /**\n   * MOCK\n   * Put some real business logic here\n   * Left for demonstration purposes\n   */\n\n  async create(data: NewRecipeInput): Promise {\n    return data as any;\n  }\n\n  async findOneById(id: string): Promise {\n    return {} as any;\n  }\n\n  async findAll(recipesArgs: RecipesArgs): Promise {\n    return [] as Recipe[];\n  }\n\n  async remove(id: string): Promise {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RedisModule.html":{"url":"modules/RedisModule.html","title":"module - RedisModule","body":"\n                   \n\n\n\n\n    Modules\n    RedisModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_providers\n\n\n\n\nRedisRepository\n\nRedisRepository\n\n\n\nRedisModule\n\nRedisModule\n\nRedisModule -->\n\nRedisRepository->RedisModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RedisRepository\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RedisRepository } from './redis.repository';\nimport { redisClientFactory } from './redis.client.factory';\n\n\n@Module({\n    imports: [],\n    controllers: [],\n    providers: [redisClientFactory, RedisRepository],\n\n    exports: [],\n})\nexport class RedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RedisRepository.html":{"url":"injectables/RedisRepository.html","title":"injectable - RedisRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RedisRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/redis/redis.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                set\n                            \n                            \n                                    Async\n                                setWithExpiry\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redisClient: Redis)\n                    \n                \n                        \n                            \n                                Defined in src/core/redis/redis.repository.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        redisClient\n                                                  \n                                                        \n                                                                    Redis\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(prefix: string, key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/redis/redis.repository.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                prefix\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(prefix: string, key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/redis/redis.repository.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                prefix\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \nonModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/redis/redis.repository.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(prefix: string, key: string, value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/redis/redis.repository.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                prefix\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setWithExpiry\n                        \n                    \n                \n            \n            \n                \n                        \n                    setWithExpiry(prefix: string, key: string, value: string, expiry: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/redis/redis.repository.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                prefix\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiry\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { RedisRepositoryInterface } from './redis.repository.interface';\nimport { Inject, Injectable, OnModuleDestroy } from '@nestjs/common';\nimport { Redis } from 'ioredis';\n\n@Injectable()\nexport class RedisRepository implements OnModuleDestroy, RedisRepositoryInterface {\n    constructor(@Inject('RedisClient') private readonly redisClient: Redis) {}\n\n    onModuleDestroy(): void {\n        this.redisClient.disconnect();\n    }\n\n    async get(prefix: string, key: string): Promise {\n        return this.redisClient.get(`${prefix}:${key}`);\n    }\n\n    async set(prefix: string, key: string, value: string): Promise {\n        await this.redisClient.set(`${prefix}:${key}`, value);\n    }\n\n    async delete(prefix: string, key: string): Promise {\n        await this.redisClient.del(`${prefix}:${key}`);\n    }\n\n    async setWithExpiry(prefix: string, key: string, value: string, expiry: number): Promise {\n        await this.redisClient.set(`${prefix}:${key}`, value, 'EX', expiry);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RedisRepositoryInterface.html":{"url":"interfaces/RedisRepositoryInterface.html","title":"interface - RedisRepositoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RedisRepositoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/redis/redis.repository.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        delete\n                                    \n                                \n                                \n                                    \n                                        get\n                                    \n                                \n                                \n                                    \n                                        set\n                                    \n                                \n                                \n                                    \n                                        setWithExpiry\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(prefix: string, key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/redis/redis.repository.interface.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                prefix\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(prefix: string, key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/redis/redis.repository.interface.ts:2\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                prefix\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(prefix: string, key: string, value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/redis/redis.repository.interface.ts:3\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                prefix\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setWithExpiry\n                        \n                    \n                \n            \n            \n                \nsetWithExpiry(prefix: string, key: string, value: string, expiry: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/redis/redis.repository.interface.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                prefix\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiry\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface RedisRepositoryInterface {\n    get(prefix: string, key: string): Promise;\n    set(prefix: string, key: string, value: string): Promise;\n    delete(prefix: string, key: string): Promise;\n    setWithExpiry(prefix: string, key: string, value: string, expiry: number): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResolvePromisesInterceptor.html":{"url":"injectables/ResolvePromisesInterceptor.html","title":"injectable - ResolvePromisesInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResolvePromisesInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/serializer.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/serializer.interceptor.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable<>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport deepResolvePromises from '@/common/utils/deep-resolver';\n\n@Injectable()\nexport class ResolvePromisesInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(map((data) => deepResolvePromises(data)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n  data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(map(data => ({ data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/roles.guard.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/guards/roles.guard.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    console.log(context.getHandler());\n    \n    const roles = this.reflector.get('roles', context.getHandler());\n    if (!roles) {\n      return true;\n    }\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n    const hasRole = () =>\n      !!user.roles.find(role => !!roles.find(item => item === role));\n\n    return user && user.roles && hasRole();\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SettingService.html":{"url":"classes/SettingService.html","title":"class - SettingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SettingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/services/setting.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                getNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    app\n                                \n                                \n                                    apiPrefix\n                                \n                                \n                                    nodeEnv\n                                \n                                \n                                    throttlerConfig\n                                \n                                \n                                    eventStoreConfig\n                                \n                                \n                                    winstonConfig\n                                \n                                \n                                    redis\n                                \n                                \n                                    newrelic\n                                \n                                \n                                    log\n                                \n                                \n                                    headerKey\n                                \n                                \n                                    rateLimit\n                                \n                                \n                                    awsS3Config\n                                \n                                \n                                    databaseKey\n                                \n                                \n                                    swaggerConfig\n                                \n                                \n                                    jwtConfig\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/shared/services/setting.service.ts:11\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/services/setting.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNumber(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/shared/services/setting.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        app\n                    \n                \n\n                \n                    \n                        getapp()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/services/setting.service.ts:34\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        apiPrefix\n                    \n                \n\n                \n                    \n                        getapiPrefix()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/services/setting.service.ts:50\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        nodeEnv\n                    \n                \n\n                \n                    \n                        getnodeEnv()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/services/setting.service.ts:61\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        throttlerConfig\n                    \n                \n\n                \n                    \n                        getthrottlerConfig()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/services/setting.service.ts:65\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        eventStoreConfig\n                    \n                \n\n                \n                    \n                        geteventStoreConfig()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/services/setting.service.ts:69\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        winstonConfig\n                    \n                \n\n                \n                    \n                        getwinstonConfig()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/services/setting.service.ts:96\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        redis\n                    \n                \n\n                \n                    \n                        getredis()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/services/setting.service.ts:141\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        newrelic\n                    \n                \n\n                \n                    \n                        getnewrelic()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/services/setting.service.ts:163\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        log\n                    \n                \n\n                \n                    \n                        getlog()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/services/setting.service.ts:190\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        headerKey\n                    \n                \n\n                \n                    \n                        getheaderKey()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/services/setting.service.ts:209\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        rateLimit\n                    \n                \n\n                \n                    \n                        getrateLimit()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/services/setting.service.ts:220\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        awsS3Config\n                    \n                \n\n                \n                    \n                        getawsS3Config()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/services/setting.service.ts:229\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        databaseKey\n                    \n                \n\n                \n                    \n                        getdatabaseKey()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/services/setting.service.ts:238\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        swaggerConfig\n                    \n                \n\n                \n                    \n                        getswaggerConfig()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/services/setting.service.ts:248\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        jwtConfig\n                    \n                \n\n                \n                    \n                        getjwtConfig()\n                    \n                \n                            \n                                \n                                    Defined in src/shared/services/setting.service.ts:261\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import * as dotenv from 'dotenv';\nimport * as winston from 'winston';\nimport * as DailyRotateFile from 'winston-daily-rotate-file';\nimport { LogLevel } from '@nestjs/common';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { PoolConfig } from 'pg';\nimport { IAwsConfig } from '@/core/interfaces/aws.interface';\nimport { ISwaggerConfigInterface } from '@/core/interfaces/swagger.interface';\n\nexport class SettingService {\n  constructor() {\n    dotenv.config({\n      path: `.env`,\n    });\n\n    // Replace \\\\n with \\n to support multiline strings in AWS\n    for (const envName of Object.keys(process.env)) {\n      process.env[envName] = process.env[envName].replace(/\\\\n/g, '\\n');\n    }\n    if (this.nodeEnv === 'development') {\n      console.info(process.env);\n    }\n  }\n\n  public get(key: string): string {\n    return process.env[key];\n  }\n\n  public getNumber(key: string): number {\n    return Number(this.get(key));\n  }\n\n  get app() {\n    return {\n      name: this.get('APP_NAME'),\n      env: this.nodeEnv,\n      version: this.get('API_VERSION'),\n      versionDefault: this.get('API_VERSION_DEFAULT'),\n      versionKey: this.get('API_VERSION_KEY') || 'x-api-version',\n      url: this.get('API_URL'),\n      cors: this.get('CORS'),\n      prefix: this.apiPrefix,\n      defaultLang: this.get('APP_DEFAULT_LANG') || 'en',\n      authorizationKey: this.get('APP_AUTHORIZATION_KEY') || 'Authorization',\n      timezone: this.get('APP_TIMEZONE') || '+07:00',\n    };\n  }\n\n  get apiPrefix() {\n    let prefix = this.get('API_PREFIX');\n    if (!prefix) {\n      prefix = '';\n    }\n    if (prefix == 'version') {\n      prefix = this.get('API_VERSION');\n    }\n    return prefix;\n  }\n\n  get nodeEnv(): string {\n    return this.get('NODE_ENV') || 'development';\n  }\n  \n  get throttlerConfig() {\n    return this.get('NODE_ENV') || 'development';\n  }\n\n  get eventStoreConfig() {\n    return {\n      protocol: this.get('EVENT_STORE_PROTOCOL') || 'http',\n      connectionSettings: {\n        defaultUserCredentials: {\n          username: this.get('EVENT_STORE_CREDENTIALS_USERNAME') || 'admin',\n          password: this.get('EVENT_STORE_CREDENTIALS_PASSWORD') || 'changeit',\n        },\n        verboseLogging: true,\n        failOnNoServerResponse: true,\n        // log: console, // TODO: improve Eventstore logger (separate chanel)\n      },\n      tcpEndpoint: {\n        host: this.get('EVENT_STORE_HOSTNAME') || 'localhost',\n        port: this.getNumber('EVENT_STORE_TCP_PORT') || 1113,\n      },\n      httpEndpoint: {\n        host: this.get('EVENT_STORE_HOSTNAME') || 'localhost',\n        port: this.getNumber('EVENT_STORE_HTTP_PORT') || 2113,\n      },\n      poolOptions: {\n        min: this.getNumber('EVENT_STORE_POOLOPTIONS_MIN') || 1,\n        max: this.getNumber('EVENT_STORE_POOLOPTIONS_MAX') || 10,\n      },\n    };\n  }\n\n  get winstonConfig(): winston.LoggerOptions {\n    const transports = [\n      new DailyRotateFile({\n        level: 'debug',\n        filename: `./logs/${this.nodeEnv}/debug-%DATE%.log`,\n        datePattern: 'YYYY-MM-DD',\n        zippedArchive: true,\n        maxSize: '20m',\n        maxFiles: '14d',\n        format: winston.format.combine(\n          winston.format.timestamp(),\n          winston.format.json(),\n        ),\n      }),\n      new DailyRotateFile({\n        level: 'error',\n        filename: `./logs/${this.nodeEnv}/error-%DATE%.log`,\n        datePattern: 'YYYY-MM-DD',\n        zippedArchive: false,\n        maxSize: '20m',\n        maxFiles: '30d',\n        format: winston.format.combine(\n          winston.format.timestamp(),\n          winston.format.json(),\n        ),\n      }),\n      new winston.transports.Console({\n        level: 'debug',\n        handleExceptions: true,\n        format: winston.format.combine(\n          winston.format.colorize(),\n          winston.format.timestamp({\n            format: 'DD-MM-YYYY HH:mm:ss',\n          }),\n          winston.format.simple(),\n        ),\n      }),\n    ];\n\n    return {\n      transports,\n      exitOnError: false,\n    };\n  }\n\n  get redis() {\n    return {\n      host: this.get('REDIS_HOST') || '127.0.0.1',\n      url: this.get('REDIS_URL'),\n      port: this.get('REDIS_PORT') || '6379',\n      password: this.get('REDIS_PASSWORD'),\n      role: this.get('REDIS_ROLE'),\n      user: this.get('REDIS_USER'),\n      prefix: this.get('REDIS_PREFIX') || 'nest_cache:',\n      connectionName: this.get('REDIS_CONNECTION_NAME') || 'NEST_CACHE',\n      ttl: this.get('REDIS_TTL') || 3600,\n      cacheTTL: {\n        searchPlaceholder:\n          this.getNumber('REDIS_CACHE_TTL_SEARCH_PLACEHOLDER') || 86400,\n      },\n      enable: {\n        searchPlaceholder:\n          this.get('REDIS_ENABLE_SEARCH_PLACEHOLDER') == 'true' || false,\n      },\n    };\n  }\n\n  get newrelic() {\n    return {\n      enabled: this.get('NEWRELIC_ENABLED') == 'true' || false,\n      appName: this.get('NEWRELIC_APP_NAME') || this.get('APP_NAME'),\n      licenseKey: this.get('NEWRELIC_LICENSE_KEY'),\n      log: {\n        level: this.get('NEWRELIC_LOG_LEVEL'),\n      },\n      distributeTracing: {\n        enabled:\n          this.get('NEWRELIC_DISTRIBUTE_TRACING_ENABLED') == 'true' || false,\n      },\n      transactionTracer: {\n        enabled: this.get('NEWRELIC_TRANSACTION_ENABLED') == 'true' || false,\n        recordSQL: this.get('NEWRELIC_TRANSACTION_RECORD_SQL'),\n        explainThreshold: this.get('NEWRELIC_TRANSACTION_EXPLAIN_THRESHOLD'),\n      },\n      slowSql: {\n        enabled: this.get('NEWRELIC_SLOW_SQL_ENABLED') == 'true' || false,\n        maxSamples: this.get('NEWRELIC_SLOW_SQL_MAX_SAMPLES'),\n      },\n      blacklist: this.get('NEWRELIC_BLACKLIST_ROUTES')\n        ? this.get('NEWRELIC_BLACKLIST_ROUTES').split(',')\n        : [],\n    };\n  }\n\n  get log() {\n    let logLevels: LogLevel[] = ['log', 'warn', 'error', 'verbose', 'debug'];\n    if (this.get('LOG_LEVELS')) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      logLevels = this.get('LOG_LEVELS').split(',');\n    }\n\n    return {\n      enabled: this.get('LOG_ENABLED') == 'true' || false,\n      driver: this.get('LOG_DRIVER') || 'google',\n      name: this.get('LOG_NAME') || this.app.name,\n      levels: logLevels,\n      morgan: {\n        enabled: this.get('LOG_MORGAN_ENABLED') == 'true' || false,\n      },\n    };\n  }\n\n  get headerKey() {\n    return {\n      appVersion: this.get('HEADER_APP_VERSION') || 'x-version',\n      appPlatform: this.get('HEADER_APP_DEVICE') || 'x-device',\n      timezone: this.get('HEADER_TIMEZONE') || 'x-timezone',\n      lang: this.get('HEADER_LANG') || 'x-lang',\n      userId: this.get('HEADER_USER_ID') || 'x-user-id',\n      userUuid: this.get('HEADER_USER_UUID') || 'x-user-uuid',\n    };\n  }\n\n  get rateLimit() {\n    return {\n      enabled: this.get('RATE_LIMIT_ENABLED') == 'true' || false,\n      windowMs:\n        this.getNumber('RATE_LIMIT_WINDOWMS') * 60 * 1000 || 15 * 60 * 1000,\n      max: this.getNumber('RATE_LIMIT_MAX') || 300,\n    };\n  }\n\n  get awsS3Config(): IAwsConfig {\n    return {\n      accessKeyId: this.get('AWS_S3_ACCESS_KEY_ID'),\n      secretAccessKey: this.get('AWS_S3_SECRET_ACCESS_KEY'),\n      bucketName: this.get('S3_BUCKET_NAME'),\n      publicUrl: this.get('S3_PUBLIC_URL'),\n    };\n  }\n\n  get databaseKey() {\n    return {\n      host: this.get('POSTGRES_HOST'),\n      port: Number(this.get('POSTGRES_PORT')),\n      user: this.get('POSTGRES_USER'),\n      password: this.get('POSTGRES_PASSWORD'),\n      database: this.get('POSTGRES_DB'),\n    };\n  }\n  \n  get swaggerConfig(): ISwaggerConfigInterface {\n    return {\n      path: this.get('SWAGGER_PATH') || '/api/docs',\n      title:\n        this.get('SWAGGER_TITLE') || 'Talentclass API ',\n      description:\n        this.get('SWAGGER_DESCRIPTION') ||\n        'Talentclass API Documentation',\n      version: this.get('SWAGGER_VERSION') || '0.0.1',\n      scheme: this.get('SWAGGER_SCHEME') === 'https' ? 'https' : 'http',\n    };\n  }\n\n  get jwtConfig() {\n    let privateKey = null;\n    let publicKey = null;\n\n    const privateKeyPath = path.join(\n      __dirname,\n      '..',\n      'certificates',\n      'auth-rs256.key',\n    );\n    const publicKeyPath = path.join(\n      __dirname,\n      '..',\n      'certificates',\n      'auth-rs256.key.pub',\n    );\n\n    if (fs.existsSync(privateKeyPath)) {\n      privateKey = fs.readFileSync(privateKeyPath);\n    } else {\n      privateKey = this.get('JWT_TOKEN_SECRET_PRIVATE_KEY');\n    }\n\n    if (fs.existsSync(publicKeyPath)) {\n      publicKey = fs.readFileSync(publicKeyPath);\n    } else {\n      publicKey = this.get('JWT_TOKEN_SECRET_PUBLIC_KEY');\n    }\n\n    return {\n      secretKey: this.get('JWT_SECRET') || 'y0urS3cr3tz',\n      refreshTokenSecret: this.get('JWT_REFRESH_TOKEN_SECRET') || 'y0urS3cr3tz',\n      expiresToken: this.get('JWT_EXPIRES_TOKEN') || '14d',\n      expiresRefreshToken: this.get('JWT_EXPIRES_REFRESH_TOKEN') || '30d',\n      privateKey,\n      publicKey,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SharedModule.html":{"url":"modules/SharedModule.html","title":"module - SharedModule","body":"\n                   \n\n\n\n\n    Modules\n    SharedModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SharedModule\n\n\n\ncluster_SharedModule_exports\n\n\n\n\nSettingService \n\nSettingService \n\n\n\nSharedModule\n\nSharedModule\n\nSettingService  -->\n\nSharedModule->SettingService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shared.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            SettingService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from '@nestjs/axios';\nimport { Module, Global } from '@nestjs/common';\n\nimport { SettingService } from './shared/services/setting.service';\n\nconst providers = [SettingService];\n\n@Global()\n@Module({\n  providers,\n  imports: [HttpModule],\n  exports: [...providers, HttpModule],\n})\nexport class SharedModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nTasksService\n\nTasksService\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shared/tasks/tasks.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TasksService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TasksService } from './tasks.service';\n\n@Module({\n  providers: [TasksService],\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/tasks/tasks.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleCron\n                            \n                            \n                                    \n                                handleInterval\n                            \n                            \n                                    \n                                handleTimeout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleCron\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleCron()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('45 * * * * *')\n                \n            \n\n                    \n                        \n                            Defined in src/shared/tasks/tasks.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleInterval\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleInterval()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Interval(10000)\n                \n            \n\n                    \n                        \n                            Defined in src/shared/tasks/tasks.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleTimeout\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleTimeout()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Timeout(5000)\n                \n            \n\n                    \n                        \n                            Defined in src/shared/tasks/tasks.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(TasksService.name)\n                    \n                \n                    \n                        \n                                Defined in src/shared/tasks/tasks.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Cron, Interval, Timeout } from '@nestjs/schedule';\n\n@Injectable()\nexport class TasksService {\n  private readonly logger = new Logger(TasksService.name);\n\n  @Cron('45 * * * * *')\n  handleCron() {\n    this.logger.debug('Called when the second is 45');\n  }\n\n  @Interval(10000)\n  handleInterval() {\n    this.logger.debug('Called every 10 seconds');\n  }\n\n  @Timeout(5000)\n  handleTimeout() {\n    this.logger.debug('Called once after 5 seconds');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/interceptors/transform.interceptor.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n  data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(map(data => ({ data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipes/validation.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        toValidate\n                        \n                    \n                \n            \n            \n                \n                        \n                    toValidate(metatype: Type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pipes/validation.pipe.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                metatype\n                                            \n                                                        Type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pipes/validation.pipe.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        ArgumentMetadata\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  BadRequestException,\n  Injectable,\n  PipeTransform,\n  Type,\n} from '@nestjs/common';\nimport { plainToClass } from 'class-transformer';\nimport { validate } from 'class-validator';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, metadata: ArgumentMetadata) {\n    const { metatype } = metadata;\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException('Validation failed');\n    }\n    return value;\n  }\n\n  private toValidate(metatype: Type): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !types.find(type => metatype === type);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.gateway.ts\n            \n            class\n            AppGateway\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                        src/boilerplate.polyfill.ts\n            \n            type alias\n            Todo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/boilerplate.polyfill.ts\n            \n            type alias\n            Uuid\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/cats/cats.controller.ts\n            \n            controller\n            CatsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cats/cats.service.ts\n            \n            injectable\n            CatsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cats/dto/create-cat.dto.ts\n            \n            class\n            CreateCatDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cats/interfaces/cat.interface.ts\n            \n            interface\n            Cat\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/common/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/directives/upper-case.directive.ts\n            \n            function\n            upperDirectiveTransformer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/filters/bad-request.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/common/filters/constraint-errors.ts\n            \n            variable\n            constraintErrors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/filters/exceptions.filter.ts\n            \n            class\n            ExceptionsFilter\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/filters/query-failed.filter.ts\n            \n            class\n            QueryFailedFilter\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interceptors/exception.interceptor.ts\n            \n            injectable\n            ExceptionInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/serializer.interceptor.ts\n            \n            injectable\n            ResolvePromisesInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/middleware/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/pipes/parse-int.pipe.ts\n            \n            injectable\n            ParseIntPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/pipes/validation.pipe.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/scalars/date.scalar.ts\n            \n            class\n            DateScalar\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/common/utils/can-be-undefined.ts\n            \n            function\n            CanBeUndefined\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/utils/deep-resolver.ts\n            \n            function\n            deepResolvePromises\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/utils/environment-variables.ts.ts\n            \n            interface\n            EnvironmentVariables\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                        src/common/utils/is-record.ts\n            \n            function\n            isRecord\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/utils/pagination-params.dto.ts\n            \n            class\n            PaginationParamsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/database/database-options.ts\n            \n            interface\n            DatabaseOptions\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/core/database/database-schema.ts\n            \n            variable\n            articles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/core/database/database-schema.ts\n            \n            variable\n            articlesRelations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/core/database/database-schema.ts\n            \n            variable\n            categories\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/core/database/database-schema.ts\n            \n            variable\n            categoriesArticles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/core/database/database-schema.ts\n            \n            variable\n            categoriesArticlesRelations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/core/database/database-schema.ts\n            \n            variable\n            categoriesRelations\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/core/database/database-schema.ts\n            \n            variable\n            databaseSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/core/database/database-schema.ts\n            \n            variable\n            users\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/core/database/database.module-definition.ts\n            \n            variable\n            CONNECTION_POOL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/core/database/database.module-definition.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/database/databse-error.ts\n            \n            interface\n            DatabaseError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/core/database/databse-error.ts\n            \n            function\n            isDatabaseError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/database/drizzle.service.ts\n            \n            injectable\n            DrizzleService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/core/database/postgres-transaction.ts\n            \n            type alias\n            PostgresTransaction\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/interceptors/http-cache.interceptor.ts\n            \n            injectable\n            HttpCacheInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interfaces/aws.interface.ts\n            \n            interface\n            IAwsConfig\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/interfaces/swagger.interface.ts\n            \n            interface\n            ISwaggerConfigInterface\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/core/redis/redis.client.factory.ts\n            \n            variable\n            redisClientFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/redis/redis.repository.interface.ts\n            \n            interface\n            RedisRepositoryInterface\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/redis/redis.repository.ts\n            \n            injectable\n            RedisRepository\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/recipes/dto/new-recipe.input.ts\n            \n            class\n            NewRecipeInput\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/recipes/dto/recipes.args.ts\n            \n            class\n            RecipesArgs\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/recipes/models/recipe.model.ts\n            \n            class\n            Recipe\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/recipes/recipes.resolver.ts\n            \n            class\n            RecipesResolver\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/recipes/recipes.service.ts\n            \n            injectable\n            RecipesService\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                        src/shared.module.ts\n            \n            variable\n            providers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/events/events.gateway.ts\n            \n            class\n            AppGateway\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/shared/services/http.service.ts\n            \n            injectable\n            HttpConfigService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/services/jwt.service.ts\n            \n            injectable\n            JwtUtilService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shared/services/logger.service.ts\n            \n            injectable\n            LoggerService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/shared/services/setting.service.ts\n            \n            class\n            SettingService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/shared/swagger/decorator.ts\n            \n            function\n            ApiCustomHeader\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/shared/swagger/decorator.ts\n            \n            variable\n            configService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/shared/swagger/setup.ts\n            \n            function\n            setupSwagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shared/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/tracing.ts\n            \n            variable\n            otelSDK\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/tracing.ts\n            \n            variable\n            traceExporter\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @apollo/server : ^4.11.0\n        \n            @apollo/subgraph : ^2.9.3\n        \n            @fastify/formbody : ^6.0.1\n        \n            @fastify/middie : ^9.0.2\n        \n            @nestjs/apollo : ^12.2.0\n        \n            @nestjs/bullmq : ^1.1.0\n        \n            @nestjs/common : 10.4.5\n        \n            @nestjs/config : ^3.3.0\n        \n            @nestjs/core : 10.4.5\n        \n            @nestjs/graphql : ^12.2.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mercurius : ^12.2.0\n        \n            @nestjs/platform-fastify : ^10.4.5\n        \n            @nestjs/platform-socket.io : ^10.4.5\n        \n            @nestjs/platform-ws : ^7.6.18\n        \n            @nestjs/schedule : ^2.2.3\n        \n            @opentelemetry/instrumentation-express : ^0.43.0\n        \n            @opentelemetry/instrumentation-http : ^0.53.0\n        \n            @opentelemetry/instrumentation-nestjs-core : ^0.40.0\n        \n            @opentelemetry/resources : ^1.26.0\n        \n            @opentelemetry/sdk-node : ^0.53.0\n        \n            @opentelemetry/sdk-trace-base : ^1.26.0\n        \n            @opentelemetry/semantic-conventions : ^1.27.0\n        \n            @types/pg : ^8.11.10\n        \n            class-transformer : 0.5.1\n        \n            class-validator : ^0.14.1\n        \n            dotenv : ^16.4.5\n        \n            drizzle-orm : ^0.35.2\n        \n            fastify : ^5.0.0\n        \n            fastify-formbody : ^3.0.0\n        \n            fastify-helmet : ^5.3.2\n        \n            fastify-static : ^4.6.1\n        \n            graphql : ^16.9.0\n        \n            mercurius : ^14.1.0\n        \n            pg : ^8.13.0\n        \n            reflect-metadata : 0.2.2\n        \n            rimraf : 6.0.1\n        \n            rxjs : 7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostgresErrorCode   (src/.../postgres-error-code.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/database/postgres-error-code.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostgresErrorCode\n                    \n                \n                        \n                            \n                                 UniqueViolation\n                            \n                        \n                        \n                            \n                                Value : 23505\n                            \n                        \n                        \n                            \n                                 NotNullViolation\n                            \n                        \n                        \n                            \n                                Value : 23502\n                            \n                        \n                        \n                            \n                                 ForeignKeyViolation\n                            \n                        \n                        \n                            \n                                Value : 23503\n                            \n                        \n                        \n                            \n                                 CheckViolation\n                            \n                        \n                        \n                            \n                                Value : 23514\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApiCustomHeader   (src/.../decorator.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            CanBeUndefined   (src/.../can-be-undefined.ts)\n                        \n                        \n                            deepResolvePromises   (src/.../deep-resolver.ts)\n                        \n                        \n                            isDatabaseError   (src/.../databse-error.ts)\n                        \n                        \n                            isRecord   (src/.../is-record.ts)\n                        \n                        \n                            setupSwagger   (src/.../setup.ts)\n                        \n                        \n                            upperDirectiveTransformer   (src/.../upper-case.directive.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/shared/swagger/decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiCustomHeader\n                        \n                    \n                \n            \n            \n                \nApiCustomHeader()\n                \n            \n\n\n\n\n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    src/common/utils/can-be-undefined.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CanBeUndefined\n                        \n                    \n                \n            \n            \n                \nCanBeUndefined()\n                \n            \n\n\n\n\n        \n    \n    src/common/utils/deep-resolver.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deepResolvePromises\n                        \n                    \n                \n            \n            \n                \ndeepResolvePromises(input)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                input\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/core/database/databse-error.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isDatabaseError\n                        \n                    \n                \n            \n            \n                \nisDatabaseError(value)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DatabaseError\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/common/utils/is-record.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isRecord\n                        \n                    \n                \n            \n            \n                \nisRecord(value)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Record\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/shared/swagger/setup.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setupSwagger\n                        \n                    \n                \n            \n            \n                \nsetupSwagger(app: NestFastifyApplication, config: ISwaggerConfigInterface)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        NestFastifyApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                config\n                                            \n                                                            ISwaggerConfigInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/common/directives/upper-case.directive.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        upperDirectiveTransformer\n                        \n                    \n                \n            \n            \n                \nupperDirectiveTransformer(schema: GraphQLSchema, directiveName: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                schema\n                                            \n                                                        GraphQLSchema\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                directiveName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nFastify sample\nNote that if you are running the Nest app on a remote machine, you may need to change the listen address, as per these instructions:\nawait app.listen(3000, '0.0.0.0')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CatsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EventsModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RecipesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SharedModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_CatsModule\n\n\n\ncluster_CatsModule_providers\n\n\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\ncluster_DatabaseModule_providers\n\n\n\ncluster_RecipesModule\n\n\n\ncluster_RecipesModule_providers\n\n\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_providers\n\n\n\ncluster_SharedModule\n\n\n\ncluster_SharedModule_exports\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nCatsModule\n\nCatsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCatsModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nDrizzleService \n\nDrizzleService \n\nDrizzleService  -->\n\nDatabaseModule->DrizzleService \n\n\n\n\n\nEventsModule\n\nEventsModule\n\nAppModule -->\n\nEventsModule->AppModule\n\n\n\n\n\nRecipesModule\n\nRecipesModule\n\nAppModule -->\n\nRecipesModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nSettingService \n\nSettingService \n\nSettingService  -->\n\nSharedModule->SettingService \n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nCatsService\n\nCatsService\n\nCatsModule -->\n\nCatsService->CatsModule\n\n\n\n\n\nDrizzleService\n\nDrizzleService\n\nDatabaseModule -->\n\nDrizzleService->DatabaseModule\n\n\n\n\n\nRecipesService\n\nRecipesService\n\nRecipesModule -->\n\nRecipesService->RecipesModule\n\n\n\n\n\nRedisRepository\n\nRedisRepository\n\nRedisModule -->\n\nRedisRepository->RedisModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    16 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    13 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : Nest TypeScript starter repository\n        \n            License : MIT\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostgresTransaction   (src/.../postgres-transaction.ts)\n                        \n                        \n                            Todo   (src/.../boilerplate.polyfill.ts)\n                        \n                        \n                            Uuid   (src/.../boilerplate.polyfill.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/database/postgres-transaction.ts\n    \n    \n        \n            \n                \n                    \n                    PostgresTransaction\n                \n            \n            \n                \n                        PgTransaction>\n\n                \n            \n        \n    \n    src/boilerplate.polyfill.ts\n    \n    \n        \n            \n                \n                    \n                    Todo\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Uuid\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            articles   (src/.../database-schema.ts)\n                        \n                        \n                            articlesRelations   (src/.../database-schema.ts)\n                        \n                        \n                            categories   (src/.../database-schema.ts)\n                        \n                        \n                            categoriesArticles   (src/.../database-schema.ts)\n                        \n                        \n                            categoriesArticlesRelations   (src/.../database-schema.ts)\n                        \n                        \n                            categoriesRelations   (src/.../database-schema.ts)\n                        \n                        \n                            configService   (src/.../decorator.ts)\n                        \n                        \n                            CONNECTION_POOL   (src/.../database.module-definition.ts)\n                        \n                        \n                            constraintErrors   (src/.../constraint-errors.ts)\n                        \n                        \n                            databaseSchema   (src/.../database-schema.ts)\n                        \n                        \n                            module   (src/.../main.ts)\n                        \n                        \n                            otelSDK   (src/.../tracing.ts)\n                        \n                        \n                            providers   (src/.../shared.module.ts)\n                        \n                        \n                            redisClientFactory   (src/.../redis.client.factory.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            traceExporter   (src/.../tracing.ts)\n                        \n                        \n                            users   (src/.../database-schema.ts)\n                        \n                        \n                               (src/.../database.module-definition.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/database/database-schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        articles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : pgTable('articles', {\n  id: serial('id').primaryKey(),\n  title: text('title').notNull(),\n  content: text('content').notNull(),\n  authorId: integer('author_id')\n    .references(() => users.id)\n    .notNull(),\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        articlesRelations\n                        \n                    \n                \n            \n                \n                    \n                        Default value : relations(articles, ({ one, many }) => ({\n  author: one(users, {\n    fields: [articles.authorId],\n    references: [users.id],\n  }),\n  categoriesArticles: many(categoriesArticles),\n}))\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Default value : pgTable('categories', {\n  id: serial('id').primaryKey(),\n  name: text('title').notNull(),\n  parentCategoryId: integer('parent_category_id').references(\n    (): AnyPgColumn => categories.id,\n  ),\n})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        categoriesArticles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : pgTable(\n  'categories_articles',\n  {\n    categoryId: integer('category_id')\n      .notNull()\n      .references(() => categories.id),\n    articleId: integer('article_id')\n      .notNull()\n      .references(() => articles.id),\n  },\n  (columns) => ({\n    pk: primaryKey({ columns: [columns.categoryId, columns.articleId] }),\n  }),\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        categoriesArticlesRelations\n                        \n                    \n                \n            \n                \n                    \n                        Default value : relations(\n  categoriesArticles,\n  ({ one }) => ({\n    category: one(categories, {\n      fields: [categoriesArticles.categoryId],\n      references: [categories.id],\n    }),\n    article: one(articles, {\n      fields: [categoriesArticles.articleId],\n      references: [articles.id],\n    }),\n  }),\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        categoriesRelations\n                        \n                    \n                \n            \n                \n                    \n                        Default value : relations(categories, ({ one, many }) => ({\n  categoriesArticles: many(categoriesArticles),\n  parentCategory: one(categories, {\n    fields: [categories.parentCategoryId],\n    references: [categories.id],\n    relationName: 'nested_categories',\n  }),\n  nestedCategories: many(categories, {\n    relationName: 'nested_categories',\n  }),\n}))\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        databaseSchema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  articles,\n  users,\n  articlesRelations,\n  categories,\n  categoriesArticles,\n  categoriesArticlesRelations,\n  categoriesRelations,\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Default value : pgTable('users', {\n  id: serial('id').primaryKey(),\n  email: text('email').unique().notNull(),\n  name: text('name').notNull(),\n  password: text('password').notNull(),\n})\n                    \n                \n\n\n        \n    \n\n    src/shared/swagger/decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        configService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new SettingService()\n                    \n                \n\n\n        \n    \n\n    src/core/database/database.module-definition.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CONNECTION_POOL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'CONNECTION_POOL'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ConfigurableModuleBuilder()\n  .setClassMethodName('forRoot')\n  .build()\n                    \n                \n\n\n        \n    \n\n    src/common/filters/constraint-errors.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        constraintErrors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Default value : {\n    UQ_97672ac88f789774dd47f7c8be3: 'error.unique.email',\n  }\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    src/tracing.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        otelSDK\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NodeSDK({\n    resource: new Resource({\n      [SemanticResourceAttributes.SERVICE_NAME]: `nestjs-otel`, // update this to a more relevant name for you!\n    }),\n    spanProcessor: new SimpleSpanProcessor(traceExporter),\n    instrumentations: [\n      new HttpInstrumentation(),\n      new ExpressInstrumentation(),\n      new NestInstrumentation(),\n    ],\n  })\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        traceExporter\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ConsoleSpanExporter()\n                    \n                \n\n\n        \n    \n\n    src/shared.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        providers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [SettingService]\n                    \n                \n\n\n        \n    \n\n    src/core/redis/redis.client.factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        redisClientFactory\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FactoryProvider\n\n                    \n                \n                \n                    \n                        Default value : {\n    provide: 'RedisClient',\n    useFactory: () => {\n        const redisInstance = new Redis({\n            host: process.env.REDIS_HOST,\n            port: process.env.REDIS_PORT ? parseInt(process.env.REDIS_PORT) : 6379,\n        });\n\n        redisInstance.on('error', e => {\n            throw new Error(`Redis connection failed: ${e}`);\n        });\n\n        return redisInstance;\n    },\n    inject: [],\n}\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: string[]) => SetMetadata('roles', roles)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
